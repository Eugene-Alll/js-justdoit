{"version":3,"sources":["core/app-bootstrap.js","core/app.mdl.js","common/config/interceptors.cfg.js","common/config/router.cfg.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/lists-filter.srv.js","common/services/lists.fctr.js","common/services/search.fctr.js","common/services/state-change-error.srv.js","common/services/state-change-success.srv.js","common/services/tags.srv.js","common/services/task.fctr.js","common/services/user-data.srv.js","common/services/user-logged.srv.js","common/services/user.fctr.js","common/components/list/list.cmp.js","common/components/task/task.cmp.js","common/directives/custom-focus/custom-focus.drv.js","common/directives/click-outside/click-outside.drv.js","common/directives/contenteditable/contenteditable.drv.js","common/directives/click-enter/click-enter.drv.js","common/directives/file-reader/file-reader.drv.js","common/directives/fog/fog.drv.js","common/directives/list-background/list-background.drv.js","common/directives/list-invite/list-invite.drv.js","common/directives/new-list/new-list.drv.js","core/main/main-interests/main-interests.ctrl.js","core/main/main-lists/main-lists.ctrl.js","core/auth/auth-signup/auth-signup.ctrl.js","core/auth/auth-login/auth-login.ctrl.js","core/main-profile/profile-account/profile-account.ctrl.js","core/main-profile/profile-password/profile-password.ctrl.js","core/navbar/navbar-user/navbar-user.ctrl.js"],"names":["angular","element","document","ready","bootstrap","configure","$locationProvider","$stateProvider","$urlRouterProvider","$httpProvider","configRouter","configInterceptors","runBlock","stateChangeSuccess","stateChangeError","initialize","module","config","run","$inject","interceptors","push","constant","state","url","views","navbar","templateUrl","content","abstract","resolve","isUserLogged","content@","controller","controllerAs","profile","otherwise","html5Mode","userLogged","logged","authInterceptor","$rootScope","$q","$window","$injector","request","headers","localStorage","token","Authorization","responseError","response","status","get","go","reject","factory","AuthService","$resource","type","save","method","params","login","listsFilter","this","setIsOwnFilter","isOwnFilter","getIsOwnFilter","service","ListsService","data","id","user","query","isArray","update","SearchService","lists","users","$state","$on","event","toState","toParams","fromState","fromParams","error","username","stateNames","name","split","body","length","tags","getTagsAndText","text","hashTags","twitterTags","twttr","txt","extractHashtags","forEach","item","indexOf","replace","TaskService","list","task","userData","$stateParams","getData","setData","isOwnerPage","isOwnerList","listOwner","deferred","defer","promise","UserService","currentUser","getCurrentUser","avatar","getInterests","setInterests","listController","$scope","addNewTask","validation","allowSavingTask","listID","taskText","self","tasks","clearInput","closePopup","showInviteList","showBackground","closePopupAndOverlay","$emit","invitePeople","openBackgroundPopup","removeList","reload","saveTextToTemp","textBeforeEdit","title","textTemp","saveEditedTitle","result","reloadTasks","_id","isOwner","owner","$watch","component","bindings","taskController","changeColor","className","target","hasClass","taskID","color","closeEditMode","editMode","closeDropdown","dropdownIsOpen","editTaskText","focusOn","openDropdown","currentTarget","setTaskCompleted","completed","saveEditedText","removeTask","$onInit","listCtrl","require","customFocusDirective","$timeout","linkFunc","scope","attrs","value","focus","trigger","directive","restrict","link","clickOutsideDirective","$document","$parse","fn","eventHandler","childElement","contains","$apply","on","off","contenteditableDirective","ngModel","read","$setViewValue","html","$render","$viewValue","bind","clickEnterDirective","which","$eval","clickEnter","fileReaderDirective","image","files","fogDirective","hideFogOverlay","showFogState","$parent","$broadcast","showFogOverlay","listenerShowOverlay","listenerHideOverlay","template","listBackgroundDirective","clickHandler","parent","children","removeClass","addClass","listInviteDirective","elem","loadData","members","i","interests","slice","stash","alreadyAddedUsers","searchPeople","usedNames","responce","showSearchResult","saveToStash","removeFromStash","member","indexAddedUsers","index","splice","saveToMembers","cleanInputs","newVal","newListDirective","loadCurrentUser","currentUserData","saveNewList","newListSubmitted","newListTitle","searchUser","removeFromMembers","nameMember","newListForm","$setPristine","show","InterestsPageCtrl","chooseInterest","vm","selectedInterest","colorsArray","shift","removeInterest","targetId","dataset","selectedId","querySelectorAll","saveInterests","arrayToSend","emptyInterests","ListsPageCtrl","activate","listsVm","isCurrentUser","console","log","createNewList","showNewList","reloadList","selectSort","filter","SignupPageCtrl","submitData","signupVm","submitted","userName","email","userEmail","password","userPassword","message","clearMessageError","LoginPageCtrl","loginVm","AccountPageCtrl","saveChanges","messageDone","changeAvatar","reader","localeCompare","FileReader","onload","avatarImage","readAsDataURL","PasswordPageCtrl","savePassword","errorConfirmPass","newPass","newPassConfirm","oldPass","UserNavCtrl","load","navVm","logout","listener"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, [\"llamaLists\"]);\n  });\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists', ['ui.router', 'ngMessages', 'ngResource', 'ngAnimate'])\n    .config(configure)\n    .run(runBlock);\n\n\n  configure.$inject = [\"$locationProvider\", \"$stateProvider\", \"$urlRouterProvider\", '$httpProvider', 'configRouter', 'configInterceptors'];\n  function configure($locationProvider, $stateProvider, $urlRouterProvider, $httpProvider, configRouter, configInterceptors) {\n    configRouter($locationProvider, $stateProvider, $urlRouterProvider);\n    configInterceptors($httpProvider);\n  }\n  /* set body id for css style */\n  runBlock.$inject = ['stateChangeSuccess', 'stateChangeError'];\n  function runBlock(stateChangeSuccess, stateChangeError) {\n    stateChangeSuccess.initialize();\n    stateChangeError.initialize();\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configInterceptors', configInterceptors);\n\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push(\"AuthInterceptor\");\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configRouter', configRouter);\n\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider) {\n      $stateProvider\n        .state(\"home\", {\n          url: \"/\",\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-auth/navbar-auth.tpl.html\"\n            },\n            \"content\": {\n              templateUrl: \"home/home.tpl.html\"\n            }\n          }\n        })\n        .state(\"auth\", {\n          url: \"\",\n          abstract: true,\n          resolve: {\n            isUserLogged: isUserLogged\n          }\n        })\n        .state(\"auth.login\", {\n          url: \"/login\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-login/auth-login.tpl.html\",\n              controller:   \"loginPageCtrl\",\n              controllerAs: \"loginVm\"\n            }\n          }\n        })\n        .state(\"auth.signup\", {\n          url: \"/signup\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-signup/auth-signup.tpl.html\",\n              controller:   \"signupPageCtrl\",\n              controllerAs: \"signupVm\"\n            }\n          }\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-user/navbar-user.tpl.html\",\n              controller:   \"userNavCtrl\",\n              controllerAs: \"navVm\"\n            }\n          }\n        })\n        .state(\"main.lists\", {\n          url: \"/:username\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-lists/main-lists.tpl.html\",\n              controller:   \"listsPageCtrl\",\n              controllerAs: \"listsVm\"\n            }\n          }\n        })\n        .state(\"main.interests\", {\n          url: \"/interests/\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-interests/main-interests.tpl.html\",\n              controller:   \"interestsPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile\", {\n          url: \"/profile\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main-profile/main-profile.tpl.html\"\n            }\n          }\n        })\n        .state(\"main.profile.account\", {\n          url: \"/account\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-account/profile-account.tpl.html\",\n              controller:   \"accountPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile.password\", {\n          url: \"/password\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-password/profile-password.tpl.html\",\n              controller:   \"passwordPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"404\", {\n          url: \"/404\",\n          views: {\n            \"content\": {\n              templateUrl: \"404/404.tpl.html\"\n            }\n          }\n        });\n\n      $urlRouterProvider.otherwise(\"/404\");\n      $locationProvider.html5Mode(true);\n    }\n\n    isUserLogged.$inject = ['userLogged'];\n    function isUserLogged(userLogged) {\n      return userLogged.logged();\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .factory('AuthInterceptor', authInterceptor);\n\n    authInterceptor.$inject = [\"$rootScope\", \"$q\", \"$window\", \"$injector\"];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = \"Bearer \" + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go(\"home\"); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go(\"404\");\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"AuthService\", AuthService);\n\n    AuthService.$inject = [\"$resource\"];\n    function AuthService($resource) {\n      return $resource(\"/auth/:type\", {\n        type: \"@type\"\n      },\n      {\n        save: {\n          method: \"POST\",\n          params: {\n            type: \"signup\"\n          }\n        },\n        login: {\n          method: \"POST\",\n          params: {\n            type: \"login\"\n          }\n        }\n      });\n    }\n})();\n","/**\n * This service need for hiding some element if filtering lists\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"listsFilter\", listsFilter);\n\n    function listsFilter() {\n\n      this.setIsOwnFilter = function(type) {\n        this.isOwnFilter = type;\n      }\n\n      this.getIsOwnFilter = function() {\n        return this.isOwnFilter;\n      }\n    }\n})();\n","/**\n * This service controll lists request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListsService\", ListsService);\n\n    ListsService.$inject = [\"$resource\"];\n    function ListsService($resource) {\n      var data = $resource(\"/api/lists/:id:user\", { id: \"@id\", user: \"@user\"}, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll search request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('SearchService', SearchService);\n\n    SearchService.$inject = ['$resource'];\n    function SearchService($resource) {\n      var data = $resource('/api/search/:type', {},\n      {\n        lists: {\n          method: 'GET',\n          params: {\n            type: 'lists'\n          }\n        },\n        users: {\n          method: 'POST',\n          params: {\n            type: 'users'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeError', stateChangeError);\n\n    stateChangeError.$inject = ['$rootScope', '$state', '$window'];\n    function stateChangeError($rootScope, $state, $window) {\n      return {\n        initialize: function() {\n          $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n            if (error === 'isAlreadyLogged') {\n              $state.go('main.lists', { username: $window.localStorage.user });\n            }\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeSuccess', stateChangeSuccess);\n\n    stateChangeSuccess.$inject = ['$rootScope'];\n    function stateChangeSuccess($rootScope) {\n        return {\n          initialize: function() {\n            $rootScope.$on('$stateChangeSuccess', function(event, toState){\n              var stateNames = toState.name.split('.');\n              document.body.id = stateNames[stateNames.length - 1] + '-page';\n            });\n          }\n        }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"tags\", tags);\n\n    function tags() {\n\n      this.getTagsAndText = function(text) {\n        var hashTags = [];\n        var twitterTags = twttr.txt.extractHashtags(text);\n\n        twitterTags.forEach(function(item) {\n\n          // twitter extracted tags without hash, therefore add this symbol for them\n          if (hashTags.indexOf(item) === -1) { // additional check on the tags already added\n            hashTags.push(item);\n          }\n\n          if (text.indexOf('<span>#' + item + '</span>') === -1) {\n            text = text.replace('#' + item, '<span>#' + item + '</span>');\n          }\n\n          // text = text.replace(/(^|\\s)#ama(\\s|$)/, '<span>#' + item + '</span>'); // maybe work replace word\n          // text = text.replace('#' + item, '<span>#' + item + '</span>').replace(/\\s\\s+/g, ' '); // replace spaces\n        });\n\n        return {\n          text: text,\n          hashTags: hashTags\n        }\n      }\n    }\n})();\n","/**\n * This service controll task request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"TaskService\", TaskService);\n\n    TaskService.$inject = [\"$resource\"];\n    function TaskService($resource) {\n      var data = $resource(\"/api/lists/:list/task/:task\", { list: \"@list\", task: \"@task\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll all user data (like a avatar, name, interests)\n * And also check the logged user placing on your own page\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userData\", userData);\n\n    userData.$inject = ['$window', '$stateParams'];\n    function userData($window, $stateParams) {\n\n      this.getData = function() {\n          return this.userData;\n      }\n\n      this.setData = function(user) {\n        this.userData = user;\n      }\n\n      this.isOwnerPage = function() {\n        if ($window.localStorage.user !== $stateParams.username) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      this.isOwnerList = function(listOwner) {\n        if ($window.localStorage.user !== listOwner) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userLogged\", userLogged);\n\n    userLogged.$inject = [\"$window\", \"$state\", \"$q\"];\n    function userLogged($window, $state, $q) {\n\n      this.logged = function() {\n        var deferred = $q.defer();\n        if($window.localStorage.token) {\n          deferred.reject(\"isAlreadyLogged\");\n        } else {\n          deferred.resolve();\n        }\n\n        return deferred.promise;\n      }\n    }\n})();\n","/**\n * This service controll user request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('UserService', UserService);\n\n    UserService.$inject = ['$resource', '$window'];\n    function UserService($resource, $window) {\n      var currentUser = $window.localStorage.user;\n\n      var data = $resource('/api/user/:name:type', { name: '@name', type: '@type' }, {\n        update:  {\n          method: 'PUT'\n        },\n        getCurrentUser: {\n          method: 'GET',\n          params: {\n            name: currentUser\n          }\n        },\n        avatar: {\n          method: 'PUT',\n          params: {\n            type: 'avatar'\n          }\n        },\n        getInterests: {\n          method: 'GET',\n          params: {\n            type: 'interests'\n          }\n        },\n        setInterests: {\n          method: 'PUT',\n          params: {\n            type: 'interests'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This component controll list data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"list\", {\n      bindings: {\n        data: \"=\",\n        reload: \"&\"\n      },\n      controller: listController,\n      templateUrl: 'scripts/common/components/list/list.tpl.html'\n    });\n\n    listController.$inject = ['$scope', '$rootScope', 'ListsService', 'TaskService', 'listsFilter', 'userData', 'tags'];\n    function listController($scope, $rootScope, ListsService, TaskService, listsFilter, userData, tags) {\n      //variable\n      var allowSavingTask = true;\n      var textBeforeEdit = '';\n      var textTemp = '';\n      var self = this;\n      this.listID = this.data._id;\n      this.isOwner = userData.isOwnerList(this.data.owner.name);\n\n      // watcher\n      $scope.$watch(function() {\n        return listsFilter.getIsOwnFilter();\n      }, function() {\n        self.isOwnFilter = listsFilter.getIsOwnFilter();\n      });\n\n      // function\n      this.addNewTask = addNewTask;\n      this.clearInput = clearInput;\n      this.closePopupAndOverlay = closePopupAndOverlay;\n      this.invitePeople = invitePeople;\n      this.openBackgroundPopup = openBackgroundPopup;\n      this.saveEditedTitle = saveEditedTitle;\n      this.saveTextToTemp = saveTextToTemp;\n      this.removeList = removeList;\n      this.reloadTasks = reloadTasks;\n      $scope.$on('closePopup', closePopup);\n\n      function addNewTask(validation) {\n\n        if (validation && allowSavingTask) {\n          allowSavingTask = false;\n\n          TaskService.save({ list: this.listID }, { text: this.taskText }, function (response) {\n            self.data.tasks = response.tasks;\n            self.taskText = null;\n            allowSavingTask = true;\n          });\n        }\n      }\n\n      function clearInput() {\n        this.taskText = null;\n      }\n\n      function closePopup() {\n        self.showInviteList = false;\n        self.showBackground = false;\n      }\n\n      function closePopupAndOverlay() {\n        this.showBackground = false;\n        this.showInviteList = false;\n        $rootScope.$emit(\"hideFogOverlay\");\n      }\n\n      function invitePeople() {\n        this.showInviteList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function openBackgroundPopup() {\n        this.showBackground = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function removeList() {\n        ListsService.delete({ id: this.listID }, function () {\n          self.reload();\n        });\n      }\n\n      function saveTextToTemp() {\n        textBeforeEdit = this.data.title;\n        this.data.title = this.data.title.replace(/(<([^>]+)>)/ig, '');\n        textTemp = this.data.title;\n\n      }\n\n      function saveEditedTitle() {\n        // replacement needed, because when contenteditable element empty,\n        // browser automaticaly add br tag\n        // and I don't know this is bug or feature\n        // var editedText = this.data.title.replace(/<br>/, \"\");\n\n        if (textTemp && textTemp !== this.data.title) {\n          var result = tags.getTagsAndText(this.data.title);\n          this.data.title = result.text;\n          this.data.tags = result.hashTags;\n\n          ListsService.update({ id: this.listID }, { list: this.data });\n        } else {\n          this.data.title = textBeforeEdit;\n        }\n      }\n\n      function reloadTasks(listID) {\n        TaskService.query({ list: listID }, function (response) {\n          self.data.tasks = response.tasks;\n        });\n      }\n    }\n})();\n","/**\n * This directive controll task data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"task\", {\n      bindings: {\n        data: \"=\"\n      },\n      require: {\n        listCtrl: '^list'\n      },\n      controller: taskController,\n      templateUrl: 'scripts/common/components/task/task.tpl.html'\n    });\n\n    taskController.$inject = ['TaskService'];\n    function taskController(TaskService) {\n      var listID;\n      var reloadTasks;\n      var textBeforeEdit;\n      var taskID = this.data._id;\n      var self = this;\n      this.dropdownIsOpen = false;\n\n      //func\n      this.changeColor = changeColor;\n      this.closeEditMode = closeEditMode;\n      this.closeDropdown = closeDropdown;\n      this.editTaskText = editTaskText;\n      this.openDropdown = openDropdown;\n      this.setTaskCompleted = setTaskCompleted;\n      this.saveEditedText = saveEditedText;\n      this.removeTask = removeTask;\n\n      this.$onInit = function() {\n        listID = this.listCtrl.listID;\n        reloadTasks = this.listCtrl.reloadTasks;\n      }\n\n\n      function changeColor(event) {\n        var className = event.target.className;\n        var target = angular.element(event.target);\n\n        if (!target.hasClass(\"task__color--active\")) {\n          className = className.replace(\"task__color \", \"\"); // remove unnecessary part of class name\n\n          TaskService.update({ list: listID, task: taskID }, { color: className }, function (response) {\n            self.data.color = className;\n          });\n        }\n      }\n\n      function closeEditMode() {\n        this.data.text = textBeforeEdit;\n        this.editMode = false;\n      }\n\n      function closeDropdown() {\n        this.dropdownIsOpen = false;\n      }\n\n      function editTaskText() {\n        textBeforeEdit = this.data.text;\n        this.editMode = true;\n        this.focusOn = true;\n        this.closeDropdown();\n      }\n\n      function openDropdown(event) {\n        if (event.currentTarget === event.target) {\n          this.dropdownIsOpen = (this.dropdownIsOpen) ? false : true;\n        }\n      }\n\n      function setTaskCompleted(event) {\n        if (this.editMode !== true) {\n          TaskService.update({ list: listID, task: taskID }, { completed: true }, function (response) {\n            self.data.completed = response.task.completed;\n          });\n        }\n      }\n\n      function saveEditedText() {\n        if (this.data.text) {\n          TaskService.update({ list: listID, task: taskID }, { text: this.data.text }, function (response) {\n            self.editMode = false;\n          });\n        } else {\n          this.closeEditMode();\n        }\n      }\n\n      function removeTask() {\n        TaskService.delete({ list: listID, task: taskID }, function (response) {\n          reloadTasks(listID);\n        });\n      }\n    }\n})();\n","/**\n * This directive setup focus to non form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"customFocus\", customFocusDirective)\n\n    customFocusDirective.$inject = [\"$timeout\"];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: \"A\",\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n          // element[0].focus();\n\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","/**\n * This directive add custom ng-model directive to non-form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"contenteditable\", contenteditableDirective)\n\n    function contenteditableDirective() {\n      var directive = {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, ngModel) {\n        function read() {\n          ngModel.$setViewValue(element.html());\n        }\n\n        ngModel.$render = function() {\n          element.html(ngModel.$viewValue || \"\");\n        };\n\n        element.bind(\"blur keyup change\", function() {\n          scope.$apply(read);\n        });\n      }\n    }\n\n}());\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickEnter\", clickEnterDirective);\n\n    function clickEnterDirective() {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        element.bind(\"keypress\", function (event) {\n          if(event.which === 13) { // 13 is enter code on keyboard :)\n            scope.$apply(function (){\n              scope.$eval(attrs.clickEnter);\n            });\n          }\n        });\n      }\n    }\n})();\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","/**\n * This directive controll fog(black-transparent background)\n * for all popup window\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fog\", fogDirective);\n\n    fogDirective.$inject = [\"$rootScope\"];\n    function fogDirective($rootScope) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        scope: {},\n        template: \"<div id='fog' ng-show='showFogState' ng-click='hideFogOverlay()'></div>\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var listenerShowOverlay = $rootScope.$on(\"showFogOverlay\", showFogOverlay);\n        var listenerHideOverlay = $rootScope.$on(\"hideFogOverlay\", hideFogOverlay);\n        scope.hideFogOverlay = hideFogOverlay;\n\n        /**\n         * remove rootscope listener\n         */\n        scope.$on('$destroy', listenerShowOverlay);\n        scope.$on('$destroy', listenerHideOverlay);\n\n        /**\n         * This function close any popup window\n         * And hide fog (or overlay)\n         */\n        function hideFogOverlay() {\n          scope.showFogState = false;\n          scope.$parent.$broadcast(\"closePopup\");\n        }\n\n        function showFogOverlay() {\n          scope.showFogState = true;\n        }\n      }\n    }\n})();\n","/**\n * This directive controll popup and change background for lists\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listBackground\", listBackgroundDirective);\n\n    listBackgroundDirective.$inject = ['ListsService']\n    function listBackgroundDirective(ListsService) {\n      var directive = {\n        restrict: \"A\",\n        require: '^list',\n        replace: true,\n        scope: {},\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, listCtrl) {\n        if (attrs.class === listCtrl.data.image) {\n          element.addClass('active-background');\n        }\n\n        element.bind('click', clickHandler);\n\n        function clickHandler() {\n          if (!element.hasClass('active-background')) {\n            listCtrl.data.image = attrs.class;\n            element.parent().children().removeClass('active-background'); // baaaaaaaadd code\n\n            ListsService.update({ id: listCtrl.listID }, { list: listCtrl.data }, function (response) {\n              element.addClass('active-background');\n            });\n          }\n        }\n      }\n    }\n})();\n","/**\n * This directive controll invite new people to list\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listInvite\", listInviteDirective);\n\n    listInviteDirective.$inject = ['SearchService', 'ListsService'];\n    function listInviteDirective(SearchService, ListsService) {\n      var directive = {\n        restrict: \"E\",\n        require: '^list',\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-invite/list-invite.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs, listCtrl) {\n        var alreadyAddedUsers = [];\n        scope.owner = listCtrl.data.owner;\n        scope.stash = [];\n        scope.searchPeople = searchPeople;\n        scope.saveToStash = saveToStash;\n        scope.removeFromStash = removeFromStash;\n        scope.saveToMembers = saveToMembers;\n\n        scope.$watch(function() {\n          return listCtrl.showInviteList;\n        }, function(newVal) {\n          if (newVal === true) {\n            loadData();\n          } else {\n            cleanInputs();\n          }\n        });\n\n        function loadData() {\n          listCtrl.data.members.forEach(function(i) {\n            i.interests = i.interests.slice(0, 3);\n            scope.stash.push(i);\n            alreadyAddedUsers.push(i.name);\n          });\n\n          alreadyAddedUsers.push(listCtrl.data.owner.name);\n        }\n\n        function searchPeople() {\n          if (scope.members) {\n            SearchService.users({}, { name: scope.members, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToStash(user) {\n          scope.stash.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.users = null;\n        }\n\n        function removeFromStash(member) {\n          var indexAddedUsers;\n\n          scope.stash.forEach(function(i, index) {\n            if (scope.stash[index].name === member.name) {\n              scope.stash.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function saveToMembers() {\n          var list = listCtrl.data;\n\n          list.members = scope.stash;\n\n          ListsService.update({ id: listCtrl.listID }, { list: list }, function (response) {\n            cleanInputs();\n            listCtrl.showInviteList = true;\n            listCtrl.closePopupAndOverlay();\n          });\n        }\n\n        function cleanInputs() {\n          alreadyAddedUsers = [];\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.stash = [];\n          scope.users = [];\n        }\n      }\n    }\n})();\n","/**\n * This directive controll creating new list and at once add people to this list\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .directive('newList', newListDirective);\n\n    newListDirective.$inject = ['$rootScope', '$window', 'UserService', 'SearchService', 'ListsService', 'userData', 'tags'];\n    function newListDirective($rootScope, $window, UserService, SearchService, ListsService, userData, tags) {\n      var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {\n          lists: '=',\n          show: '='\n        },\n        templateUrl: 'scripts/common/directives/new-list/new-list.tpl.html',\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs) {\n        scope.showSearchResult = false;\n        scope.members = [];\n        scope.saveNewList = saveNewList;\n        scope.searchPeople = searchPeople;\n        scope.saveToMembers = saveToMembers;\n        scope.removeFromMembers = removeFromMembers;\n        var alreadyAddedUsers = [];\n\n        scope.$watch(function() {\n          return scope.show;\n        }, function(newVal) {\n          if (newVal === true) {\n            scope.focus = true;\n            alreadyAddedUsers.push(scope.currentUserData.name);\n          } else {\n            cleanInputs();\n          }\n        });\n\n        loadCurrentUser();\n\n        function loadCurrentUser() {\n          if (!userData.getData()) {\n            UserService.getCurrentUser(function (response) {\n              userData.setData(response.user);\n              scope.currentUserData = response.user;\n            });\n          } else {\n            scope.currentUserData = userData.getData();\n          }\n        }\n\n        function saveNewList(validation) {\n          scope.newListSubmitted = true;\n\n          if (validation) {\n            var result = tags.getTagsAndText(scope.newListTitle);\n\n            var title = result.text;\n            var hashTags = result.hashTags;\n\n            ListsService.save({ title: title, tags: hashTags, members: scope.members }, function (response) {\n              scope.lists.push(response.list);\n              $rootScope.$emit('hideFogOverlay');\n              cleanInputs();\n            });\n          }\n        }\n\n        function searchPeople() {\n          if (scope.searchUser) {\n            SearchService.users({}, { name: scope.searchUser, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToMembers(user) {\n          scope.members.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.searchUser = null;\n          scope.users = [];\n        }\n\n        function removeFromMembers(member) {\n          var indexAddedUsers;\n\n          scope.members.forEach(function(i, index) {\n            if (scope.members[index].name === member.name) {\n              scope.members.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function cleanInputs() {\n          scope.showSearchResult = false;\n          scope.users = [];\n          scope.members = [];\n          scope.searchUser = null;\n          scope.nameMember = null;\n          scope.newListTitle = null;\n          scope.newListForm.$setPristine();\n          scope.newListSubmitted = false;\n          alreadyAddedUsers = [];\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"interestsPageCtrl\", InterestsPageCtrl);\n\n    InterestsPageCtrl.$inject = [\"$timeout\", \"$window\", \"$state\", \"UserService\"];\n    function InterestsPageCtrl($timeout, $window, $state, UserService) {\n      var vm = this;\n      var i = 0;\n      var colorsArray = [\"red\", \"orange\", \"yellow\", \"green\", \"indigo\", \"violet\"];\n      var promiseTimeout;\n      vm.interests = [];\n      vm.selectedInterest = [];\n      vm.chooseInterest = chooseInterest;\n      vm.removeInterest = removeInterest;\n      vm.saveInterests = saveInterests;\n      vm.username = $window.localStorage.user; // send to ui-router\n      // delay is necessary to run the animation\n      UserService.getInterests(function (response) {\n        $timeout(function() {\n          vm.interests = response.interests;\n        }, 100);\n      });\n\n      /**\n       * This function set to target element some class,\n       * add to array of chosen interests - new interest\n       * and remove from array of colors - first color\n       * which is used in the array of chosen interests,\n       */\n      function chooseInterest(event, index) {\n        var target = angular.element(event.target);\n        if (i < 6) {\n          target.addClass(\"chosen-interest\");\n          vm.selectedInterest.push({ text: target.text(), color: colorsArray[0], id: index });\n          colorsArray.shift();\n          i++;\n        }\n      }\n\n      /**\n       * This function get data-id from target element\n       * Removes the necessary item from the array by index\n       * Find the element of interests by data and remove some class\n       * and push to the array of colors - color from target element\n       */\n      function removeInterest(event, index) {\n        var targetId = event.target.dataset.selectedId;\n        vm.selectedInterest.splice(index, 1);\n        angular.element(document.querySelectorAll(\"[data-id='\" + targetId + \"']\")).removeClass(\"chosen-interest\");\n        colorsArray.push(event.target.dataset.color)\n        i--;\n      }\n      // i know this code placing between fuck and shit\n\n      function saveInterests() {\n        var arrayToSend = [];\n\n        if (vm.selectedInterest.length > 0) {\n          vm.selectedInterest.forEach(function(item) {\n            arrayToSend.push(item.text);\n          });\n          UserService.setInterests({}, { interests: arrayToSend }, function (response) {\n            $state.go(\"main.lists\");\n          });\n        } else {\n\n          vm.emptyInterests = (vm.emptyInterests)\n            ? false\n            : true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"listsPageCtrl\", ListsPageCtrl);\n\n    ListsPageCtrl.$inject = [\"$scope\", \"$rootScope\", \"$stateParams\", \"ListsService\", 'UserService', 'userData', 'listsFilter'];\n    function ListsPageCtrl($scope, $rootScope, $stateParams, ListsService, UserService, userData, listsFilter) {\n      var listsVm = this;\n      var username = $stateParams.username;\n      listsVm.showNewList; // check open popup\n      listsVm.newListSubmitted; // check press submit button\n      listsVm.createNewList = createNewList;\n      listsVm.selectSort = selectSort;\n      listsVm.reloadList = reloadList;\n      listsVm.isOwner = userData.isOwnerPage();\n\n      // fog broadcast\n      $scope.$on('closePopup', closePopup);\n\n      activate();\n\n      function activate() {\n        // if we work with page of another user\n        if (listsVm.isCurrentUser !== true) {\n          // load his data\n          UserService.get({ name: username }, function (response) {\n            listsVm.user = response.user;\n          });\n        }\n\n        // get all lists of user\n        ListsService.get({ user: username }, function (response) {\n          console.log(response)\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function createNewList() {\n        listsVm.showNewList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function reloadList() {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function selectSort(type) {\n        listsVm.filter = {\n          owner: {}\n        };\n\n        if (type === 'own') {\n          listsVm.filter.owner.name = 'Eugene';\n          listsFilter.setIsOwnFilter(true);\n        } else if (type === 'inbox') {\n          listsVm.filter.owner.name = '!Eugene';\n          listsFilter.setIsOwnFilter(false);\n        }\n      }\n\n      function closePopup() {\n        listsVm.showNewList = false;\n      }\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"signupPageCtrl\", SignupPageCtrl);\n\n    SignupPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n    function SignupPageCtrl($window, $state, AuthService) {\n      var signupVm = this;\n\n      signupVm.submitted;\n      signupVm.message;\n      signupVm.submitData = submitData;\n      signupVm.clearMessageError = clearMessageError;\n\n      function submitData(validation) {\n        signupVm.submitted = true;\n\n        if (validation) {\n          var userData = {\n            username: signupVm.userName,\n            email:    signupVm.userEmail,\n            password: signupVm.userPassword\n          }\n\n          AuthService.save({}, userData, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = signupVm.userName;\n            $state.go(\"main.interests\");\n          }, function (error) {\n            delete $window.localStorage.token;\n            signupVm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        signupVm.message = null;\n      }\n    }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"loginPageCtrl\", LoginPageCtrl);\n\n  LoginPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n  function LoginPageCtrl($window, $state, AuthService) {\n    var loginVm = this;\n    loginVm.submitted;\n    loginVm.submitData = submitData;\n    loginVm.clearMessageError = clearMessageError;\n\n    function submitData(validation) {\n      loginVm.submitted = true;\n\n      if (validation) {\n        var userData = {\n          username: loginVm.username,\n          password: loginVm.password\n        };\n\n        AuthService.login({}, userData, function (response) {\n          $window.localStorage.token = response.token;\n          $window.localStorage.user = loginVm.username;\n          $state.go(\"main.lists\", { username: loginVm.username });\n        }, function (error) {\n          delete $window.localStorage.token;\n          loginVm.message = error.data.message;\n        });\n      }\n    }\n\n    function clearMessageError() {\n      loginVm.message = null;\n    }\n  }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('accountPageCtrl', AccountPageCtrl);\n\n    AccountPageCtrl.$inject = ['$window', '$rootScope', 'UserService', 'userData'];\n    function AccountPageCtrl($window, $rootScope, UserService, userData) {\n      var vm = this;\n      vm.saveChanges = saveChanges;\n      vm.changeAvatar = changeAvatar;\n      vm.clearMessageError = clearMessageError;\n\n      activate();\n\n      function activate() {\n        if (!userData.getData()) {\n          UserService.getCurrentUser(function (response) {\n            userData.setData(response.user);\n            vm.user = response.user;\n          });\n        } else {\n          vm.user = userData.getData();\n        }\n      }\n\n      function saveChanges(validation) {\n\n        if (validation) {\n          vm.message = null;\n          vm.messageDone = null;\n          UserService.update({}, { user: vm.user }, function (response) {\n            vm.messageDone = response.message;\n            $rootScope.$emit('reloadNavbar');\n          }, function (error) {\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          console.log('error')\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.avatarImage = response.avatar;\n            $rootScope.$emit('reloadNavbar');\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"passwordPageCtrl\", PasswordPageCtrl);\n\n    PasswordPageCtrl.$inject = [\"UserService\"];\n    function PasswordPageCtrl(UserService) {\n      var vm = this;\n\n      vm.savePassword = savePassword;\n\n      function savePassword(validation) {\n        vm.submitted = true;\n        vm.errorConfirmPass = null;\n        vm.message = null;\n        vm.messageDone = null;\n        var body = {};\n        if(validation) {\n          if (vm.newPass === vm.newPassConfirm) {\n            body = {\n              oldPass: vm.oldPass,\n              newPass: vm.newPassConfirm\n            }\n\n            UserService.save({}, body, function (response) {\n              vm.messageDone = response.message;\n            }, function (error) {\n              vm.message = error.data.message;\n            });\n          } else {\n            vm.errorConfirmPass = true;\n          }\n        }\n      }\n    };\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('userNavCtrl', UserNavCtrl);\n\n    UserNavCtrl.$inject = ['$rootScope', '$scope', '$state', '$window', 'UserService', 'userData'];\n    function UserNavCtrl($rootScope, $scope, $state, $window, UserService, userData) {\n      var navVm = this;\n      navVm.user = {};\n      navVm.logout = logout;\n      navVm.openDropdown = openDropdown;\n      navVm.changeAvatar = changeAvatar;\n      navVm.closeDropdown = closeDropdown;\n      navVm.username = $window.localStorage.user;\n      var listener = $rootScope.$on('reloadNavbar', load);\n\n      load();\n\n      function load() {\n        if (!userData.getData()) {\n          UserService.getCurrentUser(function (response) {\n            userData.setData(response.user);\n            navVm.user = response.user;\n          });\n        } else {\n          navVm.user = userData.getData();\n        }\n      }\n\n      function openDropdown(event) {\n        navVm.dropdownIsOpen = (navVm.dropdownIsOpen) ? false : true;\n      }\n\n      function closeDropdown() {\n        navVm.dropdownIsOpen = false;\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          console.log('error')\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            navVm.avatarImage = response.avatar;\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        $state.go('home');\n      }\n\n      $scope.$on('$destroy', listener);\n    };\n\n})();\n"],"sourceRoot":"/source/"}