{"version":3,"sources":["core/app-bootstrap.js","core/app.mdl.js","common/config/interceptors.cfg.js","common/config/router.cfg.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/lists.fctr.js","common/services/search.fctr.js","common/services/state-change-error.srv.js","common/services/state-change-success.srv.js","common/services/tags.srv.js","common/services/task.fctr.js","common/services/user-logged.srv.js","common/services/user.fctr.js","common/components/list/list.cmp.js","common/components/task/task.cmp.js","common/directives/click-enter/click-enter.drv.js","common/directives/click-outside/click-outside.drv.js","common/directives/contenteditable/contenteditable.drv.js","common/directives/custom-focus/custom-focus.drv.js","common/directives/file-reader/file-reader.drv.js","common/directives/fog/fog.drv.js","common/directives/list-background/list-background.drv.js","common/directives/list-invite/list-invite.drv.js","core/auth/auth-login/auth-login.ctrl.js","core/auth/auth-signup/auth-signup.ctrl.js","core/main/main-interests/main-interests.ctrl.js","core/main/main-lists/main-lists.ctrl.js","core/main-profile/profile-account/profile-account.ctrl.js","core/main-profile/profile-password/profile-password.ctrl.js","core/navbar/navbar-user/navbar-user.ctrl.js"],"names":["angular","element","document","ready","bootstrap","configure","$locationProvider","$stateProvider","$urlRouterProvider","$httpProvider","configRouter","configInterceptors","runBlock","stateChangeSuccess","stateChangeError","initialize","module","config","run","$inject","interceptors","push","constant","state","url","views","navbar","templateUrl","content","abstract","resolve","isUserLogged","content@","controller","controllerAs","profile","otherwise","html5Mode","userLogged","logged","authInterceptor","$rootScope","$q","$window","$injector","request","headers","localStorage","token","Authorization","responseError","response","status","get","go","reject","factory","AuthService","$resource","type","save","method","params","login","ListsService","data","id","user","query","isArray","update","SearchService","lists","users","$state","$on","event","toState","toParams","fromState","fromParams","error","username","stateNames","name","split","body","length","tags","this","getTagsAndText","text","hashTags","twitterTags","twttr","txt","extractHashtags","console","log","forEach","item","indexOf","replace","RegExp","service","TaskService","list","task","deferred","defer","promise","UserService","avatar","getInterests","setInterests","listController","$scope","$timeout","addNewTask","validation","allowSavingTask","listID","taskText","self","tasks","clearInput","closePopup","showInviteList","showBackground","closePopupAndOverlay","$emit","invitePeople","openBackgroundPopup","removeList","reload","saveTextToTemp","textBeforeEdit","title","textTemp","saveEditedTitle","result","reloadTasks","_id","component","bindings","taskController","changeColor","className","target","hasClass","taskID","color","closeEditMode","editMode","closeDropdown","dropdownIsOpen","editTaskText","focusOn","openDropdown","currentTarget","setTaskCompleted","completed","saveEditedText","removeTask","$onInit","listCtrl","require","clickEnterDirective","linkFunc","scope","attrs","bind","which","$apply","$eval","clickEnter","directive","restrict","link","clickOutsideDirective","$document","$parse","fn","eventHandler","childElement","contains","on","off","contenteditableDirective","ngModel","read","$setViewValue","html","$render","$viewValue","customFocusDirective","$watch","value","focus","trigger","fileReaderDirective","image","files","fogDirective","hideFogOverlay","showFogState","$parent","$broadcast","showFogOverlay","listenerShowOverlay","listenerHideOverlay","template","listBackgroundDirective","clickHandler","parent","children","removeClass","addClass","listInviteDirective","elem","loadData","members","i","interests","slice","stash","alreadyAddedUsers","owner","searchPeople","usedNames","responce","showSearchResult","saveToStash","removeFromStash","member","indexAddedUsers","index","splice","saveToMembers","newVal","LoginPageCtrl","submitData","loginVm","submitted","userData","password","message","clearMessageError","SignupPageCtrl","signupVm","userName","email","userEmail","userPassword","InterestsPageCtrl","chooseInterest","vm","selectedInterest","colorsArray","shift","removeInterest","targetId","dataset","selectedId","querySelectorAll","saveInterests","arrayToSend","emptyInterests","ListsPageCtrl","$stateParams","activate","listsVm","createNewList","newListPopup","reloadList","callback","saveNewList","newListSubmitted","newListTitle","newListForm","$setPristine","AccountPageCtrl","avatarImage","bio","saveChanges","messageDone","changeAvatar","reader","localeCompare","FileReader","onload","readAsDataURL","PasswordPageCtrl","savePassword","errorConfirmPass","newPass","newPassConfirm","oldPass","UserNavCtrl","load","navVm","logout","listener"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, [\"llamaLists\"]);\n  });\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists', ['ui.router', 'ngMessages', 'ngResource', 'ngAnimate'])\n    .config(configure)\n    .run(runBlock);\n\n\n  configure.$inject = [\"$locationProvider\", \"$stateProvider\", \"$urlRouterProvider\", '$httpProvider', 'configRouter', 'configInterceptors'];\n  function configure($locationProvider, $stateProvider, $urlRouterProvider, $httpProvider, configRouter, configInterceptors) {\n    configRouter($locationProvider, $stateProvider, $urlRouterProvider);\n    configInterceptors($httpProvider);\n  }\n  /* set body id for css style */\n  runBlock.$inject = ['stateChangeSuccess', 'stateChangeError'];\n  function runBlock(stateChangeSuccess, stateChangeError) {\n    stateChangeSuccess.initialize();\n    stateChangeError.initialize();\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configInterceptors', configInterceptors);\n\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push(\"AuthInterceptor\");\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configRouter', configRouter);\n\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider) {\n      $stateProvider\n        .state(\"home\", {\n          url: \"/\",\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-auth/navbar-auth.tpl.html\"\n            },\n            \"content\": {\n              templateUrl: \"home/home.tpl.html\"\n            }\n          }\n        })\n        .state(\"auth\", {\n          url: \"\",\n          abstract: true,\n          resolve: {\n            isUserLogged: isUserLogged\n          }\n        })\n        .state(\"auth.login\", {\n          url: \"/login\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-login/auth-login.tpl.html\",\n              controller:   \"loginPageCtrl\",\n              controllerAs: \"loginVm\"\n            }\n          }\n        })\n        .state(\"auth.signup\", {\n          url: \"/signup\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-signup/auth-signup.tpl.html\",\n              controller:   \"signupPageCtrl\",\n              controllerAs: \"signupVm\"\n            }\n          }\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-user/navbar-user.tpl.html\",\n              controller:   \"userNavCtrl\",\n              controllerAs: \"navVm\"\n            }\n          }\n        })\n        .state(\"main.lists\", {\n          url: \"/:username\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-lists/main-lists.tpl.html\",\n              controller:   \"listsPageCtrl\",\n              controllerAs: \"listsVm\"\n            }\n          }\n        })\n        .state(\"main.interests\", {\n          url: \"/interests/\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-interests/main-interests.tpl.html\",\n              controller:   \"interestsPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile\", {\n          url: \"/profile\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main-profile/main-profile.tpl.html\"\n            }\n          }\n        })\n        .state(\"main.profile.account\", {\n          url: \"/account\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-account/profile-account.tpl.html\",\n              controller:   \"accountPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile.password\", {\n          url: \"/password\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-password/profile-password.tpl.html\",\n              controller:   \"passwordPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"404\", {\n          url: \"/404\",\n          views: {\n            \"content\": {\n              templateUrl: \"404/404.tpl.html\"\n            }\n          }\n        });\n\n      $urlRouterProvider.otherwise(\"/404\");\n      $locationProvider.html5Mode(true);\n    }\n\n    isUserLogged.$inject = ['userLogged'];\n    function isUserLogged(userLogged) {\n      return userLogged.logged();\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .factory('AuthInterceptor', authInterceptor);\n\n    authInterceptor.$inject = [\"$rootScope\", \"$q\", \"$window\", \"$injector\"];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = \"Bearer \" + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go(\"home\"); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go(\"404\");\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"AuthService\", AuthService);\n\n    AuthService.$inject = [\"$resource\"];\n    function AuthService($resource) {\n      return $resource(\"/auth/:type\", {\n        type: \"@type\"\n      },\n      {\n        save: {\n          method: \"POST\",\n          params: {\n            type: \"signup\"\n          }\n        },\n        login: {\n          method: \"POST\",\n          params: {\n            type: \"login\"\n          }\n        }\n      });\n    }\n})();\n","/**\n * This service controll lists request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListsService\", ListsService);\n\n    ListsService.$inject = [\"$resource\"];\n    function ListsService($resource) {\n      var data = $resource(\"/api/lists/:id:user\", { id: \"@id\", user: \"@user\"}, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll search request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('SearchService', SearchService);\n\n    SearchService.$inject = ['$resource'];\n    function SearchService($resource) {\n      var data = $resource('/api/search/:type', {},\n      {\n        lists: {\n          method: 'GET',\n          params: {\n            type: 'lists'\n          }\n        },\n        users: {\n          method: 'POST',\n          params: {\n            type: 'users'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeError', stateChangeError);\n\n    stateChangeError.$inject = ['$rootScope', '$state', '$window'];\n    function stateChangeError($rootScope, $state, $window) {\n      return {\n        initialize: function() {\n          $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n            if (error === 'isAlreadyLogged') {\n              $state.go('main.lists', { username: $window.localStorage.user });\n            }\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeSuccess', stateChangeSuccess);\n\n    stateChangeSuccess.$inject = ['$rootScope'];\n    function stateChangeSuccess($rootScope) {\n        return {\n          initialize: function() {\n            $rootScope.$on('$stateChangeSuccess', function(event, toState){\n              var stateNames = toState.name.split('.');\n              document.body.id = stateNames[stateNames.length - 1] + '-page';\n            });\n          }\n        }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"tags\", tags);\n\n    function tags() {\n\n      this.getTagsAndText = function(text) {\n        var hashTags = [];\n        var twitterTags = twttr.txt.extractHashtags(text);\n        console.log(twitterTags)\n\n        twitterTags.forEach(function(item) {\n\n          // twitter extracted tags without hash, therefore add this symbol for them\n          if (hashTags.indexOf(item) === -1) { // additional check on the tags already added\n            hashTags.push(item);\n          }\n\n          if (text.indexOf('<span>#' + item + '</span>') === -1) {\n            console.log(text)\n            text = text.replace(new RegExp('#' + item, 'g'), '<span>#' + item + '</span>');\n            console.log(text)\n          }\n\n          // text = text.replace('#' + item, '<span>#' + item + '</span>').replace(/\\s\\s+/g, ' ');\n        });\n\n        return {\n          text: text,\n          hashTags: hashTags\n        }\n      }\n    }\n})();\n","/**\n * This service controll task request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"TaskService\", TaskService);\n\n    TaskService.$inject = [\"$resource\"];\n    function TaskService($resource) {\n      var data = $resource(\"/api/lists/:list/task/:task\", { list: \"@list\", task: \"@task\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userLogged\", userLogged);\n\n    userLogged.$inject = [\"$window\", \"$state\", \"$q\"];\n    function userLogged($window, $state, $q) {\n\n      this.logged = function() {\n        var deferred = $q.defer();\n        if($window.localStorage.token) {\n          deferred.reject(\"isAlreadyLogged\");\n        } else {\n          deferred.resolve();\n        }\n\n        return deferred.promise;\n      }\n    }\n})();\n","/**\n * This service controll user request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"UserService\", UserService);\n\n    UserService.$inject = [\"$resource\"];\n    function UserService($resource) {\n      var data = $resource(\"/api/user/:type\", { type: \"@type\" }, {\n        update:  {\n          method: \"PUT\"\n        },\n        avatar: {\n          method: \"PUT\",\n          params: {\n            type: \"avatar\"\n          }\n        },\n        getInterests: {\n          method: \"GET\",\n          params: {\n            type: \"interests\"\n          }\n        },\n        setInterests: {\n          method: \"PUT\",\n          params: {\n            type: \"interests\"\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This component controll list data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"list\", {\n      bindings: {\n        data: \"=\",\n        reload: \"&\"\n      },\n      controller: listController,\n      templateUrl: 'scripts/common/components/list/list.tpl.html'\n    });\n\n    listController.$inject = ['$scope', '$rootScope', '$timeout', 'ListsService', 'TaskService', 'tags'];\n    function listController($scope, $rootScope, $timeout, ListsService, TaskService, tags) {\n      //variable\n      var allowSavingTask = true;\n      var textBeforeEdit = '';\n      var textTemp = '';\n      var self = this;\n      this.listID = this.data._id;\n\n      // function\n      this.addNewTask = addNewTask;\n      this.clearInput = clearInput;\n      this.closePopupAndOverlay = closePopupAndOverlay;\n      this.invitePeople = invitePeople;\n      this.openBackgroundPopup = openBackgroundPopup;\n      this.saveEditedTitle = saveEditedTitle;\n      this.saveTextToTemp = saveTextToTemp;\n      this.removeList = removeList;\n      this.reloadTasks = reloadTasks;\n      $scope.$on('closePopup', closePopup);\n\n      function addNewTask(validation) {\n\n        if (validation && allowSavingTask) {\n          allowSavingTask = false;\n\n          TaskService.save({ list: this.listID }, { text: this.taskText }, function (response) {\n            self.data.tasks = response.tasks;\n            self.taskText = null;\n            allowSavingTask = true;\n          });\n        }\n      }\n\n      function clearInput() {\n        this.taskText = null;\n      }\n\n      function closePopup() {\n        self.showInviteList = false;\n        self.showBackground = false;\n      }\n\n      function closePopupAndOverlay() {\n        this.showBackground = false;\n        this.showInviteList = false;\n        $rootScope.$emit(\"hideFogOverlay\");\n      }\n\n      function invitePeople() {\n        this.showInviteList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function openBackgroundPopup() {\n        this.showBackground = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function removeList() {\n        ListsService.delete({ id: this.listID }, function () {\n          self.reload();\n        });\n      }\n\n      function saveTextToTemp() {\n        textBeforeEdit = this.data.title;\n        this.data.title = this.data.title.replace(/(<([^>]+)>)/ig, '');\n        textTemp = this.data.title;\n\n      }\n\n      function saveEditedTitle() {\n        // replacement needed, because when contenteditable element empty,\n        // browser automaticaly add br tag\n        // and I don't know this is bug or feature\n        // var editedText = this.data.title.replace(/<br>/, \"\");\n\n        if (textTemp && textTemp !== this.data.title) {\n          var result = tags.getTagsAndText(this.data.title);\n          this.data.title = result.text;\n          this.data.tags = result.hashTags;\n\n          // if we have are new tags\n          // if (hashtags.length > 0) {\n          //   // check before concatenate two array, don't dublicating the new tags already existing values\n          //   this.data.tags = this.data.tags.concat(hashtags.filter(function(item) {\n          //     return self.data.tags.indexOf(item) < 0;\n          //   }));\n          // }\n\n          ListsService.update({ id: this.listID }, { list: this.data });\n        } else {\n          this.data.title = textBeforeEdit;\n        }\n      }\n\n      function reloadTasks(listID) {\n        TaskService.query({ list: listID }, function (response) {\n          self.data.tasks = response.tasks;\n        });\n      }\n    }\n})();\n","/**\n * This directive controll task data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"task\", {\n      bindings: {\n        data: \"=\"\n      },\n      require: {\n        listCtrl: '^list'\n      },\n      controller: taskController,\n      templateUrl: 'scripts/common/components/task/task.tpl.html'\n    });\n\n    taskController.$inject = ['TaskService'];\n    function taskController(TaskService) {\n      var listID;\n      var reloadTasks;\n      var textBeforeEdit;\n      var taskID = this.data._id;\n      var self = this;\n      this.dropdownIsOpen = false;\n\n      //func\n      this.changeColor = changeColor;\n      this.closeEditMode = closeEditMode;\n      this.closeDropdown = closeDropdown;\n      this.editTaskText = editTaskText;\n      this.openDropdown = openDropdown;\n      this.setTaskCompleted = setTaskCompleted;\n      this.saveEditedText = saveEditedText;\n      this.removeTask = removeTask;\n\n      this.$onInit = function() {\n        listID = this.listCtrl.listID;\n        reloadTasks = this.listCtrl.reloadTasks;\n      }\n\n\n      function changeColor(event) {\n        var className = event.target.className;\n        var target = angular.element(event.target);\n\n        if (!target.hasClass(\"task__color--active\")) {\n          className = className.replace(\"task__color \", \"\"); // remove unnecessary part of class name\n\n          TaskService.update({ list: listID, task: taskID }, { color: className }, function (response) {\n            self.data.color = className;\n          });\n        }\n      }\n\n      function closeEditMode() {\n        this.data.text = textBeforeEdit;\n        this.editMode = false;\n      }\n\n      function closeDropdown() {\n        this.dropdownIsOpen = false;\n      }\n\n      function editTaskText() {\n        textBeforeEdit = this.data.text;\n        this.editMode = true;\n        this.focusOn = true;\n        this.closeDropdown();\n      }\n\n      function openDropdown(event) {\n        if (event.currentTarget === event.target) {\n          this.dropdownIsOpen = (this.dropdownIsOpen) ? false : true;\n        }\n      }\n\n      function setTaskCompleted(event) {\n        if (this.editMode !== true) {\n          TaskService.update({ list: listID, task: taskID }, { completed: true }, function (response) {\n            self.data.completed = response.task.completed;\n          });\n        }\n      }\n\n      function saveEditedText() {\n        if (this.data.text) {\n          TaskService.update({ list: listID, task: taskID }, { text: this.data.text }, function (response) {\n            self.editMode = false;\n          });\n        } else {\n          this.closeEditMode();\n        }\n      }\n\n      function removeTask() {\n        TaskService.delete({ list: listID, task: taskID }, function (response) {\n          reloadTasks(listID);\n        });\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickEnter\", clickEnterDirective);\n\n    function clickEnterDirective() {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        element.bind(\"keypress\", function (event) {\n          if(event.which === 13) { // 13 is enter code on keyboard :)\n            scope.$apply(function (){\n              scope.$eval(attrs.clickEnter);\n            });\n          }\n        });\n      }\n    }\n})();\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","/**\n * This directive add custom ng-model directive to non-form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"contenteditable\", contenteditableDirective)\n\n    function contenteditableDirective() {\n      var directive = {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, ngModel) {\n        function read() {\n          ngModel.$setViewValue(element.html());\n        }\n\n        ngModel.$render = function() {\n          element.html(ngModel.$viewValue || \"\");\n        };\n\n        element.bind(\"blur keyup change\", function() {\n          scope.$apply(read);\n        });\n      }\n    }\n\n}());\n","/**\n * This directive setup focus to non form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"customFocus\", customFocusDirective)\n\n    customFocusDirective.$inject = [\"$timeout\"];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: \"A\",\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n          // element[0].focus();\n\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","/**\n * This directive controll fog(black-transparent background)\n * for all popup window\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fog\", fogDirective);\n\n    fogDirective.$inject = [\"$rootScope\"];\n    function fogDirective($rootScope) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        scope: {},\n        template: \"<div id='fog' ng-show='showFogState' ng-click='hideFogOverlay()'></div>\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var listenerShowOverlay = $rootScope.$on(\"showFogOverlay\", showFogOverlay);\n        var listenerHideOverlay = $rootScope.$on(\"hideFogOverlay\", hideFogOverlay);\n        scope.hideFogOverlay = hideFogOverlay;\n\n        /**\n         * remove rootscope listener\n         */\n        scope.$on('$destroy', listenerShowOverlay);\n        scope.$on('$destroy', listenerHideOverlay);\n\n        /**\n         * This function close any popup window\n         * And hide fog (or overlay)\n         */\n        function hideFogOverlay() {\n          scope.showFogState = false;\n          scope.$parent.$broadcast(\"closePopup\");\n        }\n\n        function showFogOverlay() {\n          scope.showFogState = true;\n        }\n      }\n    }\n})();\n","/**\n * This directive controll popup and change background for lists\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listBackground\", listBackgroundDirective);\n\n    listBackgroundDirective.$inject = ['ListsService']\n    function listBackgroundDirective(ListsService) {\n      var directive = {\n        restrict: \"A\",\n        require: '^list',\n        replace: true,\n        scope: {},\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, listCtrl) {\n        if (attrs.class === listCtrl.data.image) {\n          element.addClass('active-background');\n        }\n\n        element.bind('click', clickHandler);\n\n        function clickHandler() {\n          if (!element.hasClass('active-background')) {\n            listCtrl.data.image = attrs.class;\n            element.parent().children().removeClass('active-background'); // baaaaaaaadd code\n\n            ListsService.update({ id: listCtrl.listID }, { list: listCtrl.data }, function (response) {\n              element.addClass('active-background');\n            });\n          }\n        }\n      }\n    }\n})();\n","/**\n * This directive controll invite new people to list\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listInvite\", listInviteDirective);\n\n    listInviteDirective.$inject = ['SearchService', 'ListsService'];\n    function listInviteDirective(SearchService, ListsService) {\n      var directive = {\n        restrict: \"E\",\n        require: '^list',\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-invite/list-invite.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs, listCtrl) {\n        var alreadyAddedUsers = [];\n        scope.owner = listCtrl.data.owner;\n        scope.stash = [];\n        scope.searchPeople = searchPeople;\n        scope.saveToStash = saveToStash;\n        scope.removeFromStash = removeFromStash;\n        scope.saveToMembers = saveToMembers;\n\n        scope.$watch(function() {\n          return listCtrl.showInviteList;\n        }, function(newVal) {\n          if (newVal === true) {\n            loadData();\n          } else {\n            scope.stash = [];\n          }\n        });\n\n        function loadData() {\n          listCtrl.data.members.forEach(function(i) {\n            i.interests = i.interests.slice(0, 3);\n            scope.stash.push(i);\n            alreadyAddedUsers.push(i.name);\n          });\n          console.log(listCtrl.data.members)\n\n          alreadyAddedUsers.push(listCtrl.data.owner.name);\n        }\n\n        function searchPeople() {\n          if (scope.members) {\n            SearchService.users({}, { name: scope.members, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToStash(user) {\n          scope.stash.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.users = null;\n        }\n\n        function removeFromStash(member) {\n          var indexAddedUsers;\n\n          scope.stash.forEach(function(i, index) {\n            if (scope.stash[index].name === member.name) {\n              scope.stash.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function saveToMembers() {\n          var list = listCtrl.data;\n          list.members = scope.stash;\n\n          ListsService.update({ id: listCtrl.listID }, { list: list }, function (response) {\n            listCtrl.showInviteList = true;\n            listCtrl.closePopupAndOverlay();\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"loginPageCtrl\", LoginPageCtrl);\n\n  LoginPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n  function LoginPageCtrl($window, $state, AuthService) {\n    var loginVm = this;\n    loginVm.submitted;\n    loginVm.submitData = submitData;\n    loginVm.clearMessageError = clearMessageError;\n\n    function submitData(validation) {\n      loginVm.submitted = true;\n\n      if (validation) {\n        var userData = {\n          username: loginVm.username,\n          password: loginVm.password\n        };\n\n        AuthService.login({}, userData, function (response) {\n          $window.localStorage.token = response.token;\n          $window.localStorage.user = loginVm.username;\n          $state.go(\"main.lists\", { username: loginVm.username });\n        }, function (error) {\n          delete $window.localStorage.token;\n          loginVm.message = error.data.message;\n        });\n      }\n    }\n\n    function clearMessageError() {\n      loginVm.message = null;\n    }\n  }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"signupPageCtrl\", SignupPageCtrl);\n\n    SignupPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n    function SignupPageCtrl($window, $state, AuthService) {\n      var signupVm = this;\n\n      signupVm.submitted;\n      signupVm.message;\n      signupVm.submitData = submitData;\n      signupVm.clearMessageError = clearMessageError;\n\n      function submitData(validation) {\n        signupVm.submitted = true;\n\n        if (validation) {\n          var userData = {\n            username: signupVm.userName,\n            email:    signupVm.userEmail,\n            password: signupVm.userPassword\n          }\n\n          AuthService.save({}, userData, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = signupVm.userName;\n            $state.go(\"main.interests\");\n          }, function (error) {\n            delete $window.localStorage.token;\n            signupVm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        signupVm.message = null;\n      }\n    }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"interestsPageCtrl\", InterestsPageCtrl);\n\n    InterestsPageCtrl.$inject = [\"$timeout\", \"$window\", \"$state\", \"UserService\"];\n    function InterestsPageCtrl($timeout, $window, $state, UserService) {\n      var vm = this;\n      var i = 0;\n      var colorsArray = [\"red\", \"orange\", \"yellow\", \"green\", \"indigo\", \"violet\"];\n      var promiseTimeout;\n      vm.interests = [];\n      vm.selectedInterest = [];\n      vm.chooseInterest = chooseInterest;\n      vm.removeInterest = removeInterest;\n      vm.saveInterests = saveInterests;\n      vm.username = $window.localStorage.user; // send to ui-router\n      // delay is necessary to run the animation\n      UserService.getInterests(function (response) {\n        $timeout(function() {\n          vm.interests = response.interests;\n        }, 100);\n      });\n\n      /**\n       * This function set to target element some class,\n       * add to array of chosen interests - new interest\n       * and remove from array of colors - first color\n       * which is used in the array of chosen interests,\n       */\n      function chooseInterest(event, index) {\n        var target = angular.element(event.target);\n        if (i < 6) {\n          target.addClass(\"chosen-interest\");\n          vm.selectedInterest.push({ text: target.text(), color: colorsArray[0], id: index });\n          colorsArray.shift();\n          i++;\n        }\n      }\n\n      /**\n       * This function get data-id from target element\n       * Removes the necessary item from the array by index\n       * Find the element of interests by data and remove some class\n       * and push to the array of colors - color from target element\n       */\n      function removeInterest(event, index) {\n        var targetId = event.target.dataset.selectedId;\n        vm.selectedInterest.splice(index, 1);\n        angular.element(document.querySelectorAll(\"[data-id='\" + targetId + \"']\")).removeClass(\"chosen-interest\");\n        colorsArray.push(event.target.dataset.color)\n        i--;\n      }\n      // i know this code placing between fuck and shit\n\n      function saveInterests() {\n        var arrayToSend = [];\n\n        if (vm.selectedInterest.length > 0) {\n          vm.selectedInterest.forEach(function(item) {\n            arrayToSend.push(item.text);\n          });\n          UserService.setInterests({}, { interests: arrayToSend }, function (response) {\n            $state.go(\"main.lists\");\n          });\n        } else {\n\n          vm.emptyInterests = (vm.emptyInterests)\n            ? false\n            : true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"listsPageCtrl\", ListsPageCtrl);\n\n    ListsPageCtrl.$inject = [\"$scope\", \"$rootScope\", \"$stateParams\", \"$window\", \"ListsService\", \"tags\"];\n    function ListsPageCtrl($scope, $rootScope, $stateParams, $window, ListsService, tags) {\n      var listsVm = this;\n      var username = $stateParams.username;\n      listsVm.newListPopup; // check open popup\n      listsVm.newListSubmitted; // check press submit button\n      listsVm.createNewList = createNewList;\n      listsVm.saveNewList = saveNewList;\n      listsVm.reloadList = reloadList;\n\n      // fog broadcast\n      $scope.$on('closePopup', closePopup);\n      // list broadcast\n      // $scope.$on('reloadLists', activate);\n\n      activate();\n\n      function activate() {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function createNewList() {\n        listsVm.newListPopup = true;\n        listsVm.focus = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function reloadList(callback) {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n\n          if (callback) {\n            callback();\n          }\n        });\n      }\n\n      function saveNewList(validation) {\n        listsVm.newListSubmitted = true;\n\n        if (validation) {\n          var result = tags.getTagsAndText(listsVm.newListTitle);\n\n          var title = result.text;\n          var hashTags = result.hashTags;\n\n          ListsService.save({ title: title, tags: hashTags }, function (response) {\n            reloadList(function() {\n              // end work with popup\n              $rootScope.$emit(\"hideFogOverlay\");\n              listsVm.newListTitle = null;\n              listsVm.newListForm.$setPristine();\n              listsVm.newListSubmitted = false;\n            });\n          });\n        }\n      }\n\n      function closePopup() {\n        listsVm.newListPopup = false;\n      }\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"accountPageCtrl\", AccountPageCtrl);\n\n    AccountPageCtrl.$inject = [\"$rootScope\", \"UserService\"];\n    function AccountPageCtrl($rootScope, UserService) {\n      var vm = this;\n      vm.saveChanges = saveChanges;\n      vm.changeAvatar = changeAvatar;\n      vm.clearMessageError = clearMessageError;\n\n      activate();\n\n      function activate() {\n        UserService.get(function (response) {\n          vm.avatarImage = response.user.avatar;\n          vm.name = response.user.name;\n          vm.email = response.user.email;\n          vm.bio = response.user.bio;\n        });\n      }\n\n      function saveChanges(validation) {\n        var body = {};\n\n        if (validation) {\n          body.name = vm.name;\n          body.email = vm.email;\n          body.bio = vm.bio;\n\n          vm.message = null;\n          vm.messageDone = null;\n          UserService.update({}, body, function (response) {\n            vm.messageDone = response.message;\n            $rootScope.$emit(\"reloadNavbar\");\n          }, function (error) {\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare(\"image/jpeg\") !== 0 && image.type.localeCompare(\"image/png\") !== 0) {\n          console.log(\"error\")\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.avatarImage = response.avatar;\n            $rootScope.$emit(\"reloadNavbar\");\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"passwordPageCtrl\", PasswordPageCtrl);\n\n    PasswordPageCtrl.$inject = [\"UserService\"];\n    function PasswordPageCtrl(UserService) {\n      var vm = this;\n\n      vm.savePassword = savePassword;\n\n      function savePassword(validation) {\n        vm.submitted = true;\n        vm.errorConfirmPass = null;\n        vm.message = null;\n        vm.messageDone = null;\n        var body = {};\n        if(validation) {\n          if (vm.newPass === vm.newPassConfirm) {\n            body = {\n              oldPass: vm.oldPass,\n              newPass: vm.newPassConfirm\n            }\n\n            UserService.save({}, body, function (response) {\n              vm.messageDone = response.message;\n            }, function (error) {\n              vm.message = error.data.message;\n            });\n          } else {\n            vm.errorConfirmPass = true;\n          }\n        }\n      }\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"userNavCtrl\", UserNavCtrl);\n\n    UserNavCtrl.$inject = [\"$rootScope\", \"$scope\", \"$state\", \"$window\", \"UserService\"];\n    function UserNavCtrl($rootScope, $scope, $state, $window, UserService) {\n      var navVm = this;\n      navVm.logout = logout;\n      navVm.openDropdown = openDropdown;\n      navVm.changeAvatar = changeAvatar;\n      navVm.closeDropdown = closeDropdown;\n      navVm.username = $window.localStorage.user;\n      var listener = $rootScope.$on(\"reloadNavbar\", load);\n\n      load();\n\n      function load() {\n        UserService.get({}, function (response) {\n          navVm.name = response.user.name;\n          navVm.avatarImage = response.user.avatar;\n        });\n      }\n\n      function openDropdown(event) {\n        navVm.dropdownIsOpen = (navVm.dropdownIsOpen) ? false : true;\n      }\n\n      function closeDropdown() {\n        navVm.dropdownIsOpen = false;\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare(\"image/jpeg\") !== 0 && image.type.localeCompare(\"image/png\") !== 0) {\n          console.log(\"error\")\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            navVm.avatarImage = response.avatar;\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        $state.go(\"home\");\n      }\n\n      $scope.$on('$destroy', listener);\n    };\n\n})();\n"],"sourceRoot":"/source/"}