{"version":3,"sources":["core/app-bootstrap.js","core/app.mdl.js","common/config/interceptors.cfg.js","common/config/router.cfg.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/interests.service.js","common/services/list-recommendation.factory.js","common/services/lists-filter.srv.js","common/services/lists.fctr.js","common/services/search.fctr.js","common/services/state-change-error.srv.js","common/services/state-change-success.srv.js","common/services/tags.srv.js","common/services/task.fctr.js","common/services/user-data.srv.js","common/services/user-logged.srv.js","common/services/user.fctr.js","common/components/task/task.cmp.js","common/components/list/list.cmp.js","common/directives/click-outside/click-outside.drv.js","common/directives/contenteditable/contenteditable.drv.js","common/directives/click-enter/click-enter.drv.js","common/directives/file-reader/file-reader.drv.js","common/directives/custom-focus/custom-focus.drv.js","common/directives/fog/fog.drv.js","common/directives/list-background/list-background.drv.js","common/directives/list-invite/list-invite.drv.js","common/directives/on-finish-render/on-finish-render.js","common/directives/new-list/new-list.drv.js","core/auth/auth-login/auth-login.ctrl.js","core/auth/auth-signup/auth-signup.ctrl.js","core/main/main-interests/main-interests.ctrl.js","core/main/main-lists/main-lists.ctrl.js","core/main-profile/profile-account/profile-account.ctrl.js","core/main-profile/profile-password/profile-password.ctrl.js","core/navbar/navbar-user/navbar-user.ctrl.js"],"names":["angular","element","document","ready","bootstrap","configure","$locationProvider","$stateProvider","$urlRouterProvider","$httpProvider","configRouter","configInterceptors","runBlock","stateChangeSuccess","stateChangeError","initialize","module","config","run","$inject","interceptors","push","constant","state","url","views","navbar","templateUrl","content","abstract","resolve","isUserLogged","content@","controller","controllerAs","loadUserData","profile","otherwise","html5Mode","userLogged","logged","$window","UserService","userData","currentUser","localStorage","user","get","name","response","setData","authInterceptor","$rootScope","$q","$injector","request","headers","token","Authorization","responseError","status","go","reject","factory","AuthService","$resource","type","save","method","params","login","InterestsService","ListRecommendationService","data","listsFilter","this","setIsOwnFilter","isOwnFilter","getIsOwnFilter","service","ListsService","id","query","isArray","update","SearchService","lists","users","$state","$on","event","toState","toParams","fromState","fromParams","error","username","stateNames","split","body","length","tags","getTagsAndText","text","hashTags","twitterTags","twttr","txt","extractHashtags","forEach","item","indexOf","replace","TaskService","list","task","$stateParams","getData","isOwnerPage","isOwnerList","listOwner","getCurrentUser","deferred","defer","promise","avatar","taskController","changeColor","className","target","hasClass","listID","taskID","color","self","closeEditMode","textBeforeEdit","editMode","closeDropdown","dropdownIsOpen","editTaskText","focusOn","openDropdown","currentTarget","setTaskCompleted","isOwner","completed","saveEditedText","removeTask","reloadTasks","_id","$onInit","listCtrl","component","bindings","require","listController","$scope","addCurrentUserToMembers","isUserAlreadyInMembers","members","addLike","newListInterest","isUserTakeLike","likes","some","filter","alreadyLiked","_","difference","lists_interests","union","addNewTask","validation","allowSavingTask","taskText","tasks","clearInput","closePopup","showInviteList","showBackground","closePopupAndOverlay","$emit","invitePeople","openBackgroundPopup","removeList","reload","newMembersArray","saveTextToTemp","title","textTemp","saveEditedTitle","result","siteUrl","location","href","twitterText","owner","$watch","clickOutsideDirective","$document","$parse","linkFunc","scope","attrs","fn","eventHandler","childElement","contains","$apply","on","off","directive","restrict","link","contenteditableDirective","ngModel","read","$setViewValue","html","$render","$viewValue","bind","clickEnterDirective","which","$eval","clickEnter","fileReaderDirective","image","files","customFocusDirective","$timeout","value","focus","trigger","fogDirective","hideFogOverlay","showFogState","$parent","$broadcast","showFogOverlay","listenerShowOverlay","listenerHideOverlay","template","listBackgroundDirective","clickHandler","parent","children","removeClass","addClass","listInviteDirective","elem","loadData","i","interests","slice","stash","alreadyAddedUsers","searchPeople","usedNames","responce","showSearchResult","saveToStash","removeFromStash","member","indexAddedUsers","index","splice","saveToMembers","cleanInputs","newVal","onFinishRender","$last","newListDirective","loadCurrentUser","currentUserData","saveNewList","newListSubmitted","newListTitle","searchUser","removeFromMembers","nameMember","newListForm","$setPristine","show","LoginPageCtrl","submitData","loginVm","submitted","password","message","clearMessageError","SignupPageCtrl","signupVm","userName","email","userEmail","userPassword","InterestsPageCtrl","chooseInterest","vm","selectedInterest","colorsArray","shift","removeInterest","targetId","dataset","selectedId","querySelectorAll","saveInterests","interestsArray","emptyInterests","ListsPageCtrl","activate","listsVm","getRecommendationLists","createNewList","showNewList","reloadList","selectSort","AccountPageCtrl","saveChanges","messageDone","changeAvatar","reader","localeCompare","console","warn","FileReader","onload","avatarImage","readAsDataURL","PasswordPageCtrl","savePassword","errorConfirmPass","newPass","newPassConfirm","oldPass","UserNavCtrl","load","navVm","alert","logout","listener"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, [\"llamaLists\"]);\n  });\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists', ['ui.router', 'ngMessages', 'ngResource', 'ngAnimate'])\n    .config(configure)\n    .run(runBlock);\n\n\n  configure.$inject = [\"$locationProvider\", \"$stateProvider\", \"$urlRouterProvider\", '$httpProvider', 'configRouter', 'configInterceptors'];\n  function configure($locationProvider, $stateProvider, $urlRouterProvider, $httpProvider, configRouter, configInterceptors) {\n    configRouter($locationProvider, $stateProvider, $urlRouterProvider);\n    configInterceptors($httpProvider);\n  }\n  /* set body id for css style */\n  runBlock.$inject = ['stateChangeSuccess', 'stateChangeError'];\n  function runBlock(stateChangeSuccess, stateChangeError) {\n    stateChangeSuccess.initialize();\n    stateChangeError.initialize();\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configInterceptors', configInterceptors);\n\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push(\"AuthInterceptor\");\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configRouter', configRouter);\n\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider) {\n      $stateProvider\n        .state(\"home\", {\n          url: \"/\",\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-auth/navbar-auth.tpl.html\"\n            },\n            \"content\": {\n              templateUrl: \"home/home.tpl.html\"\n            }\n          }\n        })\n        .state(\"auth\", {\n          url: \"\",\n          abstract: true,\n          resolve: {\n            isUserLogged: isUserLogged\n          }\n        })\n        .state(\"auth.login\", {\n          url: \"/login\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-login/auth-login.tpl.html\",\n              controller:   \"loginPageCtrl\",\n              controllerAs: \"loginVm\"\n            }\n          }\n        })\n        .state(\"auth.signup\", {\n          url: \"/signup\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-signup/auth-signup.tpl.html\",\n              controller:   \"signupPageCtrl\",\n              controllerAs: \"signupVm\"\n            }\n          }\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-user/navbar-user.tpl.html\",\n              controller:   \"userNavCtrl\",\n              controllerAs: \"navVm\"\n            }\n          },\n          resolve: {\n            loadUserData: loadUserData\n          }\n        })\n        .state(\"main.lists\", {\n          url: \"/:username\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-lists/main-lists.tpl.html\",\n              controller:   \"listsPageCtrl\",\n              controllerAs: \"listsVm\"\n            }\n          }\n        })\n        .state(\"main.interests\", {\n          url: \"/interests/\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-interests/main-interests.tpl.html\",\n              controller:   \"interestsPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile\", {\n          url: \"/profile\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main-profile/main-profile.tpl.html\"\n            }\n          }\n        })\n        .state(\"main.profile.account\", {\n          url: \"/account\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-account/profile-account.tpl.html\",\n              controller:   \"accountPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile.password\", {\n          url: \"/password\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-password/profile-password.tpl.html\",\n              controller:   \"passwordPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"404\", {\n          url: \"/404/\",\n          views: {\n            \"content\": {\n              templateUrl: \"404/404.tpl.html\"\n            }\n          }\n        });\n\n      $urlRouterProvider.otherwise(\"/404\");\n      $locationProvider.html5Mode(true);\n    }\n\n    isUserLogged.$inject = ['userLogged'];\n    function isUserLogged(userLogged) {\n      return userLogged.logged();\n    }\n\n    loadUserData.$inject = ['$window', 'UserService', 'userData'];\n    function loadUserData($window, UserService, userData) {\n      var currentUser = $window.localStorage.user;\n\n      UserService.get({ name: currentUser }, function(response) {\n        userData.setData(response.user);\n      })\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .factory('AuthInterceptor', authInterceptor);\n\n    authInterceptor.$inject = [\"$rootScope\", \"$q\", \"$window\", \"$injector\"];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = \"Bearer \" + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n\n            // remove just in case\n            delete $window.localStorage.token;\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go(\"auth.signup\"); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go(\"404\");\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"AuthService\", AuthService);\n\n    AuthService.$inject = [\"$resource\"];\n    function AuthService($resource) {\n      return $resource(\"/auth/:type\", {\n        type: \"@type\"\n      },\n      {\n        save: {\n          method: \"POST\",\n          params: {\n            type: \"signup\"\n          }\n        },\n        login: {\n          method: \"POST\",\n          params: {\n            type: \"login\"\n          }\n        }\n      });\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('InterestsService', InterestsService);\n\n    InterestsService.$inject = ['$resource'];\n    function InterestsService($resource) {\n      return $resource('/api/data/interests');\n    }\n})();\n","/**\n * This service\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListRecommendationService\", ListRecommendationService);\n\n    ListRecommendationService.$inject = ['$resource'];\n    function ListRecommendationService($resource) {\n\n      var data = $resource(\"/api/data/recommendation\");\n\n      return data;\n    }\n})();\n","/**\n * This service need for hiding some element if filtering lists\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"listsFilter\", listsFilter);\n\n    function listsFilter() {\n\n      this.setIsOwnFilter = function(type) {\n        this.isOwnFilter = type;\n      }\n\n      this.getIsOwnFilter = function() {\n        return this.isOwnFilter;\n      }\n    }\n})();\n","/**\n * This service controll lists request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListsService\", ListsService);\n\n    ListsService.$inject = [\"$resource\"];\n    function ListsService($resource) {\n      var data = $resource(\"/api/lists/:id:user\", { id: \"@id\", user: \"@user\"}, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll search request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('SearchService', SearchService);\n\n    SearchService.$inject = ['$resource'];\n    function SearchService($resource) {\n      var data = $resource('/api/search/:type', {},\n      {\n        lists: {\n          method: 'GET',\n          params: {\n            type: 'lists'\n          }\n        },\n        users: {\n          method: 'POST',\n          params: {\n            type: 'users'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeError', stateChangeError);\n\n    stateChangeError.$inject = ['$rootScope', '$state', '$window'];\n    function stateChangeError($rootScope, $state, $window) {\n      return {\n        initialize: function() {\n          $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n            if (error === 'isAlreadyLogged') {\n              $state.go('main.lists', { username: $window.localStorage.user });\n            }\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeSuccess', stateChangeSuccess);\n\n    stateChangeSuccess.$inject = ['$rootScope'];\n    function stateChangeSuccess($rootScope) {\n        return {\n          initialize: function() {\n            $rootScope.$on('$stateChangeSuccess', function(event, toState){\n              var stateNames = toState.name.split('.');\n              document.body.id = stateNames[stateNames.length - 1] + '-page';\n            });\n          }\n        }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"tags\", tags);\n\n    function tags() {\n\n      this.getTagsAndText = function(text) {\n        var hashTags = [];\n        var twitterTags = twttr.txt.extractHashtags(text);\n\n        twitterTags.forEach(function(item) {\n\n          // twitter extracted tags without hash, therefore add this symbol for them\n          if (hashTags.indexOf(item) === -1) { // additional check on the tags already added\n            hashTags.push(item);\n          }\n\n          if (text.indexOf('<span>#' + item + '</span>') === -1) {\n            text = text.replace('#' + item, '<span>#' + item + '</span>');\n          }\n\n          // text = text.replace(/(^|\\s)#ama(\\s|$)/, '<span>#' + item + '</span>'); // maybe work replace word\n          // text = text.replace('#' + item, '<span>#' + item + '</span>').replace(/\\s\\s+/g, ' '); // replace spaces\n        });\n\n        return {\n          text: text,\n          hashTags: hashTags\n        }\n      }\n    }\n})();\n","/**\n * This service controll task request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"TaskService\", TaskService);\n\n    TaskService.$inject = [\"$resource\"];\n    function TaskService($resource) {\n      var data = $resource(\"/api/lists/:list/task/:task\", { list: \"@list\", task: \"@task\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll all user data (like a avatar, name, interests)\n * And also check the logged user placing on your own page\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userData\", userData);\n\n    userData.$inject = ['$window', '$stateParams'];\n    function userData($window, $stateParams) {\n\n      this.getData = function() {\n          return this.userData;\n      }\n\n      this.setData = function(user) {\n        this.userData = user;\n      }\n\n      this.isOwnerPage = function() {\n        if ($window.localStorage.user !== $stateParams.username) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      this.isOwnerList = function(listOwner) {\n        if ($window.localStorage.user !== listOwner) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      this.getCurrentUser = function() {\n        return $window.localStorage.user;\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userLogged\", userLogged);\n\n    userLogged.$inject = [\"$window\", \"$state\", \"$q\"];\n    function userLogged($window, $state, $q) {\n\n      this.logged = function() {\n        var deferred = $q.defer();\n        if ($window.localStorage.token) {\n          deferred.reject(\"isAlreadyLogged\");\n        } else {\n          deferred.resolve();\n        }\n\n        return deferred.promise;\n      }\n    }\n})();\n","/**\n * This service controll user request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('UserService', UserService);\n\n    UserService.$inject = ['$resource'];\n    function UserService($resource) {\n\n      var data = $resource('/api/user/:name:type', { name: '@name', type: '@type' }, {\n        update:  {\n          method: 'PUT'\n        },\n        avatar: {\n          method: 'PUT',\n          params: {\n            type: 'avatar'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This directive controll task data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"task\", {\n      bindings: {\n        data: \"=\"\n      },\n      require: {\n        listCtrl: '^list'\n      },\n      controller: taskController,\n      templateUrl: 'scripts/common/components/task/task.tpl.html'\n    });\n\n    taskController.$inject = ['TaskService'];\n    function taskController(TaskService) {\n      var listID;\n      var reloadTasks;\n      var textBeforeEdit;\n      var taskID = this.data._id;\n      var self = this;\n      this.dropdownIsOpen = false;\n\n      //func\n      this.changeColor = changeColor;\n      this.closeEditMode = closeEditMode;\n      this.closeDropdown = closeDropdown;\n      this.editTaskText = editTaskText;\n      this.openDropdown = openDropdown;\n      this.setTaskCompleted = setTaskCompleted;\n      this.saveEditedText = saveEditedText;\n      this.removeTask = removeTask;\n\n      this.$onInit = function() {\n        listID = this.listCtrl.listID;\n        reloadTasks = this.listCtrl.reloadTasks;\n        this.isOwner = this.listCtrl.isOwner;\n      }\n\n\n      function changeColor(event) {\n        var className = event.target.className;\n        var target = angular.element(event.target);\n\n        if (!target.hasClass(\"task__color--active\")) {\n          className = className.replace(\"task__color \", \"\"); // remove unnecessary part of class name\n\n          TaskService.update({ list: listID, task: taskID }, { color: className }, function (response) {\n            self.data.color = className;\n          });\n        }\n      }\n\n      function closeEditMode() {\n        this.data.text = textBeforeEdit;\n        this.editMode = false;\n      }\n\n      function closeDropdown() {\n        this.dropdownIsOpen = false;\n      }\n\n      function editTaskText() {\n        textBeforeEdit = this.data.text;\n        this.editMode = true;\n        this.focusOn = true;\n        this.closeDropdown();\n      }\n\n      function openDropdown(event) {\n        if (event.currentTarget === event.target) {\n          this.dropdownIsOpen = (this.dropdownIsOpen) ? false : true;\n        }\n      }\n\n      function setTaskCompleted(event) {\n        if (this.editMode !== true && this.isOwner) {\n          TaskService.update({ list: listID, task: taskID }, { completed: true }, function (response) {\n            self.data.completed = response.task.completed;\n          });\n        }\n      }\n\n      function saveEditedText() {\n        if (this.data.text) {\n          TaskService.update({ list: listID, task: taskID }, { text: this.data.text }, function (response) {\n            self.editMode = false;\n          });\n        } else {\n          this.closeEditMode();\n        }\n      }\n\n      function removeTask() {\n        TaskService.delete({ list: listID, task: taskID }, function (response) {\n          reloadTasks(listID);\n        });\n      }\n    }\n})();\n","/**\n * This component controll list data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"list\", {\n      bindings: {\n        data: \"=\",\n        reload: \"&\"\n      },\n      controller: listController,\n      templateUrl: 'scripts/common/components/list/list.tpl.html'\n    });\n\n    listController.$inject = ['$scope', '$rootScope', 'ListsService', 'TaskService', 'listsFilter', 'userData', 'UserService', 'tags'];\n    function listController($scope, $rootScope, ListsService, TaskService, listsFilter, userData, UserService, tags) {\n      //variable\n      var allowSavingTask = true;\n      var textBeforeEdit = '';\n      var textTemp = '';\n      var self = this;\n      this.listID = this.data._id;\n      this.siteUrl = document.location.href;\n      this.twitterText = 'I create a new to-do list at page ' + this.siteUrl;\n\n      // check that user on it's own page\n      this.isOwnerPage = userData.isOwnerPage();\n\n      // check that user is list owner\n      this.isOwner = userData.isOwnerList(this.data.owner.name);\n\n      // count likes\n      this.likes = this.data.likes.length;\n\n      // this watcher hide avatar on lists if user choose sorting by his own lists\n      $scope.$watch(function() {\n        return listsFilter.getIsOwnFilter();\n      }, function() {\n        self.isOwnFilter = listsFilter.getIsOwnFilter();\n      });\n\n      /**\n       * On init add class to all already liked lists\n       * And class to lists, that were already shared to current users\n       **/\n      this.$onInit = function() {\n        var currentUser = userData.getCurrentUser();\n\n        this.alreadyLiked = this.data.likes.some(function(item) {\n          return item === currentUser;\n        });\n\n        if (!this.isOwnerPage) {\n          this.isUserAlreadyInMembers = this.data.members.some(function(item) {\n            return item.name === currentUser;\n          });\n        }\n      }\n\n\n\n      // function\n      this.addCurrentUserToMembers = addCurrentUserToMembers;\n      this.addLike = addLike;\n      this.addNewTask = addNewTask;\n      this.clearInput = clearInput;\n      this.closePopupAndOverlay = closePopupAndOverlay;\n      this.invitePeople = invitePeople;\n      this.openBackgroundPopup = openBackgroundPopup;\n      this.saveEditedTitle = saveEditedTitle;\n      this.saveTextToTemp = saveTextToTemp;\n      this.removeList = removeList;\n      this.reloadTasks = reloadTasks;\n      $scope.$on('closePopup', closePopup);\n\n      function addCurrentUserToMembers() {\n        var currentUser = userData.getData();\n\n        if (!this.isUserAlreadyInMembers) {\n          this.data.members.push(currentUser);\n\n          ListsService.update({ id: this.listID }, { list: this.data }, function() {\n            self.isUserAlreadyInMembers = true;\n          });\n        }\n      }\n\n      /**\n       * This function add likes to lists\n       * Like - it's a name user, who pressed the button\n       * If is like already in list - remove its\n       **/\n      function addLike() {\n        if (!this.isOwner) {\n          var newListInterest;\n          var currentUser = userData.getData();\n\n          // check is user already take the like\n          var isUserTakeLike = this.data.likes.some(function(item) {\n            return item === currentUser.name;\n          });\n\n          if (isUserTakeLike) {\n            // if yes remove his like\n            this.data.likes = this.data.likes.filter(function(item) {\n              return item !== currentUser.name;\n            });\n\n            this.alreadyLiked = false;\n\n            // and remove list tags from user lists_interests array\n            newListInterest = _.difference(currentUser.lists_interests, this.data.tags);\n          } else {\n            this.data.likes.push(currentUser.name);\n            this.alreadyLiked = true;\n\n            newListInterest = _.union(currentUser.lists_interests, this.data.tags);\n          }\n\n          // save to user updated lists interests\n          currentUser.lists_interests = newListInterest;\n\n          this.likes = this.data.likes.length;\n\n          // send data to server\n          ListsService.update({ id: this.listID }, { list: this.data });\n          UserService.update({}, { user: currentUser });\n        }\n      }\n\n      function addNewTask(validation) {\n\n        if (validation && allowSavingTask) {\n          allowSavingTask = false;\n\n          TaskService.save({ list: this.listID }, { text: this.taskText }, function (response) {\n            self.data.tasks.push(response.task);\n            self.taskText = null;\n            allowSavingTask = true;\n          });\n        }\n      }\n\n      function clearInput() {\n        this.taskText = null;\n      }\n\n      function closePopup() {\n        self.showInviteList = false;\n        self.showBackground = false;\n      }\n\n      function closePopupAndOverlay() {\n        this.showBackground = false;\n        this.showInviteList = false;\n        $rootScope.$emit(\"hideFogOverlay\");\n      }\n\n      function invitePeople() {\n        this.showInviteList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function openBackgroundPopup() {\n        this.showBackground = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      /**\n       * Check is this owner list who want remove\n       * If yes - remove list from DB\n       * Else - remove this user from list members\n       **/\n      function removeList() {\n        if (this.isOwner) {\n          ListsService.delete({ id: this.listID }, function () {\n            self.reload();\n          });\n        } else {\n          var currentUser = userData.getCurrentUser();\n\n          var newMembersArray = this.data.members.filter(function(item) {\n            return item.name !== currentUser;\n          });\n\n          this.data.members = newMembersArray;\n\n          ListsService.update({ id: self.listID }, { list: this.data }, function (response) {\n            self.reload();\n          });\n        }\n      }\n\n      function saveTextToTemp() {\n        if (this.isOwner) {\n          textBeforeEdit = this.data.title;\n          this.data.title = this.data.title.replace(/(<([^>]+)>)/ig, '');\n          textTemp = this.data.title;\n        }\n\n      }\n\n      function saveEditedTitle() {\n        // replacement needed, because when contenteditable element empty,\n        // browser automaticaly add br tag\n        // and I don't know this is bug or feature\n        // var editedText = this.data.title.replace(/<br>/, \"\");\n\n        if (textTemp && textTemp !== this.data.title) {\n          var result = tags.getTagsAndText(this.data.title);\n          this.data.title = result.text;\n          this.data.tags = result.hashTags;\n\n          ListsService.update({ id: this.listID }, { list: this.data });\n        } else {\n          this.data.title = textBeforeEdit;\n        }\n      }\n\n      function reloadTasks(listID) {\n        TaskService.query({ list: listID }, function (response) {\n          self.data.tasks = response.tasks;\n        });\n      }\n    }\n})();\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","/**\n * This directive add custom ng-model directive to non-form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"contenteditable\", contenteditableDirective)\n\n    function contenteditableDirective() {\n      var directive = {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, ngModel) {\n        function read() {\n          ngModel.$setViewValue(element.html());\n        }\n\n        ngModel.$render = function() {\n          element.html(ngModel.$viewValue || \"\");\n        };\n\n        element.bind(\"blur keyup change\", function() {\n          scope.$apply(read);\n        });\n      }\n    }\n\n}());\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickEnter\", clickEnterDirective);\n\n    function clickEnterDirective() {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        element.bind(\"keypress\", function (event) {\n          if(event.which === 13) { // 13 is enter code on keyboard :)\n            scope.$apply(function (){\n              scope.$eval(attrs.clickEnter);\n            });\n          }\n        });\n      }\n    }\n})();\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","/**\n * This directive setup focus to non form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"customFocus\", customFocusDirective)\n\n    customFocusDirective.$inject = [\"$timeout\"];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: \"A\",\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n          // element[0].focus();\n\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive controll fog(black-transparent background)\n * for all popup window\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fog\", fogDirective);\n\n    fogDirective.$inject = [\"$rootScope\"];\n    function fogDirective($rootScope) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        scope: {},\n        template: \"<div id='fog' ng-show='showFogState' ng-click='hideFogOverlay()'></div>\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var listenerShowOverlay = $rootScope.$on(\"showFogOverlay\", showFogOverlay);\n        var listenerHideOverlay = $rootScope.$on(\"hideFogOverlay\", hideFogOverlay);\n        scope.hideFogOverlay = hideFogOverlay;\n\n        /**\n         * remove rootscope listener\n         */\n        scope.$on('$destroy', listenerShowOverlay);\n        scope.$on('$destroy', listenerHideOverlay);\n\n        /**\n         * This function close any popup window\n         * And hide fog (or overlay)\n         */\n        function hideFogOverlay() {\n          scope.showFogState = false;\n          scope.$parent.$broadcast(\"closePopup\");\n        }\n\n        function showFogOverlay() {\n          scope.showFogState = true;\n        }\n      }\n    }\n})();\n","/**\n * This directive controll popup and change background for lists\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listBackground\", listBackgroundDirective);\n\n    listBackgroundDirective.$inject = ['ListsService']\n    function listBackgroundDirective(ListsService) {\n      var directive = {\n        restrict: \"A\",\n        require: '^list',\n        replace: true,\n        scope: {},\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, listCtrl) {\n        if (attrs.class === listCtrl.data.image) {\n          element.addClass('active-background');\n        }\n\n        element.bind('click', clickHandler);\n\n        function clickHandler() {\n          if (!element.hasClass('active-background')) {\n            listCtrl.data.image = attrs.class;\n            element.parent().children().removeClass('active-background'); // baaaaaaaadd code\n\n            ListsService.update({ id: listCtrl.listID }, { list: listCtrl.data }, function (response) {\n              element.addClass('active-background');\n            });\n          }\n        }\n      }\n    }\n})();\n","/**\n * This directive controll invite new people to list\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listInvite\", listInviteDirective);\n\n    listInviteDirective.$inject = ['SearchService', 'ListsService'];\n    function listInviteDirective(SearchService, ListsService) {\n      var directive = {\n        restrict: \"E\",\n        require: '^list',\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-invite/list-invite.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs, listCtrl) {\n        var alreadyAddedUsers = [];\n        scope.owner = listCtrl.data.owner;\n        scope.stash = [];\n        scope.searchPeople = searchPeople;\n        scope.saveToStash = saveToStash;\n        scope.removeFromStash = removeFromStash;\n        scope.saveToMembers = saveToMembers;\n\n        scope.$watch(function() {\n          return listCtrl.showInviteList;\n        }, function(newVal) {\n          if (newVal === true) {\n            loadData();\n          } else {\n            cleanInputs();\n          }\n        });\n\n        function loadData() {\n          listCtrl.data.members.forEach(function(i) {\n            i.interests = i.interests.slice(0, 3);\n            scope.stash.push(i);\n            alreadyAddedUsers.push(i.name);\n          });\n\n          alreadyAddedUsers.push(listCtrl.data.owner.name);\n        }\n\n        function searchPeople() {\n          if (scope.members) {\n            SearchService.users({}, { name: scope.members, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToStash(user) {\n          scope.stash.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.users = null;\n        }\n\n        function removeFromStash(member) {\n          var indexAddedUsers;\n\n          scope.stash.forEach(function(i, index) {\n            if (scope.stash[index].name === member.name) {\n              scope.stash.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function saveToMembers() {\n          var list = listCtrl.data;\n\n          list.members = scope.stash;\n\n          ListsService.update({ id: listCtrl.listID }, { list: list }, function (response) {\n            cleanInputs();\n            listCtrl.showInviteList = true;\n            listCtrl.closePopupAndOverlay();\n          });\n        }\n\n        function cleanInputs() {\n          alreadyAddedUsers = [];\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.stash = [];\n          scope.users = [];\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .directive('onFinishRender', onFinishRender);\n\n    onFinishRender.$inject = [\"$timeout\"];\n    function onFinishRender($timeout) {\n      var directive = {\n        restrict: 'A',\n        link: linkFunc,\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        if (scope.$last === true) {\n          $timeout(function() {\n            scope.$eval(attrs.onFinishRender);\n          }, 1000);\n        }\n      }\n    }\n})();\n","/**\n * This directive controll creating new list and at once add people to this list\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .directive('newList', newListDirective);\n\n    newListDirective.$inject = ['$rootScope', '$window', 'UserService', 'SearchService', 'ListsService', 'userData', 'tags'];\n    function newListDirective($rootScope, $window, UserService, SearchService, ListsService, userData, tags) {\n      var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {\n          lists: '=',\n          show: '='\n        },\n        templateUrl: 'scripts/common/directives/new-list/new-list.tpl.html',\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs) {\n        scope.showSearchResult = false;\n        scope.members = [];\n        scope.saveNewList = saveNewList;\n        scope.searchPeople = searchPeople;\n        scope.saveToMembers = saveToMembers;\n        scope.removeFromMembers = removeFromMembers;\n        var alreadyAddedUsers = [];\n\n        scope.$watch(function() {\n          return scope.show;\n        }, function(newVal) {\n          if (newVal === true) {\n            scope.focus = true;\n            alreadyAddedUsers.push(scope.currentUserData.name);\n          } else {\n            cleanInputs();\n          }\n        });\n\n        loadCurrentUser();\n\n        function loadCurrentUser() {\n          scope.currentUserData = userData.getData();\n        }\n\n        function saveNewList(validation) {\n          scope.newListSubmitted = true;\n\n          if (validation) {\n            var result = tags.getTagsAndText(scope.newListTitle);\n\n            var title = result.text;\n            var hashTags = result.hashTags;\n\n            ListsService.save({ title: title, tags: hashTags, members: scope.members }, function (response) {\n              scope.lists.push(response.list);\n              $rootScope.$emit('hideFogOverlay');\n              cleanInputs();\n            });\n          }\n        }\n\n        function searchPeople() {\n          if (scope.searchUser) {\n            SearchService.users({}, { name: scope.searchUser, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToMembers(user) {\n          scope.members.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.searchUser = null;\n          scope.users = [];\n        }\n\n        function removeFromMembers(member) {\n          var indexAddedUsers;\n\n          scope.members.forEach(function(i, index) {\n            if (scope.members[index].name === member.name) {\n              scope.members.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function cleanInputs() {\n          scope.showSearchResult = false;\n          scope.users = [];\n          scope.members = [];\n          scope.searchUser = null;\n          scope.nameMember = null;\n          scope.newListTitle = null;\n          scope.newListForm.$setPristine();\n          scope.newListSubmitted = false;\n          alreadyAddedUsers = [];\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"loginPageCtrl\", LoginPageCtrl);\n\n  LoginPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\", 'UserService', 'userData'];\n  function LoginPageCtrl($window, $state, AuthService, UserService, userData) {\n    var loginVm = this;\n    loginVm.submitted;\n    loginVm.submitData = submitData;\n    loginVm.clearMessageError = clearMessageError;\n\n    function submitData(validation) {\n      loginVm.submitted = true;\n\n      if (validation) {\n        var data = {\n          username: loginVm.username,\n          password: loginVm.password\n        };\n\n        AuthService.login({}, data, function (response) {\n          $window.localStorage.token = response.token;\n          $window.localStorage.user = loginVm.username;\n\n          // reload user data because if user make log out and after again log in\n          // angular not update user data\n          UserService.get({ name: $window.localStorage.user }, function(response) {\n            userData.setData(response.user);\n            $state.go(\"main.lists\", { username: loginVm.username });\n          });\n        }, function (error) {\n          delete $window.localStorage.token;\n          loginVm.message = error.data.message;\n        });\n      }\n    }\n\n    function clearMessageError() {\n      loginVm.message = null;\n    }\n  }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"signupPageCtrl\", SignupPageCtrl);\n\n    SignupPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\", 'UserService', 'userData'];\n    function SignupPageCtrl($window, $state, AuthService, UserService, userData) {\n      var signupVm = this;\n\n      signupVm.submitted;\n      signupVm.message;\n      signupVm.submitData = submitData;\n      signupVm.clearMessageError = clearMessageError;\n\n      function submitData(validation) {\n        signupVm.submitted = true;\n\n        if (validation) {\n          var data = {\n            username: signupVm.userName,\n            email:    signupVm.userEmail,\n            password: signupVm.userPassword\n          }\n\n          AuthService.save({}, data, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = signupVm.userName;\n\n\n            // reload user data because if user make log out and after again log in\n            // angular not update user data\n            UserService.get({ name: $window.localStorage.user }, function(response) {\n              userData.setData(response.user);\n              $state.go(\"main.interests\");\n            });\n          }, function (error) {\n            delete $window.localStorage.token;\n            signupVm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        signupVm.message = null;\n      }\n    }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"interestsPageCtrl\", InterestsPageCtrl);\n\n    InterestsPageCtrl.$inject = [\"$timeout\", \"$window\", \"$state\", \"UserService\", 'userData', 'InterestsService'];\n    function InterestsPageCtrl($timeout, $window, $state, UserService, userData, InterestsService) {\n      var vm = this;\n      var i = 0;\n      var colorsArray = [\"red\", \"orange\", \"yellow\", \"green\", \"indigo\", \"violet\"];\n      var promiseTimeout;\n      vm.interests = [];\n      vm.selectedInterest = [];\n      vm.chooseInterest = chooseInterest;\n      vm.removeInterest = removeInterest;\n      vm.saveInterests = saveInterests;\n      vm.username = $window.localStorage.user; // send to ui-router\n      // delay is necessary to run the animation\n      InterestsService.get(function (response) {\n        $timeout(function() {\n          vm.interests = response.interests;\n        }, 100);\n      });\n\n      /**\n       * This function set to target element some class,\n       * add to array of chosen interests - new interest\n       * and remove from array of colors - first color\n       * which is used in the array of chosen interests,\n       */\n      function chooseInterest(event, index) {\n        var target = angular.element(event.target);\n        if (i < 6) {\n          target.addClass(\"chosen-interest\");\n          vm.selectedInterest.push({ text: target.text(), color: colorsArray[0], id: index });\n          colorsArray.shift();\n          i++;\n        }\n      }\n\n      /**\n       * This function get data-id from target element\n       * Removes the necessary item from the array by index\n       * Find the element of interests by data and remove some class\n       * and push to the array of colors - color from target element\n       */\n      function removeInterest(event, index) {\n        var targetId = event.target.dataset.selectedId;\n        vm.selectedInterest.splice(index, 1);\n        angular.element(document.querySelectorAll(\"[data-id='\" + targetId + \"']\")).removeClass(\"chosen-interest\");\n        colorsArray.push(event.target.dataset.color)\n        i--;\n      }\n      // i know this code placing between fuck and shit\n\n      function saveInterests() {\n        var interestsArray = [];\n\n        if (vm.selectedInterest.length > 0) {\n          vm.selectedInterest.forEach(function(item) {\n            interestsArray.push(item.text);\n          });\n\n          var user = userData.getData();\n          user.interests = interestsArray;\n\n          UserService.update({}, { user: user }, function (response) {\n            $state.go(\"main.lists\", { username: vm.username });\n          });\n        } else {\n\n          vm.emptyInterests = (vm.emptyInterests)\n            ? false\n            : true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"listsPageCtrl\", ListsPageCtrl);\n\n    ListsPageCtrl.$inject = [\"$scope\", \"$rootScope\", \"$stateParams\", \"ListsService\", 'UserService', 'userData', 'listsFilter', 'ListRecommendationService'];\n    function ListsPageCtrl($scope, $rootScope, $stateParams, ListsService, UserService, userData, listsFilter, ListRecommendationService) {\n      var listsVm = this;\n      var username = $stateParams.username;\n      listsVm.showNewList; // check open popup\n      listsVm.newListSubmitted; // check press submit button\n      listsVm.createNewList = createNewList;\n      listsVm.selectSort = selectSort;\n      listsVm.reloadList = reloadList;\n      listsVm.isOwner = userData.isOwnerPage();\n\n      // fog broadcast\n      $scope.$on('closePopup', closePopup);\n\n      activate();\n\n      function activate() {\n        // if we work with page of another user\n        if (listsVm.isOwner !== true) {\n          // load his data\n          UserService.get({ name: username }, function (response) {\n            listsVm.user = response.user;\n          });\n        }\n\n        // get all lists of user\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function getRecommendationLists() {\n        ListRecommendationService.get(function(response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n\n      function masonry() {\n        // var elem = document.querySelector('.lists-wrapper');\n        // var msnry = new Masonry( elem, {\n        //   // options\n        //   itemSelector: '.col-sm-4',\n        //   percentPosition: true\n        // });\n      }\n\n      function createNewList() {\n        listsVm.showNewList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function reloadList() {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function selectSort(type) {\n        listsVm.filter = {\n          owner: {}\n        };\n\n        switch(type) {\n          case 'all': {\n            // listsVm.filter.owner.name = '';\n            listsFilter.setIsOwnFilter(false);\n            break;\n          }\n          case 'own': {\n            listsVm.filter.owner.name = 'Eugene';\n            listsFilter.setIsOwnFilter(true);\n            break;\n          }\n          case 'inbox': {\n            listsVm.filter.owner.name = '!Eugene';\n            listsFilter.setIsOwnFilter(false);\n            break;\n          }\n          case 'recommended': {\n            delete listsVm.filter.owner;\n            getRecommendationLists();\n            listsFilter.setIsOwnFilter(false);\n          }\n        }\n      }\n\n      function closePopup() {\n        listsVm.showNewList = false;\n      }\n    };\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('accountPageCtrl', AccountPageCtrl);\n\n    AccountPageCtrl.$inject = ['$window', '$rootScope', 'UserService', 'userData'];\n    function AccountPageCtrl($window, $rootScope, UserService, userData) {\n      var vm = this;\n      vm.saveChanges = saveChanges;\n      vm.changeAvatar = changeAvatar;\n      vm.clearMessageError = clearMessageError;\n\n      activate();\n\n      function activate() {\n        vm.user = userData.getData();\n      }\n\n      function saveChanges(validation) {\n\n        if (validation) {\n          vm.message = null;\n          vm.messageDone = null;\n          UserService.update({}, { user: vm.user }, function (response) {\n            vm.messageDone = response.message;\n            $rootScope.$emit('reloadNavbar');\n          }, function (error) {\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          console.warn('error')\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.avatarImage = response.avatar;\n            $rootScope.$emit('reloadNavbar');\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"passwordPageCtrl\", PasswordPageCtrl);\n\n    PasswordPageCtrl.$inject = [\"UserService\"];\n    function PasswordPageCtrl(UserService) {\n      var vm = this;\n\n      vm.savePassword = savePassword;\n\n      function savePassword(validation) {\n        vm.submitted = true;\n        vm.errorConfirmPass = null;\n        vm.message = null;\n        vm.messageDone = null;\n        var body = {};\n        if(validation) {\n          if (vm.newPass === vm.newPassConfirm) {\n            body = {\n              oldPass: vm.oldPass,\n              newPass: vm.newPassConfirm\n            }\n\n            UserService.save({}, body, function (response) {\n              vm.messageDone = response.message;\n            }, function (error) {\n              vm.message = error.data.message;\n            });\n          } else {\n            vm.errorConfirmPass = true;\n          }\n        }\n      }\n    };\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('userNavCtrl', UserNavCtrl);\n\n    UserNavCtrl.$inject = ['$rootScope', '$scope', '$state', '$window', 'UserService', 'userData'];\n    function UserNavCtrl($rootScope, $scope, $state, $window, UserService, userData) {\n      var navVm = this;\n      navVm.user = {};\n      navVm.logout = logout;\n      navVm.openDropdown = openDropdown;\n      navVm.changeAvatar = changeAvatar;\n      navVm.closeDropdown = closeDropdown;\n      navVm.username = $window.localStorage.user;\n      var listener = $rootScope.$on('reloadNavbar', load);\n\n      load();\n\n      function load() {\n        navVm.user = userData.getData();\n      }\n\n      function openDropdown(event) {\n        navVm.dropdownIsOpen = (navVm.dropdownIsOpen) ? false : true;\n      }\n\n      function closeDropdown() {\n        navVm.dropdownIsOpen = false;\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          alert('File format not support');\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            navVm.user.avatar = response.avatar;\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        $state.go('home');\n      }\n\n      $scope.$on('$destroy', listener);\n    };\n\n})();\n"],"sourceRoot":"/source/"}