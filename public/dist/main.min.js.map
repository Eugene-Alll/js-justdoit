{"version":3,"sources":["core/app-bootstrap.js","core/app.mdl.js","common/config/interceptors.cfg.js","common/config/router.cfg.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/interests.service.js","common/services/list-recommendation.factory.js","common/services/lists-filter.srv.js","common/services/lists.fctr.js","common/services/search.fctr.js","common/services/state-change-error.srv.js","common/services/state-change-success.srv.js","common/services/tags.srv.js","common/services/task.fctr.js","common/services/user-data.srv.js","common/services/user-logged.srv.js","common/services/user.fctr.js","common/filters/task-visibility.filter.js","core/main-profile/profile-account/profile-account.ctrl.js","core/main-profile/profile-password/profile-password.ctrl.js","core/auth/auth-login/auth-login.ctrl.js","core/main/main-lists/main-lists.ctrl.js","common/components/task/task.cmp.js","common/directives/click-enter/click-enter.drv.js","common/directives/click-outside/click-outside.drv.js","common/directives/contenteditable/contenteditable.drv.js","common/directives/custom-focus/custom-focus.drv.js","common/directives/file-reader/file-reader.drv.js","common/directives/fog/fog.drv.js","core/main/main-interests/main-interests.ctrl.js","core/auth/auth-signup/auth-signup.ctrl.js","common/directives/list-background/list-background.drv.js","common/directives/new-list/new-list.drv.js","common/components/list/list.cmp.js","core/navbar/navbar-user/navbar-user.ctrl.js","common/directives/list-invite/list-invite.drv.js","common/directives/list-settings/list-settings.drv.js","common/directives/on-finish-render/on-finish-render.js"],"names":["angular","element","document","ready","bootstrap","configure","$locationProvider","$stateProvider","$urlRouterProvider","$httpProvider","configRouter","configInterceptors","runBlock","stateChangeSuccess","stateChangeError","initialize","module","config","run","$inject","interceptors","push","constant","state","url","views","navbar","templateUrl","content","abstract","resolve","isUserLogged","content@","controller","controllerAs","loadUserData","profile","otherwise","html5Mode","userLogged","logged","$window","UserService","userData","currentUser","localStorage","user","get","name","response","setData","authInterceptor","$rootScope","$q","$injector","request","headers","token","Authorization","responseError","status","go","reject","factory","AuthService","$resource","type","save","method","params","login","InterestsService","ListRecommendationService","data","listsFilter","this","isRecommendation","value","setIsOwnFilter","isOwnFilter","getIsOwnFilter","service","ListsService","id","query","isArray","update","SearchService","lists","users","$state","$on","event","toState","toParams","fromState","fromParams","error","username","stateNames","split","body","length","tags","getTagsAndText","text","hashTags","twitterTags","twttr","txt","extractHashtags","forEach","item","indexOf","replace","TaskService","list","task","$stateParams","getData","isOwnerPage","isOwnerList","listOwner","getCurrentUser","deferred","defer","promise","avatar","taskVisibility","input","color","completed","filteredElements","filter","AccountPageCtrl","activate","vm","saveChanges","validation","message","messageDone","$emit","changeAvatar","image","reader","localeCompare","console","warn","FileReader","onload","target","result","readAsDataURL","clearMessageError","PasswordPageCtrl","savePassword","submitted","errorConfirmPass","newPass","newPassConfirm","oldPass","LoginPageCtrl","submitData","loginVm","password","ListsPageCtrl","$scope","listsVm","isOwner","getRecommendationLists","createNewList","showNewList","makeGlobalSearch","search","title","searchLists","reloadList","selectSort","owner","closePopup","newListSubmitted","taskController","changeColor","listID","taskID","closeEditMode","textBeforeEdit","editMode","closeDropdown","dropdownIsOpen","editTaskText","focusOn","openDropdown","currentTarget","setTaskCompleted","saveEditedText","self","removeTask","reloadTasks","_id","$onInit","listCtrl","component","bindings","require","clickEnterDirective","linkFunc","scope","attrs","bind","which","$apply","$eval","clickEnter","directive","restrict","link","clickOutsideDirective","$document","$parse","fn","eventHandler","childElement","contains","on","off","contenteditableDirective","ngModel","read","$setViewValue","html","$render","$viewValue","customFocusDirective","$timeout","$watch","focus","trigger","fileReaderDirective","files","fogDirective","hideFogOverlay","showFogState","$parent","$broadcast","showFogOverlay","listenerShowOverlay","listenerHideOverlay","template","InterestsPageCtrl","chooseInterest","index","i","addClass","selectedInterest","colorsArray","shift","removeInterest","targetId","dataset","selectedId","splice","querySelectorAll","removeClass","saveInterests","interestsArray","interests","emptyInterests","SignupPageCtrl","signupVm","userName","email","userEmail","userPassword","listBackgroundDirective","clickHandler","hasClass","parent","children","newListDirective","elem","loadCurrentUser","currentUserData","saveNewList","newListTitle","members","cleanInputs","searchPeople","searchUser","usedNames","alreadyAddedUsers","responce","showSearchResult","saveToMembers","removeFromMembers","member","indexAddedUsers","nameMember","newListForm","$setPristine","show","newVal","listController","addCurrentUserToMembers","isUserAlreadyInMembers","addLike","newListInterest","isUserTakeLike","likes","some","alreadyLiked","_","difference","lists_interests","union","addNewTask","allowSavingTask","taskText","addTo","taskAdd","tasks","unshift","clearInput","showInviteList","showBackground","closePopupAndOverlay","invitePeople","openBackgroundPopup","removeList","reload","newMembersArray","saveTextToTemp","textTemp","saveEditedTitle","taskAddHandler","colorFilterHandler","events","colorFilter","taskVisibilityHandler","completedTask","add_task","color_filter","siteUrl","location","href","twitterText","UserNavCtrl","load","navVm","alert","logout","openSettingsSidebar","showListSettings","closeSettingsSidebar","listener","listInviteDirective","loadData","slice","stash","saveToStash","removeFromStash","listSettingsDirective","changeCompleted","changeTaskAdd","addTask","chooseColorFilter","closeSidebar","onFinishRender","$last"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, [\"llamaLists\"]);\n  });\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists', ['ui.router', 'ngMessages', 'ngResource', 'ngAnimate'])\n    .config(configure)\n    .run(runBlock);\n\n\n  configure.$inject = [\"$locationProvider\", \"$stateProvider\", \"$urlRouterProvider\", '$httpProvider', 'configRouter', 'configInterceptors'];\n  function configure($locationProvider, $stateProvider, $urlRouterProvider, $httpProvider, configRouter, configInterceptors) {\n    configRouter($locationProvider, $stateProvider, $urlRouterProvider);\n    configInterceptors($httpProvider);\n  }\n  /* set body id for css style */\n  runBlock.$inject = ['stateChangeSuccess', 'stateChangeError'];\n  function runBlock(stateChangeSuccess, stateChangeError) {\n    stateChangeSuccess.initialize();\n    stateChangeError.initialize();\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configInterceptors', configInterceptors);\n\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push(\"AuthInterceptor\");\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configRouter', configRouter);\n\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider) {\n      $stateProvider\n        .state(\"home\", {\n          url: \"/\",\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-auth/navbar-auth.tpl.html\"\n            },\n            \"content\": {\n              templateUrl: \"home/home.tpl.html\"\n            }\n          }\n        })\n        .state(\"auth\", {\n          url: \"\",\n          abstract: true,\n          resolve: {\n            isUserLogged: isUserLogged\n          }\n        })\n        .state(\"auth.login\", {\n          url: \"/login\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-login/auth-login.tpl.html\",\n              controller:   \"loginPageCtrl\",\n              controllerAs: \"loginVm\"\n            }\n          }\n        })\n        .state(\"auth.signup\", {\n          url: \"/signup\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-signup/auth-signup.tpl.html\",\n              controller:   \"signupPageCtrl\",\n              controllerAs: \"signupVm\"\n            }\n          }\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-user/navbar-user.tpl.html\",\n              controller:   \"userNavCtrl\",\n              controllerAs: \"navVm\"\n            }\n          },\n          resolve: {\n            loadUserData: loadUserData\n          }\n        })\n        .state(\"main.lists\", {\n          url: \"/:username\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-lists/main-lists.tpl.html\",\n              controller:   \"listsPageCtrl\",\n              controllerAs: \"listsVm\"\n            }\n          }\n        })\n        .state(\"main.interests\", {\n          url: \"/interests/\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-interests/main-interests.tpl.html\",\n              controller:   \"interestsPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile\", {\n          url: \"/profile\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main-profile/main-profile.tpl.html\"\n            }\n          }\n        })\n        .state(\"main.profile.account\", {\n          url: \"/account\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-account/profile-account.tpl.html\",\n              controller:   \"accountPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile.password\", {\n          url: \"/password\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-password/profile-password.tpl.html\",\n              controller:   \"passwordPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"404\", {\n          url: \"/404/\",\n          views: {\n            \"content\": {\n              templateUrl: \"404/404.tpl.html\"\n            }\n          }\n        });\n\n      $urlRouterProvider.otherwise(\"/404\");\n      $locationProvider.html5Mode(true);\n    }\n\n    isUserLogged.$inject = ['userLogged'];\n    function isUserLogged(userLogged) {\n      return userLogged.logged();\n    }\n\n    loadUserData.$inject = ['$window', 'UserService', 'userData'];\n    function loadUserData($window, UserService, userData) {\n      var currentUser = $window.localStorage.user;\n\n      return UserService.get({ name: currentUser }, function(response) {\n        return userData.setData(response.user);\n      });\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .factory('AuthInterceptor', authInterceptor);\n\n    authInterceptor.$inject = [\"$rootScope\", \"$q\", \"$window\", \"$injector\"];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = \"Bearer \" + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n\n            // remove just in case\n            delete $window.localStorage.token;\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go(\"auth.signup\"); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go(\"404\");\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"AuthService\", AuthService);\n\n    AuthService.$inject = [\"$resource\"];\n    function AuthService($resource) {\n      return $resource(\"/auth/:type\", {\n        type: \"@type\"\n      },\n      {\n        save: {\n          method: \"POST\",\n          params: {\n            type: \"signup\"\n          }\n        },\n        login: {\n          method: \"POST\",\n          params: {\n            type: \"login\"\n          }\n        }\n      });\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('InterestsService', InterestsService);\n\n    InterestsService.$inject = ['$resource'];\n    function InterestsService($resource) {\n      return $resource('/api/data/interests');\n    }\n})();\n","/**\n * This service\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListRecommendationService\", ListRecommendationService);\n\n    ListRecommendationService.$inject = ['$resource'];\n    function ListRecommendationService($resource) {\n\n      var data = $resource(\"/api/data/recommendation\");\n\n      return data;\n    }\n})();\n","/**\n * This service need for hiding some element if filtering lists\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"listsFilter\", listsFilter);\n\n    function listsFilter() {\n\n      this.isRecommendation = function(value) {\n        if (typeof value !== 'undefined') {\n          this.value = value;\n        }\n        return this.value;\n      }\n\n      this.setIsOwnFilter = function(type) {\n        this.isOwnFilter = type;\n      }\n\n      this.getIsOwnFilter = function() {\n        return this.isOwnFilter;\n      }\n    }\n})();\n","/**\n * This service controll lists request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListsService\", ListsService);\n\n    ListsService.$inject = [\"$resource\"];\n    function ListsService($resource) {\n      var data = $resource(\"/api/lists/:id:user\", { id: \"@id\", user: \"@user\"}, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll search request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('SearchService', SearchService);\n\n    SearchService.$inject = ['$resource'];\n    function SearchService($resource) {\n      var data = $resource('/api/search/:type', {},\n      {\n        lists: {\n          method: 'POST',\n          params: {\n            type: 'lists'\n          }\n        },\n        users: {\n          method: 'POST',\n          params: {\n            type: 'users'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeError', stateChangeError);\n\n    stateChangeError.$inject = ['$rootScope', '$state', '$window'];\n    function stateChangeError($rootScope, $state, $window) {\n      return {\n        initialize: function() {\n          $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n            if (error === 'isAlreadyLogged') {\n              $state.go('main.lists', { username: $window.localStorage.user });\n            }\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeSuccess', stateChangeSuccess);\n\n    stateChangeSuccess.$inject = ['$rootScope'];\n    function stateChangeSuccess($rootScope) {\n        return {\n          initialize: function() {\n            $rootScope.$on('$stateChangeSuccess', function(event, toState){\n              var stateNames = toState.name.split('.');\n              document.body.id = stateNames[stateNames.length - 1] + '-page';\n            });\n          }\n        }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"tags\", tags);\n\n    function tags() {\n\n      this.getTagsAndText = function(text) {\n        var hashTags = [];\n        var twitterTags = twttr.txt.extractHashtags(text);\n\n        twitterTags.forEach(function(item) {\n\n          // twitter extracted tags without hash, therefore add this symbol for them\n          if (hashTags.indexOf(item) === -1) { // additional check on the tags already added\n            hashTags.push(item);\n          }\n\n          if (text.indexOf('<span>#' + item + '</span>') === -1) {\n            text = text.replace('#' + item, '<span>#' + item + '</span>');\n          }\n\n          // text = text.replace(/(^|\\s)#ama(\\s|$)/, '<span>#' + item + '</span>'); // maybe work replace word\n          // text = text.replace('#' + item, '<span>#' + item + '</span>').replace(/\\s\\s+/g, ' '); // replace spaces\n        });\n\n        return {\n          text: text,\n          hashTags: hashTags\n        }\n      }\n    }\n})();\n","/**\n * This service controll task request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"TaskService\", TaskService);\n\n    TaskService.$inject = [\"$resource\"];\n    function TaskService($resource) {\n      var data = $resource(\"/api/lists/:list/task/:task\", { list: \"@list\", task: \"@task\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll all user data (like a avatar, name, interests)\n * And also check the logged user placing on your own page\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userData\", userData);\n\n    userData.$inject = ['$window', '$stateParams'];\n    function userData($window, $stateParams) {\n\n      this.getData = function() {\n        return this.userData;\n      }\n\n      this.setData = function(user) {\n        this.userData = user;\n      }\n\n      this.isOwnerPage = function() {\n        if ($window.localStorage.user !== $stateParams.username) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      this.isOwnerList = function(listOwner) {\n        if ($window.localStorage.user !== listOwner) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      this.getCurrentUser = function() {\n        return $window.localStorage.user;\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userLogged\", userLogged);\n\n    userLogged.$inject = [\"$window\", \"$state\", \"$q\"];\n    function userLogged($window, $state, $q) {\n\n      this.logged = function() {\n        var deferred = $q.defer();\n        if ($window.localStorage.token) {\n          deferred.reject(\"isAlreadyLogged\");\n        } else {\n          deferred.resolve();\n        }\n\n        return deferred.promise;\n      }\n    }\n})();\n","/**\n * This service controll user request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('UserService', UserService);\n\n    UserService.$inject = ['$resource'];\n    function UserService($resource) {\n\n      var data = $resource('/api/user/:name:type', { name: '@name', type: '@type' }, {\n        update:  {\n          method: 'PUT'\n        },\n        avatar: {\n          method: 'PUT',\n          params: {\n            type: 'avatar'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use script';\n\n  angular\n    .module('llamaLists')\n    .filter('taskVisibility', taskVisibility);\n\n    function taskVisibility() {\n      return function(input, color, completed) {\n        if (color === 'none' && completed === 'visible') {\n          return input;\n        } else {\n          var filteredElements = input.filter(function(item) {\n            // very bad triple condition, but another solution use two filters that's more baddest!\n            if (completed === 'hidden') {\n              if (color !== 'none') {\n                return (item.completed === false && item.color === color) || (item.completed === false && item.color === 'gray');\n              } else {\n                return item.completed === false;\n              }\n            } else {\n              return item.color === color || item.color === 'gray';\n            }\n          });\n\n          return filteredElements;\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('accountPageCtrl', AccountPageCtrl);\n\n    AccountPageCtrl.$inject = ['$window', '$rootScope', 'UserService', 'userData'];\n    function AccountPageCtrl($window, $rootScope, UserService, userData) {\n      var vm = this;\n      vm.saveChanges = saveChanges;\n      vm.changeAvatar = changeAvatar;\n      vm.clearMessageError = clearMessageError;\n\n      activate();\n\n      function activate() {\n        vm.user = userData.getData();\n      }\n\n      function saveChanges(validation) {\n\n        if (validation) {\n          vm.message = null;\n          vm.messageDone = null;\n          UserService.update({}, { user: vm.user }, function (response) {\n            vm.messageDone = response.message;\n            $rootScope.$emit('reloadNavbar');\n          }, function (error) {\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          console.warn('error')\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.user.avatar = response.avatar;\n            $rootScope.$emit('reloadNavbar');\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"passwordPageCtrl\", PasswordPageCtrl);\n\n    PasswordPageCtrl.$inject = [\"UserService\"];\n    function PasswordPageCtrl(UserService) {\n      var vm = this;\n\n      vm.savePassword = savePassword;\n\n      function savePassword(validation) {\n        vm.submitted = true;\n        vm.errorConfirmPass = null;\n        vm.message = null;\n        vm.messageDone = null;\n        var body = {};\n        if(validation) {\n          if (vm.newPass === vm.newPassConfirm) {\n            body = {\n              oldPass: vm.oldPass,\n              newPass: vm.newPassConfirm\n            }\n\n            UserService.save({}, body, function (response) {\n              vm.messageDone = response.message;\n            }, function (error) {\n              vm.message = error.data.message;\n            });\n          } else {\n            vm.errorConfirmPass = true;\n          }\n        }\n      }\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"loginPageCtrl\", LoginPageCtrl);\n\n  LoginPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\", 'UserService', 'userData'];\n  function LoginPageCtrl($window, $state, AuthService, UserService, userData) {\n    var loginVm = this;\n    loginVm.submitted;\n    loginVm.submitData = submitData;\n    loginVm.clearMessageError = clearMessageError;\n\n    function submitData(validation) {\n      loginVm.submitted = true;\n\n      if (validation) {\n        var data = {\n          username: loginVm.username,\n          password: loginVm.password\n        };\n\n        AuthService.login({}, data, function (response) {\n          $window.localStorage.token = response.token;\n          $window.localStorage.user = loginVm.username;\n\n          // reload user data because if user make log out and after again log in\n          // angular not update user data\n          UserService.get({ name: $window.localStorage.user }, function(response) {\n            userData.setData(response.user);\n            $state.go(\"main.lists\", { username: loginVm.username });\n          });\n        }, function (error) {\n          delete $window.localStorage.token;\n          loginVm.message = error.data.message;\n        });\n      }\n    }\n\n    function clearMessageError() {\n      loginVm.message = null;\n    }\n  }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"listsPageCtrl\", ListsPageCtrl);\n\n    ListsPageCtrl.$inject = [\"$scope\", \"$rootScope\", \"$stateParams\", \"ListsService\", 'UserService', 'userData', 'listsFilter', 'SearchService', 'ListRecommendationService'];\n    function ListsPageCtrl($scope, $rootScope, $stateParams, ListsService, UserService, userData, listsFilter, SearchService, ListRecommendationService) {\n      var listsVm = this;\n      var username = $stateParams.username;\n      var isRecommended;\n\n      listsVm.showNewList; // check open popup\n      listsVm.newListSubmitted; // check press submit button\n      listsVm.createNewList = createNewList;\n      listsVm.makeGlobalSearch = makeGlobalSearch;\n      listsVm.selectSort = selectSort;\n      listsVm.reloadList = reloadList;\n      listsVm.isOwner = userData.isOwnerPage();\n\n      // fog broadcast\n      $scope.$on('closePopup', closePopup);\n\n      activate();\n\n      function activate() {\n        // if we work with page of another user\n        if (listsVm.isOwner !== true) {\n          // load his data\n          UserService.get({ name: username }, function (response) {\n            listsVm.user = response.user;\n          });\n        }\n\n        // get all lists of user\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function getRecommendationLists() {\n        ListRecommendationService.get(function(response) {\n          listsVm.lists = response.lists;\n          listsFilter.isRecommendation(true);\n        });\n      }\n\n\n      function masonry() {\n        // var elem = document.querySelector('.lists-wrapper');\n        // var msnry = new Masonry( elem, {\n        //   // options\n        //   itemSelector: '.col-sm-4',\n        //   percentPosition: true\n        // });\n      }\n\n      function createNewList() {\n        listsVm.showNewList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function makeGlobalSearch() {\n        SearchService.lists({ query: listsVm.search.title }, function(response) {\n          listsVm.searchLists = response.lists;\n        });\n      }\n\n      function reloadList() {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function selectSort(type) {\n        listsVm.filter = {\n          owner: {}\n        };\n\n        if (listsFilter.isRecommendation() && type !== 'recommended') {\n          activate();\n          listsFilter.isRecommendation(false);\n        }\n\n        switch(type) {\n          case 'all': {\n            // listsVm.filter.owner.name = '';\n            listsFilter.setIsOwnFilter(false);\n            break;\n          }\n          case 'own': {\n            listsVm.filter.owner.name = username;\n            listsFilter.setIsOwnFilter(true);\n            break;\n          }\n          case 'inbox': {\n            listsVm.filter.owner.name = '!' + username;\n            listsFilter.setIsOwnFilter(false);\n            break;\n          }\n          case 'recommended': {\n            delete listsVm.filter.owner;\n            getRecommendationLists();\n            listsFilter.setIsOwnFilter(false);\n          }\n        }\n      }\n\n      function closePopup() {\n        listsVm.showNewList = false;\n      }\n    };\n\n})();\n","/**\n * This directive controll task data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"task\", {\n      bindings: {\n        data: \"=\"\n      },\n      require: {\n        listCtrl: '^list'\n      },\n      controller: taskController,\n      templateUrl: 'scripts/common/components/task/task.tpl.html'\n    });\n\n    taskController.$inject = ['TaskService'];\n    function taskController(TaskService) {\n      var listID;\n      var reloadTasks;\n      var textBeforeEdit;\n      var taskID = this.data._id;\n      var self = this;\n      this.dropdownIsOpen = false;\n\n      //func\n      this.changeColor = changeColor;\n      this.closeEditMode = closeEditMode;\n      this.closeDropdown = closeDropdown;\n      this.editTaskText = editTaskText;\n      this.openDropdown = openDropdown;\n      this.setTaskCompleted = setTaskCompleted;\n      this.saveEditedText = saveEditedText;\n      this.removeTask = removeTask;\n\n      this.$onInit = function() {\n        listID = this.listCtrl.listID;\n        reloadTasks = this.listCtrl.reloadTasks;\n        this.isOwner = this.listCtrl.isOwner;\n      }\n\n\n      function changeColor(color) {\n        if (color !== this.data.color) {\n          this.data.color = color;\n        } else {\n          this.data.color = 'gray';\n        }\n\n        TaskService.update({ list: listID, task: taskID }, { task: this.data });\n      }\n\n      function closeEditMode() {\n        this.data.text = textBeforeEdit;\n        this.editMode = false;\n      }\n\n      function closeDropdown() {\n        this.dropdownIsOpen = false;\n      }\n\n      function editTaskText() {\n        textBeforeEdit = this.data.text;\n        this.editMode = true;\n        this.focusOn = true;\n        this.closeDropdown();\n      }\n\n      function openDropdown(event) {\n        if (event.currentTarget === event.target) {\n          this.dropdownIsOpen = (this.dropdownIsOpen) ? false : true;\n        }\n      }\n\n      function setTaskCompleted(event) {\n        if (this.editMode !== true && this.isOwner) {\n          this.data.completed = (this.data.completed) ? false : true;\n          TaskService.update({ list: listID, task: taskID }, { task: this.data });\n        }\n      }\n\n      function saveEditedText() {\n        if (this.data.text) {\n          TaskService.update({ list: listID, task: taskID }, { task: this.data }, function (response) {\n            self.editMode = false;\n          });\n        } else {\n          this.closeEditMode();\n        }\n      }\n\n      function removeTask() {\n        TaskService.delete({ list: listID, task: taskID }, function (response) {\n          reloadTasks(listID);\n        });\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickEnter\", clickEnterDirective);\n\n    function clickEnterDirective() {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        element.bind(\"keypress\", function (event) {\n          if(event.which === 13) { // 13 is enter code on keyboard :)\n            scope.$apply(function (){\n              scope.$eval(attrs.clickEnter);\n            });\n          }\n        });\n      }\n    }\n})();\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","/**\n * This directive add custom ng-model directive to non-form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"contenteditable\", contenteditableDirective)\n\n    function contenteditableDirective() {\n      var directive = {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, ngModel) {\n        function read() {\n          ngModel.$setViewValue(element.html());\n        }\n\n        ngModel.$render = function() {\n          element.html(ngModel.$viewValue || \"\");\n        };\n\n        element.bind(\"blur keyup change\", function() {\n          scope.$apply(read);\n        });\n      }\n    }\n\n}());\n","/**\n * This directive setup focus to non form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"customFocus\", customFocusDirective)\n\n    customFocusDirective.$inject = [\"$timeout\"];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: \"A\",\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n          // element[0].focus();\n\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","/**\n * This directive controll fog(black-transparent background)\n * for all popup window\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fog\", fogDirective);\n\n    fogDirective.$inject = [\"$rootScope\"];\n    function fogDirective($rootScope) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        scope: {},\n        template: \"<div id='fog' ng-show='showFogState' ng-click='hideFogOverlay()'></div>\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var listenerShowOverlay = $rootScope.$on(\"showFogOverlay\", showFogOverlay);\n        var listenerHideOverlay = $rootScope.$on(\"hideFogOverlay\", hideFogOverlay);\n        scope.hideFogOverlay = hideFogOverlay;\n\n        /**\n         * remove rootscope listener\n         */\n        scope.$on('$destroy', listenerShowOverlay);\n        scope.$on('$destroy', listenerHideOverlay);\n\n        /**\n         * This function close any popup window\n         * And hide fog (or overlay)\n         */\n        function hideFogOverlay() {\n          scope.showFogState = false;\n          scope.$parent.$broadcast(\"closePopup\");\n        }\n\n        function showFogOverlay() {\n          scope.showFogState = true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"interestsPageCtrl\", InterestsPageCtrl);\n\n    InterestsPageCtrl.$inject = [\"$timeout\", \"$window\", \"$state\", \"UserService\", 'userData', 'InterestsService'];\n    function InterestsPageCtrl($timeout, $window, $state, UserService, userData, InterestsService) {\n      var vm = this;\n      var i = 0;\n      var colorsArray = [\"red\", \"orange\", \"yellow\", \"green\", \"indigo\", \"violet\"];\n      var promiseTimeout;\n      vm.interests = [];\n      vm.selectedInterest = [];\n      vm.chooseInterest = chooseInterest;\n      vm.removeInterest = removeInterest;\n      vm.saveInterests = saveInterests;\n      vm.username = $window.localStorage.user; // send to ui-router\n      // delay is necessary to run the animation\n      InterestsService.get(function (response) {\n        $timeout(function() {\n          vm.interests = response.interests;\n        }, 100);\n      });\n\n      /**\n       * This function set to target element some class,\n       * add to array of chosen interests - new interest\n       * and remove from array of colors - first color\n       * which is used in the array of chosen interests,\n       */\n      function chooseInterest(event, index) {\n        var target = angular.element(event.target);\n        if (i < 6) {\n          target.addClass(\"chosen-interest\");\n          vm.selectedInterest.push({ text: target.text(), color: colorsArray[0], id: index });\n          colorsArray.shift();\n          i++;\n        }\n      }\n\n      /**\n       * This function get data-id from target element\n       * Removes the necessary item from the array by index\n       * Find the element of interests by data and remove some class\n       * and push to the array of colors - color from target element\n       */\n      function removeInterest(event, index) {\n        var targetId = event.target.dataset.selectedId;\n        vm.selectedInterest.splice(index, 1);\n        angular.element(document.querySelectorAll(\"[data-id='\" + targetId + \"']\")).removeClass(\"chosen-interest\");\n        colorsArray.push(event.target.dataset.color)\n        i--;\n      }\n      // i know this code placing between fuck and shit\n\n      function saveInterests() {\n        var interestsArray = [];\n\n        if (vm.selectedInterest.length > 0) {\n          vm.selectedInterest.forEach(function(item) {\n            interestsArray.push(item.text);\n          });\n\n          var user = userData.getData();\n          user.interests = interestsArray;\n\n          UserService.update({}, { user: user }, function (response) {\n            $state.go(\"main.lists\", { username: vm.username });\n          });\n        } else {\n\n          vm.emptyInterests = (vm.emptyInterests)\n            ? false\n            : true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"signupPageCtrl\", SignupPageCtrl);\n\n    SignupPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\", 'UserService', 'userData'];\n    function SignupPageCtrl($window, $state, AuthService, UserService, userData) {\n      var signupVm = this;\n\n      signupVm.submitted;\n      signupVm.message;\n      signupVm.submitData = submitData;\n      signupVm.clearMessageError = clearMessageError;\n\n      function submitData(validation) {\n        signupVm.submitted = true;\n\n        if (validation) {\n          var data = {\n            username: signupVm.userName,\n            email:    signupVm.userEmail,\n            password: signupVm.userPassword\n          }\n\n          AuthService.save({}, data, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = signupVm.userName;\n\n\n            // reload user data because if user make log out and after again log in\n            // angular not update user data\n            UserService.get({ name: $window.localStorage.user }, function(response) {\n              userData.setData(response.user);\n              $state.go(\"main.interests\");\n            });\n          }, function (error) {\n            delete $window.localStorage.token;\n            signupVm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        signupVm.message = null;\n      }\n    }\n\n})();\n","/**\n * This directive controll popup and change background for lists\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listBackground\", listBackgroundDirective);\n\n    listBackgroundDirective.$inject = ['ListsService']\n    function listBackgroundDirective(ListsService) {\n      var directive = {\n        restrict: \"A\",\n        require: '^list',\n        replace: true,\n        scope: {},\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, listCtrl) {\n        if (attrs.class === listCtrl.data.image) {\n          element.addClass('active-background');\n        }\n\n        element.bind('click', clickHandler);\n\n        function clickHandler() {\n          if (!element.hasClass('active-background')) {\n            listCtrl.data.image = attrs.class;\n            element.parent().children().removeClass('active-background'); // baaaaaaaadd code\n\n            ListsService.update({ id: listCtrl.listID }, { list: listCtrl.data }, function (response) {\n              element.addClass('active-background');\n            });\n          }\n        }\n      }\n    }\n})();\n","/**\n * This directive controll creating new list and at once add people to this list\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .directive('newList', newListDirective);\n\n    newListDirective.$inject = ['$rootScope', '$window', 'UserService', 'SearchService', 'ListsService', 'userData', 'tags'];\n    function newListDirective($rootScope, $window, UserService, SearchService, ListsService, userData, tags) {\n      var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {\n          lists: '=',\n          show: '='\n        },\n        templateUrl: 'scripts/common/directives/new-list/new-list.tpl.html',\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs) {\n        scope.showSearchResult = false;\n        scope.members = [];\n        scope.saveNewList = saveNewList;\n        scope.searchPeople = searchPeople;\n        scope.saveToMembers = saveToMembers;\n        scope.removeFromMembers = removeFromMembers;\n        var alreadyAddedUsers = [];\n\n        scope.$watch(function() {\n          return scope.show;\n        }, function(newVal) {\n          if (newVal === true) {\n            scope.focus = true;\n            alreadyAddedUsers.push(scope.currentUserData.name);\n          } else {\n            cleanInputs();\n          }\n        });\n\n        loadCurrentUser();\n\n        function loadCurrentUser() {\n          scope.currentUserData = userData.getData();\n        }\n\n        function saveNewList(validation) {\n          scope.newListSubmitted = true;\n\n          if (validation) {\n            var result = tags.getTagsAndText(scope.newListTitle);\n\n            var title = result.text;\n            var hashTags = result.hashTags;\n\n            ListsService.save({ title: title, tags: hashTags, members: scope.members }, function (response) {\n              scope.lists.push(response.list);\n              $rootScope.$emit('hideFogOverlay');\n              cleanInputs();\n            });\n          }\n        }\n\n        function searchPeople() {\n          if (scope.searchUser) {\n            SearchService.users({}, { name: scope.searchUser, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToMembers(user) {\n          scope.members.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.searchUser = null;\n          scope.users = [];\n        }\n\n        function removeFromMembers(member) {\n          var indexAddedUsers;\n\n          scope.members.forEach(function(i, index) {\n            if (scope.members[index].name === member.name) {\n              scope.members.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function cleanInputs() {\n          scope.showSearchResult = false;\n          scope.users = [];\n          scope.members = [];\n          scope.searchUser = null;\n          scope.nameMember = null;\n          scope.newListTitle = null;\n          scope.newListForm.$setPristine();\n          scope.newListSubmitted = false;\n          alreadyAddedUsers = [];\n        }\n      }\n    }\n})();\n","/**\n * This component controll list data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"list\", {\n      bindings: {\n        data: \"=\",\n        reload: \"&\"\n      },\n      controller: listController,\n      templateUrl: 'scripts/common/components/list/list.tpl.html'\n    });\n\n    listController.$inject = ['$scope', '$rootScope', 'ListsService', 'TaskService', 'listsFilter', 'userData', 'UserService', 'tags'];\n    function listController($scope, $rootScope, ListsService, TaskService, listsFilter, userData, UserService, tags) {\n      //variable\n      var allowSavingTask = true;\n      var textBeforeEdit = '';\n      var textTemp = '';\n      var self = this;\n      var currentUser = userData.getData();\n\n      this.taskAdd = currentUser.add_task;\n      this.completedTask = currentUser.completed; // show or hide completed tasks\n      this.colorFilter = currentUser.color_filter; // filter tasks on color\n      this.listID = this.data._id;\n      this.siteUrl = document.location.href;\n      this.twitterText = 'I create a new to-do list at page ' + this.siteUrl;\n\n      $scope.$on('taskAdd', taskAddHandler);\n      $scope.$on('taskColorFilter', colorFilterHandler);\n      $scope.$on('taskVisibility', taskVisibilityHandler);\n\n      // check that user on it's own page\n      this.isOwnerPage = userData.isOwnerPage();\n\n      // check that user is list owner\n      this.isOwner = userData.isOwnerList(this.data.owner.name);\n\n      // count likes\n      this.likes = this.data.likes.length;\n\n      // this watcher hide avatar on lists if user choose sorting by his own lists\n      $scope.$watch(function() {\n        return listsFilter.getIsOwnFilter();\n      }, function() {\n        self.isOwnFilter = listsFilter.getIsOwnFilter();\n      });\n\n      /**\n       * On init add class to all already liked lists\n       * And class to lists, that were already shared to current users\n       **/\n      this.$onInit = function() {\n        this.alreadyLiked = this.data.likes.some(function(item) {\n          return item === currentUser.name;\n        });\n\n        if (!this.isOwner) {\n          this.isUserAlreadyInMembers = this.data.members.some(function(item) {\n            return item.name === currentUser.name;\n          });\n        }\n      }\n\n\n\n      // function\n      this.addCurrentUserToMembers = addCurrentUserToMembers;\n      this.addLike = addLike;\n      this.addNewTask = addNewTask;\n      this.clearInput = clearInput;\n      this.closePopupAndOverlay = closePopupAndOverlay;\n      this.invitePeople = invitePeople;\n      this.openBackgroundPopup = openBackgroundPopup;\n      this.saveEditedTitle = saveEditedTitle;\n      this.saveTextToTemp = saveTextToTemp;\n      this.removeList = removeList;\n      this.reloadTasks = reloadTasks;\n      $scope.$on('closePopup', closePopup);\n\n      function addCurrentUserToMembers() {\n\n        if (!this.isUserAlreadyInMembers) {\n          this.data.members.push(currentUser);\n\n          ListsService.update({ id: this.listID }, { list: this.data }, function() {\n            self.isUserAlreadyInMembers = true;\n          });\n        }\n      }\n\n      /**\n       * This function add likes to lists\n       * Like - it's a name user, who pressed the button\n       * If is like already in list - remove its\n       * Also save or remove liked list tags from user lists interests\n       **/\n      function addLike() {\n        if (!this.isOwner) {\n          var newListInterest;\n\n          // check is user already take the like\n          var isUserTakeLike = this.data.likes.some(function(item) {\n            return item === currentUser.name;\n          });\n\n          if (isUserTakeLike) {\n            // if yes remove his like\n            this.data.likes = this.data.likes.filter(function(item) {\n              return item !== currentUser.name;\n            });\n\n            this.alreadyLiked = false;\n\n            // and remove list tags from user lists_interests array\n            newListInterest = _.difference(currentUser.lists_interests, this.data.tags);\n          } else {\n            this.data.likes.push(currentUser.name);\n            this.alreadyLiked = true;\n\n            newListInterest = _.union(currentUser.lists_interests, this.data.tags);\n          }\n\n          // save to user updated lists interests\n          currentUser.lists_interests = newListInterest;\n\n          this.likes = this.data.likes.length;\n\n          // send data to server\n          ListsService.update({ id: this.listID }, { list: this.data });\n          UserService.update({}, { user: currentUser });\n        }\n      }\n\n      function addNewTask(validation) {\n\n        if (validation && allowSavingTask) {\n          allowSavingTask = false;\n\n          TaskService.save({ list: this.listID }, { text: this.taskText, addTo: self.taskAdd }, function (response) {\n\n            // check how user set save new task\n            if (self.taskAdd === 'bottom') {\n              self.data.tasks.push(response.task);\n            } else {\n              self.data.tasks.unshift(response.task);\n            }\n\n            self.taskText = null;\n            allowSavingTask = true;\n          });\n        }\n      }\n\n      function clearInput() {\n        this.taskText = null;\n      }\n\n      function closePopup() {\n        self.showInviteList = false;\n        self.showBackground = false;\n      }\n\n      function closePopupAndOverlay() {\n        this.showBackground = false;\n        this.showInviteList = false;\n        $rootScope.$emit(\"hideFogOverlay\");\n      }\n\n      function invitePeople() {\n        this.showInviteList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function openBackgroundPopup() {\n        this.showBackground = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      /**\n       * Check is this owner list who want remove\n       * If yes - remove list from DB\n       * Else - remove this user from list members\n       **/\n      function removeList() {\n        if (this.isOwner) {\n          ListsService.delete({ id: this.listID }, function () {\n            self.reload();\n          });\n        } else {\n          var newMembersArray = this.data.members.filter(function(item) {\n            return item.name !== currentUser.name;\n          });\n\n          this.data.members = newMembersArray;\n\n          ListsService.update({ id: self.listID }, { list: this.data }, function (response) {\n            self.isUserAlreadyInMembers = false;\n            self.reload();\n          });\n        }\n      }\n\n      function saveTextToTemp() {\n        if (this.isOwner) {\n          textBeforeEdit = this.data.title;\n          this.data.title = this.data.title.replace(/(<([^>]+)>)/ig, '');\n          textTemp = this.data.title;\n        }\n\n      }\n\n      function saveEditedTitle() {\n        // replacement needed, because when contenteditable element empty,\n        // browser automaticaly add br tag\n        // and I don't know this is bug or feature\n        // var editedText = this.data.title.replace(/<br>/, \"\");\n\n        if (textTemp && textTemp !== this.data.title) {\n          var result = tags.getTagsAndText(this.data.title);\n          this.data.title = result.text;\n          this.data.tags = result.hashTags;\n\n          ListsService.update({ id: this.listID }, { list: this.data });\n        } else {\n          this.data.title = textBeforeEdit;\n        }\n      }\n\n      function reloadTasks(listID) {\n        TaskService.query({ list: listID }, function (response) {\n          self.data.tasks = response.tasks;\n        });\n      }\n\n      function taskAddHandler() {\n        self.taskAdd = (self.taskAdd === 'bottom') ? 'top' : 'bottom';\n      }\n\n      function colorFilterHandler(events, data) {\n        self.colorFilter = data.color;\n      }\n\n      function taskVisibilityHandler() {\n        self.completedTask = (self.completedTask === 'visible') ? 'hidden' : 'visible';\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('userNavCtrl', UserNavCtrl);\n\n    UserNavCtrl.$inject = ['$rootScope', '$scope', '$state', '$window', 'UserService', 'userData'];\n    function UserNavCtrl($rootScope, $scope, $state, $window, UserService, userData) {\n      var navVm = this;\n      navVm.user = {};\n      navVm.logout = logout;\n      navVm.openDropdown = openDropdown;\n      navVm.changeAvatar = changeAvatar;\n      navVm.closeDropdown = closeDropdown;\n      navVm.openSettingsSidebar = openSettingsSidebar;\n      navVm.closeSettingsSidebar = closeSettingsSidebar;\n      navVm.username = $window.localStorage.user;\n      var listener = $rootScope.$on('reloadNavbar', load);\n\n      load();\n\n      function load() {\n        navVm.user = userData.getData();\n      }\n\n      function openDropdown(event) {\n        navVm.dropdownIsOpen = (navVm.dropdownIsOpen) ? false : true;\n      }\n\n      function closeDropdown() {\n        navVm.dropdownIsOpen = false;\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          alert('File format not support');\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            navVm.user.avatar = response.avatar;\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        delete $window.localStorage.user;\n        $state.go('home');\n      }\n\n      function openSettingsSidebar() {\n        navVm.showListSettings = true;\n      }\n\n      function closeSettingsSidebar() {\n        navVm.showListSettings = false;\n      }\n\n      $scope.$on('$destroy', listener);\n    };\n\n})();\n","/**\n * This directive controll invite new people to list\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listInvite\", listInviteDirective);\n\n    listInviteDirective.$inject = ['SearchService', 'ListsService'];\n    function listInviteDirective(SearchService, ListsService) {\n      var directive = {\n        restrict: \"E\",\n        require: '^list',\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-invite/list-invite.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs, listCtrl) {\n        var alreadyAddedUsers = [];\n        scope.owner = listCtrl.data.owner;\n        scope.stash = [];\n        scope.searchPeople = searchPeople;\n        scope.saveToStash = saveToStash;\n        scope.removeFromStash = removeFromStash;\n        scope.saveToMembers = saveToMembers;\n\n        scope.$watch(function() {\n          return listCtrl.showInviteList;\n        }, function(newVal) {\n          if (newVal === true) {\n            loadData();\n          } else {\n            cleanInputs();\n          }\n        });\n\n        function loadData() {\n          listCtrl.data.members.forEach(function(i) {\n            i.interests = i.interests.slice(0, 3);\n            scope.stash.push(i);\n            alreadyAddedUsers.push(i.name);\n          });\n\n          alreadyAddedUsers.push(listCtrl.data.owner.name);\n        }\n\n        function searchPeople() {\n          if (scope.members) {\n            SearchService.users({}, { name: scope.members, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToStash(user) {\n          scope.stash.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.users = null;\n        }\n\n        function removeFromStash(member) {\n          var indexAddedUsers;\n\n          scope.stash.forEach(function(i, index) {\n            if (scope.stash[index].name === member.name) {\n              scope.stash.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function saveToMembers() {\n          var list = listCtrl.data;\n\n          list.members = scope.stash;\n\n          ListsService.update({ id: listCtrl.listID }, { list: list }, function (response) {\n            cleanInputs();\n            listCtrl.showInviteList = true;\n            listCtrl.closePopupAndOverlay();\n          });\n        }\n\n        function cleanInputs() {\n          alreadyAddedUsers = [];\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.stash = [];\n          scope.users = [];\n        }\n      }\n    }\n})();\n","/**\n * This directive controll global list settings\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listSettings\", listSettingsDirective);\n\n    listSettingsDirective.$inject = ['UserService', 'userData'];\n    function listSettingsDirective(UserService, userData) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-settings/list-settings.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs) {\n\n        var currentUser = userData.getData();\n\n        // preload data\n        scope.color = currentUser.color_filter;\n        scope.completed = currentUser.completed;\n        scope.addTask = currentUser.add_task;\n\n        // func\n        scope.changeCompleted = changeCompleted;\n        scope.changeTaskAdd = changeTaskAdd;\n        scope.chooseColorFilter = chooseColorFilter;\n        scope.closeSidebar = closeSidebar;\n\n        function changeCompleted() {\n          currentUser.completed = scope.completed;\n          UserService.update({}, { user: currentUser }, function(response) {\n            scope.$parent.$broadcast('taskVisibility');\n          });\n        }\n\n        function changeTaskAdd() {\n          currentUser.add_task = scope.addTask;\n          UserService.update({}, { user: currentUser }, function(response) {\n            scope.$parent.$broadcast('taskAdd');\n          });\n        }\n\n        function chooseColorFilter(color) {\n          if (color === scope.color) {\n            color = 'none';\n          }\n\n          currentUser.color_filter = color;\n          UserService.update({}, { user: currentUser }, function(response) {\n            scope.color = color;\n            scope.$parent.$broadcast('taskColorFilter', { color: color });\n          });\n        }\n\n        function closeSidebar() {\n          scope.navVm.closeSettingsSidebar();\n        }\n\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .directive('onFinishRender', onFinishRender);\n\n    onFinishRender.$inject = [\"$timeout\"];\n    function onFinishRender($timeout) {\n      var directive = {\n        restrict: 'A',\n        link: linkFunc,\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        if (scope.$last === true) {\n          $timeout(function() {\n            scope.$eval(attrs.onFinishRender);\n          }, 1000);\n        }\n      }\n    }\n})();\n"],"sourceRoot":"/source/"}