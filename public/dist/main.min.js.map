{"version":3,"sources":["core/app-bootstrap.js","core/app.mdl.js","common/config/interceptors.cfg.js","common/config/router.cfg.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/lists.fctr.js","common/services/search.fctr.js","common/services/state-change-error.srv.js","common/services/state-change-success.srv.js","common/services/task.fctr.js","common/services/user-logged.srv.js","common/services/user.fctr.js","common/components/list/list.cmp.js","common/components/task/task.cmp.js","common/directives/click-enter/click-enter.drv.js","common/directives/click-outside/click-outside.drv.js","common/directives/contenteditable/contenteditable.drv.js","common/directives/custom-focus/custom-focus.drv.js","common/directives/file-reader/file-reader.drv.js","common/directives/fog/fog.drv.js","common/directives/list-background/list-background.drv.js","common/directives/list-invite/list-invite.drv.js","core/auth/auth-login/auth-login.ctrl.js","core/auth/auth-signup/auth-signup.ctrl.js","core/main/main-interests/main-interests.ctrl.js","core/main/main-lists/main-lists.ctrl.js","core/main-profile/profile-password/profile-password.ctrl.js","core/navbar/navbar-user/navbar-user.ctrl.js","core/main-profile/profile-account/profile-account.ctrl.js"],"names":["angular","element","document","ready","bootstrap","configure","$locationProvider","$stateProvider","$urlRouterProvider","$httpProvider","configRouter","configInterceptors","runBlock","stateChangeSuccess","stateChangeError","initialize","module","config","run","$inject","interceptors","push","constant","state","url","views","navbar","templateUrl","content","abstract","resolve","isUserLogged","content@","controller","controllerAs","profile","otherwise","html5Mode","userLogged","logged","authInterceptor","$rootScope","$q","$window","$injector","request","headers","localStorage","token","Authorization","responseError","response","status","get","go","reject","factory","AuthService","$resource","type","save","method","params","login","ListsService","data","id","user","query","isArray","update","SearchService","lists","users","$state","$on","event","toState","toParams","fromState","fromParams","error","username","stateNames","name","split","body","length","TaskService","list","task","this","deferred","defer","promise","service","UserService","avatar","getInterests","setInterests","listController","$scope","addNewTask","validation","allowSavingTask","listID","text","taskText","self","tasks","clearInput","closePopup","showInviteList","showBackground","closePopupAndOverlay","$emit","invitePeople","openBackgroundPopup","removeList","reload","saveEditedTitle","editedText","title","replace","divideTextAndTags","hashtags","hashTags","tags","concat","filter","item","indexOf","textBeforeEdit","saveTagToTemp","tag","tagTemp","saveEditedTags","index","extractedHashtags","twttr","txt","extractHashtags","splice","console","log","reloadTasks","twitterTags","forEach","_id","component","bindings","taskController","changeColor","className","target","hasClass","taskID","color","closeEditMode","editMode","closeDropdown","dropdownIsOpen","editTaskText","focusOn","openDropdown","currentTarget","setTaskCompleted","completed","saveEditedText","removeTask","$onInit","listCtrl","require","clickEnterDirective","linkFunc","scope","attrs","bind","which","$apply","$eval","clickEnter","directive","restrict","link","clickOutsideDirective","$document","$parse","fn","eventHandler","childElement","contains","on","off","contenteditableDirective","ngModel","read","$setViewValue","html","$render","$viewValue","customFocusDirective","$timeout","$watch","value","focus","trigger","fileReaderDirective","image","files","fogDirective","hideFogOverlay","showFogState","$parent","$broadcast","showFogOverlay","listenerShowOverlay","listenerHideOverlay","template","listBackgroundDirective","clickHandler","parent","children","removeClass","addClass","listInviteDirective","elem","loadData","members","i","interests","slice","stash","alreadyAddedUsers","owner","searchPeople","usedNames","responce","showSearchResult","saveToStash","removeFromStash","member","indexAddedUsers","saveToMembers","newVal","LoginPageCtrl","submitData","loginVm","submitted","userData","password","message","clearMessageError","SignupPageCtrl","signupVm","userName","email","userEmail","userPassword","InterestsPageCtrl","chooseInterest","vm","selectedInterest","colorsArray","shift","removeInterest","targetId","dataset","selectedId","querySelectorAll","saveInterests","arrayToSend","emptyInterests","ListsPageCtrl","$stateParams","activate","listsVm","createNewList","newListPopup","reloadList","callback","saveNewList","newListSubmitted","newListTitle","newListForm","$setPristine","PasswordPageCtrl","savePassword","errorConfirmPass","messageDone","newPass","newPassConfirm","oldPass","UserNavCtrl","load","navVm","avatarImage","changeAvatar","reader","localeCompare","FileReader","onload","result","readAsDataURL","logout","listener","AccountPageCtrl","bio","saveChanges"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, [\"llamaLists\"]);\n  });\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists', ['ui.router', 'ngMessages', 'ngResource', 'ngAnimate'])\n    .config(configure)\n    .run(runBlock);\n\n\n  configure.$inject = [\"$locationProvider\", \"$stateProvider\", \"$urlRouterProvider\", '$httpProvider', 'configRouter', 'configInterceptors'];\n  function configure($locationProvider, $stateProvider, $urlRouterProvider, $httpProvider, configRouter, configInterceptors) {\n    configRouter($locationProvider, $stateProvider, $urlRouterProvider);\n    configInterceptors($httpProvider);\n  }\n  /* set body id for css style */\n  runBlock.$inject = ['stateChangeSuccess', 'stateChangeError'];\n  function runBlock(stateChangeSuccess, stateChangeError) {\n    stateChangeSuccess.initialize();\n    stateChangeError.initialize();\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configInterceptors', configInterceptors);\n\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push(\"AuthInterceptor\");\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configRouter', configRouter);\n\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider) {\n      $stateProvider\n        .state(\"home\", {\n          url: \"/\",\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-auth/navbar-auth.tpl.html\"\n            },\n            \"content\": {\n              templateUrl: \"home/home.tpl.html\"\n            }\n          }\n        })\n        .state(\"auth\", {\n          url: \"\",\n          abstract: true,\n          resolve: {\n            isUserLogged: isUserLogged\n          }\n        })\n        .state(\"auth.login\", {\n          url: \"/login\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-login/auth-login.tpl.html\",\n              controller:   \"loginPageCtrl\",\n              controllerAs: \"loginVm\"\n            }\n          }\n        })\n        .state(\"auth.signup\", {\n          url: \"/signup\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-signup/auth-signup.tpl.html\",\n              controller:   \"signupPageCtrl\",\n              controllerAs: \"signupVm\"\n            }\n          }\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-user/navbar-user.tpl.html\",\n              controller:   \"userNavCtrl\",\n              controllerAs: \"navVm\"\n            }\n          }\n        })\n        .state(\"main.lists\", {\n          url: \"/:username\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-lists/main-lists.tpl.html\",\n              controller:   \"listsPageCtrl\",\n              controllerAs: \"listsVm\"\n            }\n          }\n        })\n        .state(\"main.interests\", {\n          url: \"/interests/\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-interests/main-interests.tpl.html\",\n              controller:   \"interestsPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile\", {\n          url: \"/profile\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main-profile/main-profile.tpl.html\"\n            }\n          }\n        })\n        .state(\"main.profile.account\", {\n          url: \"/account\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-account/profile-account.tpl.html\",\n              controller:   \"accountPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile.password\", {\n          url: \"/password\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-password/profile-password.tpl.html\",\n              controller:   \"passwordPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"404\", {\n          url: \"/404\",\n          views: {\n            \"content\": {\n              templateUrl: \"404/404.tpl.html\"\n            }\n          }\n        });\n\n      $urlRouterProvider.otherwise(\"/404\");\n      $locationProvider.html5Mode(true);\n    }\n\n    isUserLogged.$inject = ['userLogged'];\n    function isUserLogged(userLogged) {\n      return userLogged.logged();\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .factory('AuthInterceptor', authInterceptor);\n\n    authInterceptor.$inject = [\"$rootScope\", \"$q\", \"$window\", \"$injector\"];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = \"Bearer \" + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go(\"home\"); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go(\"404\");\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"AuthService\", AuthService);\n\n    AuthService.$inject = [\"$resource\"];\n    function AuthService($resource) {\n      return $resource(\"/auth/:type\", {\n        type: \"@type\"\n      },\n      {\n        save: {\n          method: \"POST\",\n          params: {\n            type: \"signup\"\n          }\n        },\n        login: {\n          method: \"POST\",\n          params: {\n            type: \"login\"\n          }\n        }\n      });\n    }\n})();\n","/**\n * This service controll lists request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListsService\", ListsService);\n\n    ListsService.$inject = [\"$resource\"];\n    function ListsService($resource) {\n      var data = $resource(\"/api/lists/:id:user\", { id: \"@id\", user: \"@user\"}, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll search request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('SearchService', SearchService);\n\n    SearchService.$inject = ['$resource'];\n    function SearchService($resource) {\n      var data = $resource('/api/search/:type', {},\n      {\n        lists: {\n          method: 'GET',\n          params: {\n            type: 'lists'\n          }\n        },\n        users: {\n          method: 'POST',\n          params: {\n            type: 'users'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeError', stateChangeError);\n\n    stateChangeError.$inject = ['$rootScope', '$state', '$window'];\n    function stateChangeError($rootScope, $state, $window) {\n      return {\n        initialize: function() {\n          $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n            if (error === 'isAlreadyLogged') {\n              $state.go('main.lists', { username: $window.localStorage.user });\n            }\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeSuccess', stateChangeSuccess);\n\n    stateChangeSuccess.$inject = ['$rootScope'];\n    function stateChangeSuccess($rootScope) {\n        return {\n          initialize: function() {\n            $rootScope.$on('$stateChangeSuccess', function(event, toState){\n              var stateNames = toState.name.split('.');\n              document.body.id = stateNames[stateNames.length - 1] + '-page';\n            });\n          }\n        }\n    }\n})();\n","/**\n * This service controll task request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"TaskService\", TaskService);\n\n    TaskService.$inject = [\"$resource\"];\n    function TaskService($resource) {\n      var data = $resource(\"/api/lists/:list/task/:task\", { list: \"@list\", task: \"@task\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userLogged\", userLogged);\n\n    userLogged.$inject = [\"$window\", \"$state\", \"$q\"];\n    function userLogged($window, $state, $q) {\n\n      this.logged = function() {\n        var deferred = $q.defer();\n        if($window.localStorage.token) {\n          deferred.reject(\"isAlreadyLogged\");\n        } else {\n          deferred.resolve();\n        }\n\n        return deferred.promise;\n      }\n    }\n})();\n","/**\n * This service controll user request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"UserService\", UserService);\n\n    UserService.$inject = [\"$resource\"];\n    function UserService($resource) {\n      var data = $resource(\"/api/user/:type\", { type: \"@type\" }, {\n        update:  {\n          method: \"PUT\"\n        },\n        avatar: {\n          method: \"PUT\",\n          params: {\n            type: \"avatar\"\n          }\n        },\n        getInterests: {\n          method: \"GET\",\n          params: {\n            type: \"interests\"\n          }\n        },\n        setInterests: {\n          method: \"PUT\",\n          params: {\n            type: \"interests\"\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This component controll list data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"list\", {\n      bindings: {\n        data: \"=\",\n        reload: \"&\"\n      },\n      controller: listController,\n      templateUrl: 'scripts/common/components/list/list.tpl.html'\n    });\n\n    listController.$inject = ['$scope', '$rootScope', 'ListsService', 'TaskService'];\n    function listController($scope, $rootScope, ListsService, TaskService) {\n      //variable\n      var allowSavingTask = true;\n      var tagTemp = '';\n      var textBeforeEdit = this.data.title;\n      var self = this;\n      this.listID = this.data._id;\n\n      // function\n      this.addNewTask = addNewTask;\n      this.clearInput = clearInput;\n      this.closePopupAndOverlay = closePopupAndOverlay;\n      this.invitePeople = invitePeople;\n      this.openBackgroundPopup = openBackgroundPopup;\n      this.saveEditedTitle = saveEditedTitle;\n      this.saveTagToTemp = saveTagToTemp;\n      this.saveEditedTags = saveEditedTags;\n      this.removeList = removeList;\n      this.reloadTasks = reloadTasks;\n      $scope.$on('closePopup', closePopup);\n\n      function addNewTask(validation) {\n\n        if (validation && allowSavingTask) {\n          allowSavingTask = false;\n\n          TaskService.save({ list: this.listID }, { text: this.taskText }, function (response) {\n            self.data.tasks = response.tasks;\n            self.taskText = null;\n            allowSavingTask = true;\n          });\n        }\n      }\n\n      function clearInput() {\n        this.taskText = null;\n      }\n\n      function closePopup() {\n        self.showInviteList = false;\n        self.showBackground = false;\n      }\n\n      function closePopupAndOverlay() {\n        this.showBackground = false;\n        this.showInviteList = false;\n        $rootScope.$emit(\"hideFogOverlay\");\n      }\n\n      function invitePeople() {\n        this.showInviteList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function openBackgroundPopup() {\n        this.showBackground = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function removeList() {\n        ListsService.delete({ id: this.listID }, function () {\n          self.reload();\n        });\n      }\n\n      function saveEditedTitle() {\n        // replacement needed, because when contenteditable element empty,\n        // browser automaticaly add br tag\n        // and I don't know this is bug or feature\n        var editedText = this.data.title.replace(/<br>/, \"\");\n\n        if (editedText) {\n          this.data.title = divideTextAndTags(editedText).text;\n          var hashtags = divideTextAndTags(editedText).hashTags;\n\n          // if we have are new tags\n          if (hashtags.length > 0) {\n            // check before concatenate two array, don't dublicating the new tags already existing values\n            this.data.tags = this.data.tags.concat(hashtags.filter(function(item) {\n              return self.data.tags.indexOf(item) < 0;\n            }));\n          }\n\n          ListsService.update({ id: this.listID }, { list: this.data }, function (response) {\n            textBeforeEdit = response.list.title;\n            // self.data.title = response.list.title;\n            // self.data.tags = response.list.tags;\n          });\n        } else {\n          this.data.title = textBeforeEdit;\n        }\n      }\n\n      function saveTagToTemp(tag) {\n        tagTemp = tag;\n      }\n\n      function saveEditedTags(tag) {\n        if (tag !== tagTemp) {\n          var index = this.data.tags.indexOf(tagTemp);\n          var extractedHashtags = twttr.txt.extractHashtags(tag);\n\n          // console.log(this.data.tags.indexOf('#' + extractedHashtags[0]))\n          if (extractedHashtags.length > 0) {\n            this.data.tags[index] = '#' + extractedHashtags[0];\n          } else {\n            this.data.tags.splice(index, 1);\n          }\n        }\n\n        ListsService.update({ id: this.listID }, { list: this.data }, function (response) {\n          self.data.tags = null;\n          self.data.tags = response.list.tags;\n          console.log(response.list.tags)\n        });\n      }\n\n      function reloadTasks(listID) {\n        TaskService.query({ list: listID }, function (response) {\n          self.data.tasks = response.tasks;\n        });\n      }\n\n      function divideTextAndTags(text) {\n        var hashTags = [];\n        var twitterTags = twttr.txt.extractHashtags(text);\n\n        twitterTags.forEach(function(item) {\n\n          // twitter extracted tags without hash, therefore add this symbol for them\n          if (hashTags.indexOf('#' + item) === -1) { // additional check on the tags already added\n            hashTags.push('#' + item);\n          }\n\n          // sorry i don't know how write regex and use two replace instead one(\n          text = text.replace('#' + item, '').replace(/\\s\\s+/g, ' ');\n        });\n\n        return {\n          text: text,\n          hashTags: hashTags\n        }\n      }\n    }\n})();\n","/**\n * This directive controll task data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"task\", {\n      bindings: {\n        data: \"=\"\n      },\n      require: {\n        listCtrl: '^list'\n      },\n      controller: taskController,\n      templateUrl: 'scripts/common/components/task/task.tpl.html'\n    });\n\n    taskController.$inject = ['TaskService'];\n    function taskController(TaskService) {\n      var listID;\n      var reloadTasks;\n      var textBeforeEdit;\n      var taskID = this.data._id;\n      var self = this;\n      this.dropdownIsOpen = false;\n\n      //func\n      this.changeColor = changeColor;\n      this.closeEditMode = closeEditMode;\n      this.closeDropdown = closeDropdown;\n      this.editTaskText = editTaskText;\n      this.openDropdown = openDropdown;\n      this.setTaskCompleted = setTaskCompleted;\n      this.saveEditedText = saveEditedText;\n      this.removeTask = removeTask;\n\n      this.$onInit = function() {\n        listID = this.listCtrl.listID;\n        reloadTasks = this.listCtrl.reloadTasks;\n      }\n\n\n      function changeColor(event) {\n        var className = event.target.className;\n        var target = angular.element(event.target);\n\n        if (!target.hasClass(\"task__color--active\")) {\n          className = className.replace(\"task__color \", \"\"); // remove unnecessary part of class name\n\n          TaskService.update({ list: listID, task: taskID }, { color: className }, function (response) {\n            self.data.color = className;\n          });\n        }\n      }\n\n      function closeEditMode() {\n        this.data.text = textBeforeEdit;\n        this.editMode = false;\n      }\n\n      function closeDropdown() {\n        this.dropdownIsOpen = false;\n      }\n\n      function editTaskText() {\n        textBeforeEdit = this.data.text;\n        this.editMode = true;\n        this.focusOn = true;\n        this.closeDropdown();\n      }\n\n      function openDropdown(event) {\n        if (event.currentTarget === event.target) {\n          this.dropdownIsOpen = (this.dropdownIsOpen) ? false : true;\n        }\n      }\n\n      function setTaskCompleted(event) {\n        if (this.editMode !== true) {\n          TaskService.update({ list: listID, task: taskID }, { completed: true }, function (response) {\n            self.data.completed = response.task.completed;\n          });\n        }\n      }\n\n      function saveEditedText() {\n        if (this.data.text) {\n          TaskService.update({ list: listID, task: taskID }, { text: this.data.text }, function (response) {\n            self.editMode = false;\n          });\n        } else {\n          this.closeEditMode();\n        }\n      }\n\n      function removeTask() {\n        TaskService.delete({ list: listID, task: taskID }, function (response) {\n          reloadTasks(listID);\n        });\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickEnter\", clickEnterDirective);\n\n    function clickEnterDirective() {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        element.bind(\"keypress\", function (event) {\n          if(event.which === 13) { // 13 is enter code on keyboard :)\n            scope.$apply(function (){\n              scope.$eval(attrs.clickEnter);\n            });\n          }\n        });\n      }\n    }\n})();\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","/**\n * This directive add custom ng-model directive to non-form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"contenteditable\", contenteditableDirective)\n\n    function contenteditableDirective() {\n      var directive = {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, ngModel) {\n        function read() {\n          ngModel.$setViewValue(element.html());\n        }\n\n        ngModel.$render = function() {\n          element.html(ngModel.$viewValue || \"\");\n        };\n\n        element.bind(\"blur keyup change\", function() {\n          scope.$apply(read);\n        });\n      }\n    }\n\n}());\n","/**\n * This directive setup focus to non form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"customFocus\", customFocusDirective)\n\n    customFocusDirective.$inject = [\"$timeout\"];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: \"A\",\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n          // element[0].focus();\n\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","/**\n * This directive controll fog(black-transparent background)\n * for all popup window\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fog\", fogDirective);\n\n    fogDirective.$inject = [\"$rootScope\"];\n    function fogDirective($rootScope) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        scope: {},\n        template: \"<div id='fog' ng-show='showFogState' ng-click='hideFogOverlay()'></div>\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var listenerShowOverlay = $rootScope.$on(\"showFogOverlay\", showFogOverlay);\n        var listenerHideOverlay = $rootScope.$on(\"hideFogOverlay\", hideFogOverlay);\n        scope.hideFogOverlay = hideFogOverlay;\n\n        /**\n         * remove rootscope listener\n         */\n        scope.$on('$destroy', listenerShowOverlay);\n        scope.$on('$destroy', listenerHideOverlay);\n\n        /**\n         * This function close any popup window\n         * And hide fog (or overlay)\n         */\n        function hideFogOverlay() {\n          scope.showFogState = false;\n          scope.$parent.$broadcast(\"closePopup\");\n        }\n\n        function showFogOverlay() {\n          scope.showFogState = true;\n        }\n      }\n    }\n})();\n","/**\n * This directive controll popup and change background for lists\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listBackground\", listBackgroundDirective);\n\n    listBackgroundDirective.$inject = ['ListsService']\n    function listBackgroundDirective(ListsService) {\n      var directive = {\n        restrict: \"A\",\n        require: '^list',\n        replace: true,\n        scope: {},\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, listCtrl) {\n        if (attrs.class === listCtrl.data.image) {\n          element.addClass('active-background');\n        }\n\n        element.bind('click', clickHandler);\n\n        function clickHandler() {\n          if (!element.hasClass('active-background')) {\n            listCtrl.data.image = attrs.class;\n            element.parent().children().removeClass('active-background'); // baaaaaaaadd code\n\n            ListsService.update({ id: listCtrl.listID }, { list: listCtrl.data }, function (response) {\n              element.addClass('active-background');\n            });\n          }\n        }\n      }\n    }\n})();\n","/**\n * This directive controll invite new people to list\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listInvite\", listInviteDirective);\n\n    listInviteDirective.$inject = ['SearchService', 'ListsService'];\n    function listInviteDirective(SearchService, ListsService) {\n      var directive = {\n        restrict: \"E\",\n        require: '^list',\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-invite/list-invite.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs, listCtrl) {\n        var alreadyAddedUsers = [];\n        scope.owner = listCtrl.data.owner;\n        scope.stash = [];\n        scope.searchPeople = searchPeople;\n        scope.saveToStash = saveToStash;\n        scope.removeFromStash = removeFromStash;\n        scope.saveToMembers = saveToMembers;\n\n        scope.$watch(function() {\n          return listCtrl.showInviteList;\n        }, function(newVal) {\n          if (newVal === true) {\n            loadData();\n          } else {\n            scope.stash = [];\n          }\n        });\n\n        function loadData() {\n          listCtrl.data.members.forEach(function(i) {\n            i.interests = i.interests.slice(0, 3);\n            scope.stash.push(i);\n            alreadyAddedUsers.push(i.name);\n          });\n          console.log(listCtrl.data.members)\n\n          alreadyAddedUsers.push(listCtrl.data.owner.name);\n        }\n\n        function searchPeople() {\n          if (scope.members) {\n            SearchService.users({}, { name: scope.members, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToStash(user) {\n          scope.stash.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.users = null;\n        }\n\n        function removeFromStash(member) {\n          var indexAddedUsers;\n\n          scope.stash.forEach(function(i, index) {\n            if (scope.stash[index].name === member.name) {\n              scope.stash.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function saveToMembers() {\n          var list = listCtrl.data;\n          list.members = scope.stash;\n\n          ListsService.update({ id: listCtrl.listID }, { list: list }, function (response) {\n            listCtrl.showInviteList = true;\n            listCtrl.closePopupAndOverlay();\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"loginPageCtrl\", LoginPageCtrl);\n\n  LoginPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n  function LoginPageCtrl($window, $state, AuthService) {\n    var loginVm = this;\n    loginVm.submitted;\n    loginVm.submitData = submitData;\n    loginVm.clearMessageError = clearMessageError;\n\n    function submitData(validation) {\n      loginVm.submitted = true;\n\n      if (validation) {\n        var userData = {\n          username: loginVm.username,\n          password: loginVm.password\n        };\n\n        AuthService.login({}, userData, function (response) {\n          $window.localStorage.token = response.token;\n          $window.localStorage.user = loginVm.username;\n          $state.go(\"main.lists\", { username: loginVm.username });\n        }, function (error) {\n          delete $window.localStorage.token;\n          loginVm.message = error.data.message;\n        });\n      }\n    }\n\n    function clearMessageError() {\n      loginVm.message = null;\n    }\n  }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"signupPageCtrl\", SignupPageCtrl);\n\n    SignupPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n    function SignupPageCtrl($window, $state, AuthService) {\n      var signupVm = this;\n\n      signupVm.submitted;\n      signupVm.message;\n      signupVm.submitData = submitData;\n      signupVm.clearMessageError = clearMessageError;\n\n      function submitData(validation) {\n        signupVm.submitted = true;\n\n        if (validation) {\n          var userData = {\n            username: signupVm.userName,\n            email:    signupVm.userEmail,\n            password: signupVm.userPassword\n          }\n\n          AuthService.save({}, userData, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = signupVm.userName;\n            $state.go(\"main.interests\");\n          }, function (error) {\n            delete $window.localStorage.token;\n            signupVm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        signupVm.message = null;\n      }\n    }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"interestsPageCtrl\", InterestsPageCtrl);\n\n    InterestsPageCtrl.$inject = [\"$timeout\", \"$window\", \"$state\", \"UserService\"];\n    function InterestsPageCtrl($timeout, $window, $state, UserService) {\n      var vm = this;\n      var i = 0;\n      var colorsArray = [\"red\", \"orange\", \"yellow\", \"green\", \"indigo\", \"violet\"];\n      var promiseTimeout;\n      vm.interests = [];\n      vm.selectedInterest = [];\n      vm.chooseInterest = chooseInterest;\n      vm.removeInterest = removeInterest;\n      vm.saveInterests = saveInterests;\n      vm.username = $window.localStorage.user; // send to ui-router\n      // delay is necessary to run the animation\n      UserService.getInterests(function (response) {\n        $timeout(function() {\n          vm.interests = response.interests;\n        }, 100);\n      });\n\n      /**\n       * This function set to target element some class,\n       * add to array of chosen interests - new interest\n       * and remove from array of colors - first color\n       * which is used in the array of chosen interests,\n       */\n      function chooseInterest(event, index) {\n        var target = angular.element(event.target);\n        if (i < 6) {\n          target.addClass(\"chosen-interest\");\n          vm.selectedInterest.push({ text: target.text(), color: colorsArray[0], id: index });\n          colorsArray.shift();\n          i++;\n        }\n      }\n\n      /**\n       * This function get data-id from target element\n       * Removes the necessary item from the array by index\n       * Find the element of interests by data and remove some class\n       * and push to the array of colors - color from target element\n       */\n      function removeInterest(event, index) {\n        var targetId = event.target.dataset.selectedId;\n        vm.selectedInterest.splice(index, 1);\n        angular.element(document.querySelectorAll(\"[data-id='\" + targetId + \"']\")).removeClass(\"chosen-interest\");\n        colorsArray.push(event.target.dataset.color)\n        i--;\n      }\n      // i know this code placing between fuck and shit\n\n      function saveInterests() {\n        var arrayToSend = [];\n\n        if (vm.selectedInterest.length > 0) {\n          vm.selectedInterest.forEach(function(item) {\n            arrayToSend.push(item.text);\n          });\n          UserService.setInterests({}, { interests: arrayToSend }, function (response) {\n            $state.go(\"main.lists\");\n          });\n        } else {\n\n          vm.emptyInterests = (vm.emptyInterests)\n            ? false\n            : true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"listsPageCtrl\", ListsPageCtrl);\n\n    ListsPageCtrl.$inject = [\"$scope\", \"$rootScope\", \"$stateParams\", \"$window\", \"ListsService\"];\n    function ListsPageCtrl($scope, $rootScope, $stateParams, $window, ListsService) {\n      var listsVm = this;\n      var username = $stateParams.username;\n      listsVm.newListPopup; // check open popup\n      listsVm.newListSubmitted; // check press submit button\n      listsVm.createNewList = createNewList;\n      listsVm.saveNewList = saveNewList;\n      listsVm.reloadList = reloadList;\n\n      // fog broadcast\n      $scope.$on('closePopup', closePopup);\n      // list broadcast\n      // $scope.$on('reloadLists', activate);\n\n      activate();\n\n      function activate() {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function createNewList() {\n        listsVm.newListPopup = true;\n        listsVm.focus = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function reloadList(callback) {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n\n          if (callback) {\n            callback();\n          }\n        });\n      }\n\n      function saveNewList(validation) {\n        listsVm.newListSubmitted = true;\n\n        if (validation) {\n\n          ListsService.save({title: listsVm.newListTitle}, function (response) {\n            reloadList(function() {\n              // end work with popup\n              $rootScope.$emit(\"hideFogOverlay\");\n              listsVm.newListTitle = null;\n              listsVm.newListForm.$setPristine();\n              listsVm.newListSubmitted = false;\n            });\n          });\n        }\n      }\n\n      function closePopup() {\n        listsVm.newListPopup = false;\n      }\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"passwordPageCtrl\", PasswordPageCtrl);\n\n    PasswordPageCtrl.$inject = [\"UserService\"];\n    function PasswordPageCtrl(UserService) {\n      var vm = this;\n\n      vm.savePassword = savePassword;\n\n      function savePassword(validation) {\n        vm.submitted = true;\n        vm.errorConfirmPass = null;\n        vm.message = null;\n        vm.messageDone = null;\n        var body = {};\n        if(validation) {\n          if (vm.newPass === vm.newPassConfirm) {\n            body = {\n              oldPass: vm.oldPass,\n              newPass: vm.newPassConfirm\n            }\n\n            UserService.save({}, body, function (response) {\n              vm.messageDone = response.message;\n            }, function (error) {\n              vm.message = error.data.message;\n            });\n          } else {\n            vm.errorConfirmPass = true;\n          }\n        }\n      }\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"userNavCtrl\", UserNavCtrl);\n\n    UserNavCtrl.$inject = [\"$rootScope\", \"$scope\", \"$state\", \"$window\", \"UserService\"];\n    function UserNavCtrl($rootScope, $scope, $state, $window, UserService) {\n      var navVm = this;\n      navVm.logout = logout;\n      navVm.openDropdown = openDropdown;\n      navVm.changeAvatar = changeAvatar;\n      navVm.closeDropdown = closeDropdown;\n      navVm.username = $window.localStorage.user;\n      var listener = $rootScope.$on(\"reloadNavbar\", load);\n\n      load();\n\n      function load() {\n        UserService.get({}, function (response) {\n          navVm.name = response.user.name;\n          navVm.avatarImage = response.user.avatar;\n        });\n      }\n\n      function openDropdown(event) {\n        navVm.dropdownIsOpen = (navVm.dropdownIsOpen) ? false : true;\n      }\n\n      function closeDropdown() {\n        navVm.dropdownIsOpen = false;\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare(\"image/jpeg\") !== 0 && image.type.localeCompare(\"image/png\") !== 0) {\n          console.log(\"error\")\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            navVm.avatarImage = response.avatar;\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        $state.go(\"home\");\n      }\n\n      $scope.$on('$destroy', listener);\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"accountPageCtrl\", AccountPageCtrl);\n\n    AccountPageCtrl.$inject = [\"$rootScope\", \"UserService\"];\n    function AccountPageCtrl($rootScope, UserService) {\n      var vm = this;\n      vm.saveChanges = saveChanges;\n      vm.changeAvatar = changeAvatar;\n      vm.clearMessageError = clearMessageError;\n\n      activate();\n\n      function activate() {\n        UserService.get(function (response) {\n          vm.avatarImage = response.user.avatar;\n          vm.name = response.user.name;\n          vm.email = response.user.email;\n          vm.bio = response.user.bio;\n        });\n      }\n\n      function saveChanges(validation) {\n        var body = {};\n\n        if (validation) {\n          body.name = vm.name;\n          body.email = vm.email;\n          body.bio = vm.bio;\n\n          vm.message = null;\n          vm.messageDone = null;\n          UserService.update({}, body, function (response) {\n            vm.messageDone = response.message;\n            $rootScope.$emit(\"reloadNavbar\");\n          }, function (error) {\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare(\"image/jpeg\") !== 0 && image.type.localeCompare(\"image/png\") !== 0) {\n          console.log(\"error\")\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.avatarImage = response.avatar;\n            $rootScope.$emit(\"reloadNavbar\");\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n\n    };\n\n})();\n"],"sourceRoot":"/source/"}