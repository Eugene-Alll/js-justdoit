{"version":3,"sources":["core/app-bootstrap.js","core/app.mdl.js","common/config/interceptors.cfg.js","common/config/router.cfg.js","common/filters/task-visibility.filter.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/interests.service.js","common/services/list-recommendation.factory.js","common/services/lists-filter.srv.js","common/services/lists.fctr.js","common/services/search.fctr.js","common/services/state-change-error.srv.js","common/services/state-change-success.srv.js","common/services/tags.srv.js","common/services/task.fctr.js","common/services/user-data.srv.js","common/services/user-logged.srv.js","common/services/user.fctr.js","core/auth/auth-login/auth-login.ctrl.js","core/auth/auth-signup/auth-signup.ctrl.js","core/main/main-interests/main-interests.ctrl.js","core/main/main-lists/main-lists.ctrl.js","core/main-profile/profile-account/profile-account.ctrl.js","core/main-profile/profile-password/profile-password.ctrl.js","core/navbar/navbar-user/navbar-user.ctrl.js","common/components/task/task.cmp.js","common/components/list/list.cmp.js","common/directives/contenteditable/contenteditable.drv.js","common/directives/custom-focus/custom-focus.drv.js","common/directives/file-reader/file-reader.drv.js","common/directives/fog/fog.drv.js","common/directives/click-enter/click-enter.drv.js","common/directives/click-outside/click-outside.drv.js","common/directives/list-settings/list-settings.drv.js","common/directives/list-invite/list-invite.drv.js","common/directives/on-finish-render/on-finish-render.js","common/directives/new-list/new-list.drv.js","common/directives/list-background/list-background.drv.js"],"names":["angular","element","document","ready","bootstrap","configure","$locationProvider","$stateProvider","$urlRouterProvider","$httpProvider","configRouter","configInterceptors","runBlock","stateChangeSuccess","stateChangeError","initialize","module","config","run","$inject","interceptors","push","constant","state","url","views","navbar","templateUrl","content","abstract","resolve","isUserLogged","content@","controller","controllerAs","loadUserData","profile","otherwise","html5Mode","userLogged","logged","$window","UserService","userData","currentUser","localStorage","user","get","name","response","setData","taskVisibility","input","color","completed","filteredElements","filter","item","authInterceptor","$rootScope","$q","$injector","request","headers","token","Authorization","responseError","status","go","reject","factory","AuthService","$resource","type","save","method","params","login","InterestsService","ListRecommendationService","data","listsFilter","this","isRecommendation","value","setIsOwnFilter","isOwnFilter","getIsOwnFilter","service","ListsService","id","query","isArray","update","SearchService","lists","users","$state","$on","event","toState","toParams","fromState","fromParams","error","username","stateNames","split","body","length","tags","getTagsAndText","text","hashTags","twitterTags","twttr","txt","extractHashtags","forEach","indexOf","replace","TaskService","list","task","$stateParams","getData","isOwnerPage","isOwnerList","listOwner","getCurrentUser","deferred","defer","promise","avatar","LoginPageCtrl","submitData","validation","loginVm","submitted","password","message","clearMessageError","SignupPageCtrl","signupVm","userName","email","userEmail","userPassword","InterestsPageCtrl","$timeout","chooseInterest","index","target","i","addClass","vm","selectedInterest","colorsArray","shift","removeInterest","targetId","dataset","selectedId","splice","querySelectorAll","removeClass","saveInterests","interestsArray","interests","emptyInterests","ListsPageCtrl","$scope","activate","listsVm","isOwner","getRecommendationLists","createNewList","showNewList","$emit","makeGlobalSearch","console","log","search","title","reloadList","selectSort","owner","closePopup","newListSubmitted","AccountPageCtrl","saveChanges","messageDone","changeAvatar","image","reader","localeCompare","warn","FileReader","onload","result","avatarImage","readAsDataURL","PasswordPageCtrl","savePassword","errorConfirmPass","newPass","newPassConfirm","oldPass","UserNavCtrl","load","navVm","openDropdown","dropdownIsOpen","closeDropdown","alert","logout","openSettingsSidebar","showListSettings","listener","taskController","changeColor","listID","taskID","closeEditMode","textBeforeEdit","editMode","editTaskText","focusOn","currentTarget","setTaskCompleted","saveEditedText","self","removeTask","reloadTasks","_id","$onInit","listCtrl","component","bindings","require","listController","addCurrentUserToMembers","isUserAlreadyInMembers","members","addLike","newListInterest","isUserTakeLike","likes","some","alreadyLiked","_","difference","lists_interests","union","addNewTask","allowSavingTask","taskText","tasks","clearInput","showInviteList","showBackground","closePopupAndOverlay","invitePeople","openBackgroundPopup","removeList","reload","newMembersArray","saveTextToTemp","textTemp","saveEditedTitle","colorFilterHandler","events","colorFilter","taskVisibilityHandler","completedTask","color_filter","siteUrl","location","href","twitterText","$watch","contenteditableDirective","linkFunc","scope","attrs","ngModel","read","$setViewValue","html","$render","$viewValue","bind","$apply","directive","restrict","link","customFocusDirective","focus","trigger","fileReaderDirective","$parse","eventHandler","fn","files","fogDirective","hideFogOverlay","showFogState","$parent","$broadcast","showFogOverlay","listenerShowOverlay","listenerHideOverlay","template","clickEnterDirective","which","$eval","clickEnter","clickOutsideDirective","$document","childElement","contains","on","off","listSettingsDirective","elem","changeCompleted","chooseColorFilter","addTask","add_task","listInviteDirective","loadData","slice","stash","alreadyAddedUsers","searchPeople","usedNames","responce","showSearchResult","saveToStash","removeFromStash","member","indexAddedUsers","saveToMembers","cleanInputs","newVal","onFinishRender","$last","newListDirective","loadCurrentUser","currentUserData","saveNewList","newListTitle","searchUser","removeFromMembers","nameMember","newListForm","$setPristine","show","listBackgroundDirective","clickHandler","hasClass","parent","children"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, [\"llamaLists\"]);\n  });\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists', ['ui.router', 'ngMessages', 'ngResource', 'ngAnimate'])\n    .config(configure)\n    .run(runBlock);\n\n\n  configure.$inject = [\"$locationProvider\", \"$stateProvider\", \"$urlRouterProvider\", '$httpProvider', 'configRouter', 'configInterceptors'];\n  function configure($locationProvider, $stateProvider, $urlRouterProvider, $httpProvider, configRouter, configInterceptors) {\n    configRouter($locationProvider, $stateProvider, $urlRouterProvider);\n    configInterceptors($httpProvider);\n  }\n  /* set body id for css style */\n  runBlock.$inject = ['stateChangeSuccess', 'stateChangeError'];\n  function runBlock(stateChangeSuccess, stateChangeError) {\n    stateChangeSuccess.initialize();\n    stateChangeError.initialize();\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configInterceptors', configInterceptors);\n\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push(\"AuthInterceptor\");\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configRouter', configRouter);\n\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider) {\n      $stateProvider\n        .state(\"home\", {\n          url: \"/\",\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-auth/navbar-auth.tpl.html\"\n            },\n            \"content\": {\n              templateUrl: \"home/home.tpl.html\"\n            }\n          }\n        })\n        .state(\"auth\", {\n          url: \"\",\n          abstract: true,\n          resolve: {\n            isUserLogged: isUserLogged\n          }\n        })\n        .state(\"auth.login\", {\n          url: \"/login\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-login/auth-login.tpl.html\",\n              controller:   \"loginPageCtrl\",\n              controllerAs: \"loginVm\"\n            }\n          }\n        })\n        .state(\"auth.signup\", {\n          url: \"/signup\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-signup/auth-signup.tpl.html\",\n              controller:   \"signupPageCtrl\",\n              controllerAs: \"signupVm\"\n            }\n          }\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-user/navbar-user.tpl.html\",\n              controller:   \"userNavCtrl\",\n              controllerAs: \"navVm\"\n            }\n          },\n          resolve: {\n            loadUserData: loadUserData\n          }\n        })\n        .state(\"main.lists\", {\n          url: \"/:username\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-lists/main-lists.tpl.html\",\n              controller:   \"listsPageCtrl\",\n              controllerAs: \"listsVm\"\n            }\n          }\n        })\n        .state(\"main.interests\", {\n          url: \"/interests/\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-interests/main-interests.tpl.html\",\n              controller:   \"interestsPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile\", {\n          url: \"/profile\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main-profile/main-profile.tpl.html\"\n            }\n          }\n        })\n        .state(\"main.profile.account\", {\n          url: \"/account\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-account/profile-account.tpl.html\",\n              controller:   \"accountPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile.password\", {\n          url: \"/password\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-password/profile-password.tpl.html\",\n              controller:   \"passwordPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"404\", {\n          url: \"/404/\",\n          views: {\n            \"content\": {\n              templateUrl: \"404/404.tpl.html\"\n            }\n          }\n        });\n\n      $urlRouterProvider.otherwise(\"/404\");\n      $locationProvider.html5Mode(true);\n    }\n\n    isUserLogged.$inject = ['userLogged'];\n    function isUserLogged(userLogged) {\n      return userLogged.logged();\n    }\n\n    loadUserData.$inject = ['$window', 'UserService', 'userData'];\n    function loadUserData($window, UserService, userData) {\n      var currentUser = $window.localStorage.user;\n\n      return UserService.get({ name: currentUser }, function(response) {\n        return userData.setData(response.user);\n      });\n    }\n})();\n","(function() {\n  'use script';\n\n  angular\n    .module('llamaLists')\n    .filter('taskVisibility', taskVisibility);\n\n    function taskVisibility() {\n      return function(input, color, completed) {\n        if (color === 'none' && completed === 'visible') {\n          return input;\n        } else {\n          var filteredElements = input.filter(function(item) {\n            // very bad triple condition, but another solution use two filters that's more baddest!\n            if (completed === 'hidden') {\n              if (color !== 'none') {\n                return item.completed === false && item.color === color;\n              } else {\n                return item.completed === false;\n              }\n            } else {\n              return item.color === color;\n            }\n          });\n\n          return filteredElements;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .factory('AuthInterceptor', authInterceptor);\n\n    authInterceptor.$inject = [\"$rootScope\", \"$q\", \"$window\", \"$injector\"];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = \"Bearer \" + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n\n            // remove just in case\n            delete $window.localStorage.token;\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go(\"auth.signup\"); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go(\"404\");\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"AuthService\", AuthService);\n\n    AuthService.$inject = [\"$resource\"];\n    function AuthService($resource) {\n      return $resource(\"/auth/:type\", {\n        type: \"@type\"\n      },\n      {\n        save: {\n          method: \"POST\",\n          params: {\n            type: \"signup\"\n          }\n        },\n        login: {\n          method: \"POST\",\n          params: {\n            type: \"login\"\n          }\n        }\n      });\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('InterestsService', InterestsService);\n\n    InterestsService.$inject = ['$resource'];\n    function InterestsService($resource) {\n      return $resource('/api/data/interests');\n    }\n})();\n","/**\n * This service\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListRecommendationService\", ListRecommendationService);\n\n    ListRecommendationService.$inject = ['$resource'];\n    function ListRecommendationService($resource) {\n\n      var data = $resource(\"/api/data/recommendation\");\n\n      return data;\n    }\n})();\n","/**\n * This service need for hiding some element if filtering lists\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"listsFilter\", listsFilter);\n\n    function listsFilter() {\n\n      this.isRecommendation = function(value) {\n        if (typeof value !== 'undefined') {\n          this.value = value;\n        }\n        return this.value;\n      }\n\n      this.setIsOwnFilter = function(type) {\n        this.isOwnFilter = type;\n      }\n\n      this.getIsOwnFilter = function() {\n        return this.isOwnFilter;\n      }\n    }\n})();\n","/**\n * This service controll lists request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListsService\", ListsService);\n\n    ListsService.$inject = [\"$resource\"];\n    function ListsService($resource) {\n      var data = $resource(\"/api/lists/:id:user\", { id: \"@id\", user: \"@user\"}, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll search request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('SearchService', SearchService);\n\n    SearchService.$inject = ['$resource'];\n    function SearchService($resource) {\n      var data = $resource('/api/search/:type', {},\n      {\n        lists: {\n          method: 'POST',\n          params: {\n            type: 'lists'\n          }\n        },\n        users: {\n          method: 'POST',\n          params: {\n            type: 'users'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeError', stateChangeError);\n\n    stateChangeError.$inject = ['$rootScope', '$state', '$window'];\n    function stateChangeError($rootScope, $state, $window) {\n      return {\n        initialize: function() {\n          $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n            if (error === 'isAlreadyLogged') {\n              $state.go('main.lists', { username: $window.localStorage.user });\n            }\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeSuccess', stateChangeSuccess);\n\n    stateChangeSuccess.$inject = ['$rootScope'];\n    function stateChangeSuccess($rootScope) {\n        return {\n          initialize: function() {\n            $rootScope.$on('$stateChangeSuccess', function(event, toState){\n              var stateNames = toState.name.split('.');\n              document.body.id = stateNames[stateNames.length - 1] + '-page';\n            });\n          }\n        }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"tags\", tags);\n\n    function tags() {\n\n      this.getTagsAndText = function(text) {\n        var hashTags = [];\n        var twitterTags = twttr.txt.extractHashtags(text);\n\n        twitterTags.forEach(function(item) {\n\n          // twitter extracted tags without hash, therefore add this symbol for them\n          if (hashTags.indexOf(item) === -1) { // additional check on the tags already added\n            hashTags.push(item);\n          }\n\n          if (text.indexOf('<span>#' + item + '</span>') === -1) {\n            text = text.replace('#' + item, '<span>#' + item + '</span>');\n          }\n\n          // text = text.replace(/(^|\\s)#ama(\\s|$)/, '<span>#' + item + '</span>'); // maybe work replace word\n          // text = text.replace('#' + item, '<span>#' + item + '</span>').replace(/\\s\\s+/g, ' '); // replace spaces\n        });\n\n        return {\n          text: text,\n          hashTags: hashTags\n        }\n      }\n    }\n})();\n","/**\n * This service controll task request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"TaskService\", TaskService);\n\n    TaskService.$inject = [\"$resource\"];\n    function TaskService($resource) {\n      var data = $resource(\"/api/lists/:list/task/:task\", { list: \"@list\", task: \"@task\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll all user data (like a avatar, name, interests)\n * And also check the logged user placing on your own page\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userData\", userData);\n\n    userData.$inject = ['$window', '$stateParams'];\n    function userData($window, $stateParams) {\n\n      this.getData = function() {\n        return this.userData;\n      }\n\n      this.setData = function(user) {\n        this.userData = user;\n      }\n\n      this.isOwnerPage = function() {\n        if ($window.localStorage.user !== $stateParams.username) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      this.isOwnerList = function(listOwner) {\n        if ($window.localStorage.user !== listOwner) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      this.getCurrentUser = function() {\n        return $window.localStorage.user;\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userLogged\", userLogged);\n\n    userLogged.$inject = [\"$window\", \"$state\", \"$q\"];\n    function userLogged($window, $state, $q) {\n\n      this.logged = function() {\n        var deferred = $q.defer();\n        if ($window.localStorage.token) {\n          deferred.reject(\"isAlreadyLogged\");\n        } else {\n          deferred.resolve();\n        }\n\n        return deferred.promise;\n      }\n    }\n})();\n","/**\n * This service controll user request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('UserService', UserService);\n\n    UserService.$inject = ['$resource'];\n    function UserService($resource) {\n\n      var data = $resource('/api/user/:name:type', { name: '@name', type: '@type' }, {\n        update:  {\n          method: 'PUT'\n        },\n        avatar: {\n          method: 'PUT',\n          params: {\n            type: 'avatar'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"loginPageCtrl\", LoginPageCtrl);\n\n  LoginPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\", 'UserService', 'userData'];\n  function LoginPageCtrl($window, $state, AuthService, UserService, userData) {\n    var loginVm = this;\n    loginVm.submitted;\n    loginVm.submitData = submitData;\n    loginVm.clearMessageError = clearMessageError;\n\n    function submitData(validation) {\n      loginVm.submitted = true;\n\n      if (validation) {\n        var data = {\n          username: loginVm.username,\n          password: loginVm.password\n        };\n\n        AuthService.login({}, data, function (response) {\n          $window.localStorage.token = response.token;\n          $window.localStorage.user = loginVm.username;\n\n          // reload user data because if user make log out and after again log in\n          // angular not update user data\n          UserService.get({ name: $window.localStorage.user }, function(response) {\n            userData.setData(response.user);\n            $state.go(\"main.lists\", { username: loginVm.username });\n          });\n        }, function (error) {\n          delete $window.localStorage.token;\n          loginVm.message = error.data.message;\n        });\n      }\n    }\n\n    function clearMessageError() {\n      loginVm.message = null;\n    }\n  }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"signupPageCtrl\", SignupPageCtrl);\n\n    SignupPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\", 'UserService', 'userData'];\n    function SignupPageCtrl($window, $state, AuthService, UserService, userData) {\n      var signupVm = this;\n\n      signupVm.submitted;\n      signupVm.message;\n      signupVm.submitData = submitData;\n      signupVm.clearMessageError = clearMessageError;\n\n      function submitData(validation) {\n        signupVm.submitted = true;\n\n        if (validation) {\n          var data = {\n            username: signupVm.userName,\n            email:    signupVm.userEmail,\n            password: signupVm.userPassword\n          }\n\n          AuthService.save({}, data, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = signupVm.userName;\n\n\n            // reload user data because if user make log out and after again log in\n            // angular not update user data\n            UserService.get({ name: $window.localStorage.user }, function(response) {\n              userData.setData(response.user);\n              $state.go(\"main.interests\");\n            });\n          }, function (error) {\n            delete $window.localStorage.token;\n            signupVm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        signupVm.message = null;\n      }\n    }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"interestsPageCtrl\", InterestsPageCtrl);\n\n    InterestsPageCtrl.$inject = [\"$timeout\", \"$window\", \"$state\", \"UserService\", 'userData', 'InterestsService'];\n    function InterestsPageCtrl($timeout, $window, $state, UserService, userData, InterestsService) {\n      var vm = this;\n      var i = 0;\n      var colorsArray = [\"red\", \"orange\", \"yellow\", \"green\", \"indigo\", \"violet\"];\n      var promiseTimeout;\n      vm.interests = [];\n      vm.selectedInterest = [];\n      vm.chooseInterest = chooseInterest;\n      vm.removeInterest = removeInterest;\n      vm.saveInterests = saveInterests;\n      vm.username = $window.localStorage.user; // send to ui-router\n      // delay is necessary to run the animation\n      InterestsService.get(function (response) {\n        $timeout(function() {\n          vm.interests = response.interests;\n        }, 100);\n      });\n\n      /**\n       * This function set to target element some class,\n       * add to array of chosen interests - new interest\n       * and remove from array of colors - first color\n       * which is used in the array of chosen interests,\n       */\n      function chooseInterest(event, index) {\n        var target = angular.element(event.target);\n        if (i < 6) {\n          target.addClass(\"chosen-interest\");\n          vm.selectedInterest.push({ text: target.text(), color: colorsArray[0], id: index });\n          colorsArray.shift();\n          i++;\n        }\n      }\n\n      /**\n       * This function get data-id from target element\n       * Removes the necessary item from the array by index\n       * Find the element of interests by data and remove some class\n       * and push to the array of colors - color from target element\n       */\n      function removeInterest(event, index) {\n        var targetId = event.target.dataset.selectedId;\n        vm.selectedInterest.splice(index, 1);\n        angular.element(document.querySelectorAll(\"[data-id='\" + targetId + \"']\")).removeClass(\"chosen-interest\");\n        colorsArray.push(event.target.dataset.color)\n        i--;\n      }\n      // i know this code placing between fuck and shit\n\n      function saveInterests() {\n        var interestsArray = [];\n\n        if (vm.selectedInterest.length > 0) {\n          vm.selectedInterest.forEach(function(item) {\n            interestsArray.push(item.text);\n          });\n\n          var user = userData.getData();\n          user.interests = interestsArray;\n\n          UserService.update({}, { user: user }, function (response) {\n            $state.go(\"main.lists\", { username: vm.username });\n          });\n        } else {\n\n          vm.emptyInterests = (vm.emptyInterests)\n            ? false\n            : true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"listsPageCtrl\", ListsPageCtrl);\n\n    ListsPageCtrl.$inject = [\"$scope\", \"$rootScope\", \"$stateParams\", \"ListsService\", 'UserService', 'userData', 'listsFilter', 'SearchService', 'ListRecommendationService'];\n    function ListsPageCtrl($scope, $rootScope, $stateParams, ListsService, UserService, userData, listsFilter, SearchService, ListRecommendationService) {\n      var listsVm = this;\n      var username = $stateParams.username;\n      var isRecommended;\n\n      listsVm.showNewList; // check open popup\n      listsVm.newListSubmitted; // check press submit button\n      listsVm.createNewList = createNewList;\n      listsVm.makeGlobalSearch = makeGlobalSearch;\n      listsVm.selectSort = selectSort;\n      listsVm.reloadList = reloadList;\n      listsVm.isOwner = userData.isOwnerPage();\n\n      // fog broadcast\n      $scope.$on('closePopup', closePopup);\n\n      activate();\n\n      function activate() {\n        // if we work with page of another user\n        if (listsVm.isOwner !== true) {\n          // load his data\n          UserService.get({ name: username }, function (response) {\n            listsVm.user = response.user;\n          });\n        }\n\n        // get all lists of user\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function getRecommendationLists() {\n        ListRecommendationService.get(function(response) {\n          listsVm.lists = response.lists;\n          listsFilter.isRecommendation(true);\n        });\n      }\n\n\n      function masonry() {\n        // var elem = document.querySelector('.lists-wrapper');\n        // var msnry = new Masonry( elem, {\n        //   // options\n        //   itemSelector: '.col-sm-4',\n        //   percentPosition: true\n        // });\n      }\n\n      function createNewList() {\n        listsVm.showNewList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function makeGlobalSearch() {\n        console.log(listsVm.search.title)\n        SearchService.lists({ query: listsVm.search.title }, function(response) {\n          // listsVm.lists = response.lists;\n          console.log(response.lists)\n\n        });\n      }\n\n      function reloadList() {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function selectSort(type) {\n        listsVm.filter = {\n          owner: {}\n        };\n\n        if (listsFilter.isRecommendation() && type !== 'recommended') {\n          activate();\n          listsFilter.isRecommendation(false);\n        }\n\n        switch(type) {\n          case 'all': {\n            // listsVm.filter.owner.name = '';\n            listsFilter.setIsOwnFilter(false);\n            break;\n          }\n          case 'own': {\n            listsVm.filter.owner.name = username;\n            listsFilter.setIsOwnFilter(true);\n            break;\n          }\n          case 'inbox': {\n            listsVm.filter.owner.name = '!' + username;\n            listsFilter.setIsOwnFilter(false);\n            break;\n          }\n          case 'recommended': {\n            delete listsVm.filter.owner;\n            getRecommendationLists();\n            listsFilter.setIsOwnFilter(false);\n          }\n        }\n      }\n\n      function closePopup() {\n        listsVm.showNewList = false;\n      }\n    };\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('accountPageCtrl', AccountPageCtrl);\n\n    AccountPageCtrl.$inject = ['$window', '$rootScope', 'UserService', 'userData'];\n    function AccountPageCtrl($window, $rootScope, UserService, userData) {\n      var vm = this;\n      vm.saveChanges = saveChanges;\n      vm.changeAvatar = changeAvatar;\n      vm.clearMessageError = clearMessageError;\n\n      activate();\n\n      function activate() {\n        vm.user = userData.getData();\n      }\n\n      function saveChanges(validation) {\n\n        if (validation) {\n          vm.message = null;\n          vm.messageDone = null;\n          UserService.update({}, { user: vm.user }, function (response) {\n            vm.messageDone = response.message;\n            $rootScope.$emit('reloadNavbar');\n          }, function (error) {\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          console.warn('error')\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.avatarImage = response.avatar;\n            $rootScope.$emit('reloadNavbar');\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"passwordPageCtrl\", PasswordPageCtrl);\n\n    PasswordPageCtrl.$inject = [\"UserService\"];\n    function PasswordPageCtrl(UserService) {\n      var vm = this;\n\n      vm.savePassword = savePassword;\n\n      function savePassword(validation) {\n        vm.submitted = true;\n        vm.errorConfirmPass = null;\n        vm.message = null;\n        vm.messageDone = null;\n        var body = {};\n        if(validation) {\n          if (vm.newPass === vm.newPassConfirm) {\n            body = {\n              oldPass: vm.oldPass,\n              newPass: vm.newPassConfirm\n            }\n\n            UserService.save({}, body, function (response) {\n              vm.messageDone = response.message;\n            }, function (error) {\n              vm.message = error.data.message;\n            });\n          } else {\n            vm.errorConfirmPass = true;\n          }\n        }\n      }\n    };\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('userNavCtrl', UserNavCtrl);\n\n    UserNavCtrl.$inject = ['$rootScope', '$scope', '$state', '$window', 'UserService', 'userData'];\n    function UserNavCtrl($rootScope, $scope, $state, $window, UserService, userData) {\n      var navVm = this;\n      navVm.user = {};\n      navVm.logout = logout;\n      navVm.openDropdown = openDropdown;\n      navVm.changeAvatar = changeAvatar;\n      navVm.closeDropdown = closeDropdown;\n      navVm.openSettingsSidebar = openSettingsSidebar;\n      navVm.username = $window.localStorage.user;\n      var listener = $rootScope.$on('reloadNavbar', load);\n\n      load();\n\n      function load() {\n        navVm.user = userData.getData();\n      }\n\n      function openDropdown(event) {\n        navVm.dropdownIsOpen = (navVm.dropdownIsOpen) ? false : true;\n      }\n\n      function closeDropdown() {\n        navVm.dropdownIsOpen = false;\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          alert('File format not support');\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            navVm.user.avatar = response.avatar;\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        delete $window.localStorage.user;\n        $state.go('home');\n      }\n\n      function openSettingsSidebar() {\n        navVm.showListSettings = true;\n      }\n\n      $scope.$on('$destroy', listener);\n    };\n\n})();\n","/**\n * This directive controll task data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"task\", {\n      bindings: {\n        data: \"=\"\n      },\n      require: {\n        listCtrl: '^list'\n      },\n      controller: taskController,\n      templateUrl: 'scripts/common/components/task/task.tpl.html'\n    });\n\n    taskController.$inject = ['TaskService'];\n    function taskController(TaskService) {\n      var listID;\n      var reloadTasks;\n      var textBeforeEdit;\n      var taskID = this.data._id;\n      var self = this;\n      this.dropdownIsOpen = false;\n\n      //func\n      this.changeColor = changeColor;\n      this.closeEditMode = closeEditMode;\n      this.closeDropdown = closeDropdown;\n      this.editTaskText = editTaskText;\n      this.openDropdown = openDropdown;\n      this.setTaskCompleted = setTaskCompleted;\n      this.saveEditedText = saveEditedText;\n      this.removeTask = removeTask;\n\n      this.$onInit = function() {\n        listID = this.listCtrl.listID;\n        reloadTasks = this.listCtrl.reloadTasks;\n        this.isOwner = this.listCtrl.isOwner;\n      }\n\n\n      function changeColor(color) {\n        if (color !== this.data.color) {\n          this.data.color = color;\n          TaskService.update({ list: listID, task: taskID }, { task: this.data });\n        }\n      }\n\n      function closeEditMode() {\n        this.data.text = textBeforeEdit;\n        this.editMode = false;\n      }\n\n      function closeDropdown() {\n        this.dropdownIsOpen = false;\n      }\n\n      function editTaskText() {\n        textBeforeEdit = this.data.text;\n        this.editMode = true;\n        this.focusOn = true;\n        this.closeDropdown();\n      }\n\n      function openDropdown(event) {\n        if (event.currentTarget === event.target) {\n          this.dropdownIsOpen = (this.dropdownIsOpen) ? false : true;\n        }\n      }\n\n      function setTaskCompleted(event) {\n        if (this.editMode !== true && this.isOwner) {\n          this.data.completed = (this.data.completed) ? false : true;\n          TaskService.update({ list: listID, task: taskID }, { task: this.data });\n        }\n      }\n\n      function saveEditedText() {\n        if (this.data.text) {\n          TaskService.update({ list: listID, task: taskID }, { task: this.data }, function (response) {\n            self.editMode = false;\n          });\n        } else {\n          this.closeEditMode();\n        }\n      }\n\n      function removeTask() {\n        TaskService.delete({ list: listID, task: taskID }, function (response) {\n          reloadTasks(listID);\n        });\n      }\n    }\n})();\n","/**\n * This component controll list data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"list\", {\n      bindings: {\n        data: \"=\",\n        reload: \"&\"\n      },\n      controller: listController,\n      templateUrl: 'scripts/common/components/list/list.tpl.html'\n    });\n\n    listController.$inject = ['$scope', '$rootScope', 'ListsService', 'TaskService', 'listsFilter', 'userData', 'UserService', 'tags'];\n    function listController($scope, $rootScope, ListsService, TaskService, listsFilter, userData, UserService, tags) {\n      //variable\n      var allowSavingTask = true;\n      var textBeforeEdit = '';\n      var textTemp = '';\n      var self = this;\n      var currentUser = userData.getData();\n\n      this.completedTask = currentUser.completed; // show or hide completed tasks\n      this.colorFilter = currentUser.color_filter; // filter tasks on color\n      this.listID = this.data._id;\n      this.siteUrl = document.location.href;\n      this.twitterText = 'I create a new to-do list at page ' + this.siteUrl;\n      this.isRecommendation = listsFilter.isRecommendation();\n\n      $scope.$on('taskColorFilter', colorFilterHandler);\n      $scope.$on('taskVisibility', taskVisibilityHandler);\n\n      // check that user on it's own page\n      this.isOwnerPage = userData.isOwnerPage();\n\n      // check that user is list owner\n      this.isOwner = userData.isOwnerList(this.data.owner.name);\n\n      // count likes\n      this.likes = this.data.likes.length;\n\n      // this watcher hide avatar on lists if user choose sorting by his own lists\n      $scope.$watch(function() {\n        return listsFilter.getIsOwnFilter();\n      }, function() {\n        self.isOwnFilter = listsFilter.getIsOwnFilter();\n      });\n\n      /**\n       * On init add class to all already liked lists\n       * And class to lists, that were already shared to current users\n       **/\n      this.$onInit = function() {\n        this.alreadyLiked = this.data.likes.some(function(item) {\n          return item === currentUser.name;\n        });\n\n        if (!this.isOwnerPage || this.isRecommendation) {\n          this.isUserAlreadyInMembers = this.data.members.some(function(item) {\n            return item.name === currentUser.name;\n          });\n        }\n      }\n\n\n\n      // function\n      this.addCurrentUserToMembers = addCurrentUserToMembers;\n      this.addLike = addLike;\n      this.addNewTask = addNewTask;\n      this.clearInput = clearInput;\n      this.closePopupAndOverlay = closePopupAndOverlay;\n      this.invitePeople = invitePeople;\n      this.openBackgroundPopup = openBackgroundPopup;\n      this.saveEditedTitle = saveEditedTitle;\n      this.saveTextToTemp = saveTextToTemp;\n      this.removeList = removeList;\n      this.reloadTasks = reloadTasks;\n      $scope.$on('closePopup', closePopup);\n\n      function addCurrentUserToMembers() {\n\n        if (!this.isUserAlreadyInMembers) {\n          this.data.members.push(currentUser);\n\n          ListsService.update({ id: this.listID }, { list: this.data }, function() {\n            self.isUserAlreadyInMembers = true;\n          });\n        }\n      }\n\n      /**\n       * This function add likes to lists\n       * Like - it's a name user, who pressed the button\n       * If is like already in list - remove its\n       **/\n      function addLike() {\n        if (!this.isOwner) {\n          var newListInterest;\n\n          // check is user already take the like\n          var isUserTakeLike = this.data.likes.some(function(item) {\n            return item === currentUser.name;\n          });\n\n          if (isUserTakeLike) {\n            // if yes remove his like\n            this.data.likes = this.data.likes.filter(function(item) {\n              return item !== currentUser.name;\n            });\n\n            this.alreadyLiked = false;\n\n            // and remove list tags from user lists_interests array\n            newListInterest = _.difference(currentUser.lists_interests, this.data.tags);\n          } else {\n            this.data.likes.push(currentUser.name);\n            this.alreadyLiked = true;\n\n            newListInterest = _.union(currentUser.lists_interests, this.data.tags);\n          }\n\n          // save to user updated lists interests\n          currentUser.lists_interests = newListInterest;\n\n          this.likes = this.data.likes.length;\n\n          // send data to server\n          ListsService.update({ id: this.listID }, { list: this.data });\n          UserService.update({}, { user: currentUser });\n        }\n      }\n\n      function addNewTask(validation) {\n\n        if (validation && allowSavingTask) {\n          allowSavingTask = false;\n\n          TaskService.save({ list: this.listID }, { text: this.taskText }, function (response) {\n            self.data.tasks.push(response.task);\n            self.taskText = null;\n            allowSavingTask = true;\n          });\n        }\n      }\n\n      function clearInput() {\n        this.taskText = null;\n      }\n\n      function closePopup() {\n        self.showInviteList = false;\n        self.showBackground = false;\n      }\n\n      function closePopupAndOverlay() {\n        this.showBackground = false;\n        this.showInviteList = false;\n        $rootScope.$emit(\"hideFogOverlay\");\n      }\n\n      function invitePeople() {\n        this.showInviteList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function openBackgroundPopup() {\n        this.showBackground = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      /**\n       * Check is this owner list who want remove\n       * If yes - remove list from DB\n       * Else - remove this user from list members\n       **/\n      function removeList() {\n        if (this.isOwner) {\n          ListsService.delete({ id: this.listID }, function () {\n            self.reload();\n          });\n        } else {\n          var newMembersArray = this.data.members.filter(function(item) {\n            return item.name !== currentUser.name;\n          });\n\n          this.data.members = newMembersArray;\n\n          ListsService.update({ id: self.listID }, { list: this.data }, function (response) {\n            self.reload();\n          });\n        }\n      }\n\n      function saveTextToTemp() {\n        if (this.isOwner) {\n          textBeforeEdit = this.data.title;\n          this.data.title = this.data.title.replace(/(<([^>]+)>)/ig, '');\n          textTemp = this.data.title;\n        }\n\n      }\n\n      function saveEditedTitle() {\n        // replacement needed, because when contenteditable element empty,\n        // browser automaticaly add br tag\n        // and I don't know this is bug or feature\n        // var editedText = this.data.title.replace(/<br>/, \"\");\n\n        if (textTemp && textTemp !== this.data.title) {\n          var result = tags.getTagsAndText(this.data.title);\n          this.data.title = result.text;\n          this.data.tags = result.hashTags;\n\n          ListsService.update({ id: this.listID }, { list: this.data });\n        } else {\n          this.data.title = textBeforeEdit;\n        }\n      }\n\n      function reloadTasks(listID) {\n        TaskService.query({ list: listID }, function (response) {\n          self.data.tasks = response.tasks;\n        });\n      }\n\n      function colorFilterHandler(events, data) {\n        self.colorFilter = data.color;\n      }\n\n      function taskVisibilityHandler() {\n        self.completedTask = (self.completedTask === 'visible') ? 'hidden' : 'visible';\n      }\n    }\n})();\n","/**\n * This directive add custom ng-model directive to non-form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"contenteditable\", contenteditableDirective)\n\n    function contenteditableDirective() {\n      var directive = {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, ngModel) {\n        function read() {\n          ngModel.$setViewValue(element.html());\n        }\n\n        ngModel.$render = function() {\n          element.html(ngModel.$viewValue || \"\");\n        };\n\n        element.bind(\"blur keyup change\", function() {\n          scope.$apply(read);\n        });\n      }\n    }\n\n}());\n","/**\n * This directive setup focus to non form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"customFocus\", customFocusDirective)\n\n    customFocusDirective.$inject = [\"$timeout\"];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: \"A\",\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n          // element[0].focus();\n\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","/**\n * This directive controll fog(black-transparent background)\n * for all popup window\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fog\", fogDirective);\n\n    fogDirective.$inject = [\"$rootScope\"];\n    function fogDirective($rootScope) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        scope: {},\n        template: \"<div id='fog' ng-show='showFogState' ng-click='hideFogOverlay()'></div>\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var listenerShowOverlay = $rootScope.$on(\"showFogOverlay\", showFogOverlay);\n        var listenerHideOverlay = $rootScope.$on(\"hideFogOverlay\", hideFogOverlay);\n        scope.hideFogOverlay = hideFogOverlay;\n\n        /**\n         * remove rootscope listener\n         */\n        scope.$on('$destroy', listenerShowOverlay);\n        scope.$on('$destroy', listenerHideOverlay);\n\n        /**\n         * This function close any popup window\n         * And hide fog (or overlay)\n         */\n        function hideFogOverlay() {\n          scope.showFogState = false;\n          scope.$parent.$broadcast(\"closePopup\");\n        }\n\n        function showFogOverlay() {\n          scope.showFogState = true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickEnter\", clickEnterDirective);\n\n    function clickEnterDirective() {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        element.bind(\"keypress\", function (event) {\n          if(event.which === 13) { // 13 is enter code on keyboard :)\n            scope.$apply(function (){\n              scope.$eval(attrs.clickEnter);\n            });\n          }\n        });\n      }\n    }\n})();\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","/**\n * This directive controll global list settings\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listSettings\", listSettingsDirective);\n\n    listSettingsDirective.$inject = ['UserService', 'userData'];\n    function listSettingsDirective(UserService, userData) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-settings/list-settings.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs) {\n\n        var currentUser = userData.getData();\n\n        // preload data\n        scope.color = currentUser.color_filter;\n        scope.completed = currentUser.completed;\n        scope.addTask = currentUser.add_task;\n\n        // func\n        scope.changeCompleted = changeCompleted;\n        scope.chooseColorFilter = chooseColorFilter;\n\n        function changeCompleted() {\n          currentUser.completed = scope.completed;\n          UserService.update({}, { user: currentUser }, function(response) {\n            scope.$parent.$broadcast('taskVisibility');\n          });\n        }\n\n        function chooseColorFilter(color) {\n          if (color === scope.color) {\n            color = 'none';\n          }\n\n          currentUser.color_filter = color;\n          UserService.update({}, { user: currentUser }, function(response) {\n            scope.color = color;\n            scope.$parent.$broadcast('taskColorFilter', { color: color });\n          });\n        }\n\n      }\n    }\n})();\n","/**\n * This directive controll invite new people to list\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listInvite\", listInviteDirective);\n\n    listInviteDirective.$inject = ['SearchService', 'ListsService'];\n    function listInviteDirective(SearchService, ListsService) {\n      var directive = {\n        restrict: \"E\",\n        require: '^list',\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-invite/list-invite.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs, listCtrl) {\n        var alreadyAddedUsers = [];\n        scope.owner = listCtrl.data.owner;\n        scope.stash = [];\n        scope.searchPeople = searchPeople;\n        scope.saveToStash = saveToStash;\n        scope.removeFromStash = removeFromStash;\n        scope.saveToMembers = saveToMembers;\n\n        scope.$watch(function() {\n          return listCtrl.showInviteList;\n        }, function(newVal) {\n          if (newVal === true) {\n            loadData();\n          } else {\n            cleanInputs();\n          }\n        });\n\n        function loadData() {\n          listCtrl.data.members.forEach(function(i) {\n            i.interests = i.interests.slice(0, 3);\n            scope.stash.push(i);\n            alreadyAddedUsers.push(i.name);\n          });\n\n          alreadyAddedUsers.push(listCtrl.data.owner.name);\n        }\n\n        function searchPeople() {\n          if (scope.members) {\n            SearchService.users({}, { name: scope.members, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToStash(user) {\n          scope.stash.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.users = null;\n        }\n\n        function removeFromStash(member) {\n          var indexAddedUsers;\n\n          scope.stash.forEach(function(i, index) {\n            if (scope.stash[index].name === member.name) {\n              scope.stash.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function saveToMembers() {\n          var list = listCtrl.data;\n\n          list.members = scope.stash;\n\n          ListsService.update({ id: listCtrl.listID }, { list: list }, function (response) {\n            cleanInputs();\n            listCtrl.showInviteList = true;\n            listCtrl.closePopupAndOverlay();\n          });\n        }\n\n        function cleanInputs() {\n          alreadyAddedUsers = [];\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.stash = [];\n          scope.users = [];\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .directive('onFinishRender', onFinishRender);\n\n    onFinishRender.$inject = [\"$timeout\"];\n    function onFinishRender($timeout) {\n      var directive = {\n        restrict: 'A',\n        link: linkFunc,\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        if (scope.$last === true) {\n          $timeout(function() {\n            scope.$eval(attrs.onFinishRender);\n          }, 1000);\n        }\n      }\n    }\n})();\n","/**\n * This directive controll creating new list and at once add people to this list\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .directive('newList', newListDirective);\n\n    newListDirective.$inject = ['$rootScope', '$window', 'UserService', 'SearchService', 'ListsService', 'userData', 'tags'];\n    function newListDirective($rootScope, $window, UserService, SearchService, ListsService, userData, tags) {\n      var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {\n          lists: '=',\n          show: '='\n        },\n        templateUrl: 'scripts/common/directives/new-list/new-list.tpl.html',\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs) {\n        scope.showSearchResult = false;\n        scope.members = [];\n        scope.saveNewList = saveNewList;\n        scope.searchPeople = searchPeople;\n        scope.saveToMembers = saveToMembers;\n        scope.removeFromMembers = removeFromMembers;\n        var alreadyAddedUsers = [];\n\n        scope.$watch(function() {\n          return scope.show;\n        }, function(newVal) {\n          if (newVal === true) {\n            scope.focus = true;\n            alreadyAddedUsers.push(scope.currentUserData.name);\n          } else {\n            cleanInputs();\n          }\n        });\n\n        loadCurrentUser();\n\n        function loadCurrentUser() {\n          scope.currentUserData = userData.getData();\n        }\n\n        function saveNewList(validation) {\n          scope.newListSubmitted = true;\n\n          if (validation) {\n            var result = tags.getTagsAndText(scope.newListTitle);\n\n            var title = result.text;\n            var hashTags = result.hashTags;\n\n            ListsService.save({ title: title, tags: hashTags, members: scope.members }, function (response) {\n              scope.lists.push(response.list);\n              $rootScope.$emit('hideFogOverlay');\n              cleanInputs();\n            });\n          }\n        }\n\n        function searchPeople() {\n          if (scope.searchUser) {\n            SearchService.users({}, { name: scope.searchUser, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToMembers(user) {\n          scope.members.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.searchUser = null;\n          scope.users = [];\n        }\n\n        function removeFromMembers(member) {\n          var indexAddedUsers;\n\n          scope.members.forEach(function(i, index) {\n            if (scope.members[index].name === member.name) {\n              scope.members.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function cleanInputs() {\n          scope.showSearchResult = false;\n          scope.users = [];\n          scope.members = [];\n          scope.searchUser = null;\n          scope.nameMember = null;\n          scope.newListTitle = null;\n          scope.newListForm.$setPristine();\n          scope.newListSubmitted = false;\n          alreadyAddedUsers = [];\n        }\n      }\n    }\n})();\n","/**\n * This directive controll popup and change background for lists\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listBackground\", listBackgroundDirective);\n\n    listBackgroundDirective.$inject = ['ListsService']\n    function listBackgroundDirective(ListsService) {\n      var directive = {\n        restrict: \"A\",\n        require: '^list',\n        replace: true,\n        scope: {},\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, listCtrl) {\n        if (attrs.class === listCtrl.data.image) {\n          element.addClass('active-background');\n        }\n\n        element.bind('click', clickHandler);\n\n        function clickHandler() {\n          if (!element.hasClass('active-background')) {\n            listCtrl.data.image = attrs.class;\n            element.parent().children().removeClass('active-background'); // baaaaaaaadd code\n\n            ListsService.update({ id: listCtrl.listID }, { list: listCtrl.data }, function (response) {\n              element.addClass('active-background');\n            });\n          }\n        }\n      }\n    }\n})();\n"],"sourceRoot":"/source/"}