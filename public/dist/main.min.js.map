{"version":3,"sources":["core/app-bootstrap.js","core/app.mdl.js","common/config/interceptors.cfg.js","common/config/router.cfg.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/interests.service.js","common/services/lists-filter.srv.js","common/services/lists.fctr.js","common/services/search.fctr.js","common/services/state-change-error.srv.js","common/services/state-change-success.srv.js","common/services/tags.srv.js","common/services/task.fctr.js","common/services/user-data.srv.js","common/services/user-logged.srv.js","common/services/user.fctr.js","common/components/list/list.cmp.js","common/components/task/task.cmp.js","common/directives/click-enter/click-enter.drv.js","common/directives/click-outside/click-outside.drv.js","common/directives/contenteditable/contenteditable.drv.js","common/directives/custom-focus/custom-focus.drv.js","common/directives/file-reader/file-reader.drv.js","common/directives/fog/fog.drv.js","common/directives/list-background/list-background.drv.js","common/directives/list-invite/list-invite.drv.js","common/directives/new-list/new-list.drv.js","common/directives/on-finish-render/on-finish-render.js","core/auth/auth-login/auth-login.ctrl.js","core/auth/auth-signup/auth-signup.ctrl.js","core/main/main-interests/main-interests.ctrl.js","core/main/main-lists/main-lists.ctrl.js","core/main-profile/profile-account/profile-account.ctrl.js","core/main-profile/profile-password/profile-password.ctrl.js","core/navbar/navbar-user/navbar-user.ctrl.js"],"names":["angular","element","document","ready","bootstrap","configure","$locationProvider","$stateProvider","$urlRouterProvider","$httpProvider","configRouter","configInterceptors","runBlock","stateChangeSuccess","stateChangeError","initialize","module","config","run","$inject","interceptors","push","constant","state","url","views","navbar","templateUrl","content","abstract","resolve","isUserLogged","content@","controller","controllerAs","profile","otherwise","html5Mode","userLogged","logged","authInterceptor","$rootScope","$q","$window","$injector","request","headers","localStorage","token","Authorization","responseError","response","status","get","go","reject","factory","AuthService","$resource","type","save","method","params","login","InterestsService","listsFilter","this","setIsOwnFilter","isOwnFilter","getIsOwnFilter","service","ListsService","data","id","user","query","isArray","update","SearchService","lists","users","$state","$on","event","toState","toParams","fromState","fromParams","error","username","stateNames","name","split","body","length","tags","getTagsAndText","text","hashTags","twitterTags","twttr","txt","extractHashtags","forEach","item","indexOf","replace","TaskService","list","task","userData","$stateParams","getData","setData","isOwnerPage","isOwnerList","listOwner","getCurrentUser","deferred","defer","promise","UserService","currentUser","avatar","setInterests","listController","$scope","addLike","isOwner","index","likes","splice","listID","addNewTask","validation","allowSavingTask","taskText","self","tasks","clearInput","closePopup","showInviteList","showBackground","closePopupAndOverlay","$emit","invitePeople","openBackgroundPopup","removeList","reload","newMembersArray","members","filter","saveTextToTemp","textBeforeEdit","title","textTemp","saveEditedTitle","result","reloadTasks","_id","owner","$watch","component","bindings","taskController","changeColor","className","target","hasClass","taskID","color","closeEditMode","editMode","closeDropdown","dropdownIsOpen","editTaskText","focusOn","openDropdown","currentTarget","setTaskCompleted","completed","saveEditedText","removeTask","$onInit","listCtrl","require","clickEnterDirective","linkFunc","scope","attrs","bind","which","$apply","$eval","clickEnter","directive","restrict","link","clickOutsideDirective","$document","$parse","fn","eventHandler","childElement","contains","on","off","contenteditableDirective","ngModel","read","$setViewValue","html","$render","$viewValue","customFocusDirective","$timeout","value","focus","trigger","fileReaderDirective","image","files","fogDirective","hideFogOverlay","showFogState","$parent","$broadcast","showFogOverlay","listenerShowOverlay","listenerHideOverlay","template","listBackgroundDirective","clickHandler","parent","children","removeClass","addClass","listInviteDirective","elem","loadData","i","interests","slice","stash","alreadyAddedUsers","searchPeople","usedNames","responce","showSearchResult","saveToStash","removeFromStash","member","indexAddedUsers","saveToMembers","cleanInputs","newVal","newListDirective","loadCurrentUser","currentUserData","saveNewList","newListSubmitted","newListTitle","searchUser","removeFromMembers","nameMember","newListForm","$setPristine","show","onFinishRender","$last","LoginPageCtrl","submitData","loginVm","submitted","password","message","clearMessageError","SignupPageCtrl","signupVm","userName","email","userEmail","userPassword","InterestsPageCtrl","chooseInterest","vm","selectedInterest","colorsArray","shift","removeInterest","targetId","dataset","selectedId","querySelectorAll","saveInterests","interestsArray","emptyInterests","ListsPageCtrl","activate","listsVm","createNewList","showNewList","reloadList","selectSort","AccountPageCtrl","saveChanges","messageDone","changeAvatar","reader","localeCompare","console","log","FileReader","onload","avatarImage","readAsDataURL","PasswordPageCtrl","savePassword","errorConfirmPass","newPass","newPassConfirm","oldPass","UserNavCtrl","load","navVm","alert","logout","listener"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, [\"llamaLists\"]);\n  });\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists', ['ui.router', 'ngMessages', 'ngResource', 'ngAnimate'])\n    .config(configure)\n    .run(runBlock);\n\n\n  configure.$inject = [\"$locationProvider\", \"$stateProvider\", \"$urlRouterProvider\", '$httpProvider', 'configRouter', 'configInterceptors'];\n  function configure($locationProvider, $stateProvider, $urlRouterProvider, $httpProvider, configRouter, configInterceptors) {\n    configRouter($locationProvider, $stateProvider, $urlRouterProvider);\n    configInterceptors($httpProvider);\n  }\n  /* set body id for css style */\n  runBlock.$inject = ['stateChangeSuccess', 'stateChangeError'];\n  function runBlock(stateChangeSuccess, stateChangeError) {\n    stateChangeSuccess.initialize();\n    stateChangeError.initialize();\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configInterceptors', configInterceptors);\n\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push(\"AuthInterceptor\");\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configRouter', configRouter);\n\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider) {\n      $stateProvider\n        .state(\"home\", {\n          url: \"/\",\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-auth/navbar-auth.tpl.html\"\n            },\n            \"content\": {\n              templateUrl: \"home/home.tpl.html\"\n            }\n          }\n        })\n        .state(\"auth\", {\n          url: \"\",\n          abstract: true,\n          resolve: {\n            isUserLogged: isUserLogged\n          }\n        })\n        .state(\"auth.login\", {\n          url: \"/login\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-login/auth-login.tpl.html\",\n              controller:   \"loginPageCtrl\",\n              controllerAs: \"loginVm\"\n            }\n          }\n        })\n        .state(\"auth.signup\", {\n          url: \"/signup\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-signup/auth-signup.tpl.html\",\n              controller:   \"signupPageCtrl\",\n              controllerAs: \"signupVm\"\n            }\n          }\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-user/navbar-user.tpl.html\",\n              controller:   \"userNavCtrl\",\n              controllerAs: \"navVm\"\n            }\n          }\n        })\n        .state(\"main.lists\", {\n          url: \"/:username\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-lists/main-lists.tpl.html\",\n              controller:   \"listsPageCtrl\",\n              controllerAs: \"listsVm\"\n            }\n          }\n        })\n        .state(\"main.interests\", {\n          url: \"/interests/\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-interests/main-interests.tpl.html\",\n              controller:   \"interestsPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile\", {\n          url: \"/profile\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main-profile/main-profile.tpl.html\"\n            }\n          }\n        })\n        .state(\"main.profile.account\", {\n          url: \"/account\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-account/profile-account.tpl.html\",\n              controller:   \"accountPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile.password\", {\n          url: \"/password\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-password/profile-password.tpl.html\",\n              controller:   \"passwordPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"404\", {\n          url: \"/404\",\n          views: {\n            \"content\": {\n              templateUrl: \"404/404.tpl.html\"\n            }\n          }\n        });\n\n      $urlRouterProvider.otherwise(\"/404\");\n      $locationProvider.html5Mode(true);\n    }\n\n    isUserLogged.$inject = ['userLogged'];\n    function isUserLogged(userLogged) {\n      return userLogged.logged();\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .factory('AuthInterceptor', authInterceptor);\n\n    authInterceptor.$inject = [\"$rootScope\", \"$q\", \"$window\", \"$injector\"];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = \"Bearer \" + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n\n            // remove just in case\n            delete $window.localStorage.token;\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go(\"auth.signup\"); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go(\"404\");\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"AuthService\", AuthService);\n\n    AuthService.$inject = [\"$resource\"];\n    function AuthService($resource) {\n      return $resource(\"/auth/:type\", {\n        type: \"@type\"\n      },\n      {\n        save: {\n          method: \"POST\",\n          params: {\n            type: \"signup\"\n          }\n        },\n        login: {\n          method: \"POST\",\n          params: {\n            type: \"login\"\n          }\n        }\n      });\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('InterestsService', InterestsService);\n\n    InterestsService.$inject = ['$resource'];\n    function InterestsService($resource) {\n      return $resource('/api/data/interests');\n    }\n})();\n","/**\n * This service need for hiding some element if filtering lists\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"listsFilter\", listsFilter);\n\n    function listsFilter() {\n\n      this.setIsOwnFilter = function(type) {\n        this.isOwnFilter = type;\n      }\n\n      this.getIsOwnFilter = function() {\n        return this.isOwnFilter;\n      }\n    }\n})();\n","/**\n * This service controll lists request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListsService\", ListsService);\n\n    ListsService.$inject = [\"$resource\"];\n    function ListsService($resource) {\n      var data = $resource(\"/api/lists/:id:user\", { id: \"@id\", user: \"@user\"}, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll search request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('SearchService', SearchService);\n\n    SearchService.$inject = ['$resource'];\n    function SearchService($resource) {\n      var data = $resource('/api/search/:type', {},\n      {\n        lists: {\n          method: 'GET',\n          params: {\n            type: 'lists'\n          }\n        },\n        users: {\n          method: 'POST',\n          params: {\n            type: 'users'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeError', stateChangeError);\n\n    stateChangeError.$inject = ['$rootScope', '$state', '$window'];\n    function stateChangeError($rootScope, $state, $window) {\n      return {\n        initialize: function() {\n          $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n            if (error === 'isAlreadyLogged') {\n              $state.go('main.lists', { username: $window.localStorage.user });\n            }\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeSuccess', stateChangeSuccess);\n\n    stateChangeSuccess.$inject = ['$rootScope'];\n    function stateChangeSuccess($rootScope) {\n        return {\n          initialize: function() {\n            $rootScope.$on('$stateChangeSuccess', function(event, toState){\n              var stateNames = toState.name.split('.');\n              document.body.id = stateNames[stateNames.length - 1] + '-page';\n            });\n          }\n        }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"tags\", tags);\n\n    function tags() {\n\n      this.getTagsAndText = function(text) {\n        var hashTags = [];\n        var twitterTags = twttr.txt.extractHashtags(text);\n\n        twitterTags.forEach(function(item) {\n\n          // twitter extracted tags without hash, therefore add this symbol for them\n          if (hashTags.indexOf(item) === -1) { // additional check on the tags already added\n            hashTags.push(item);\n          }\n\n          if (text.indexOf('<span>#' + item + '</span>') === -1) {\n            text = text.replace('#' + item, '<span>#' + item + '</span>');\n          }\n\n          // text = text.replace(/(^|\\s)#ama(\\s|$)/, '<span>#' + item + '</span>'); // maybe work replace word\n          // text = text.replace('#' + item, '<span>#' + item + '</span>').replace(/\\s\\s+/g, ' '); // replace spaces\n        });\n\n        return {\n          text: text,\n          hashTags: hashTags\n        }\n      }\n    }\n})();\n","/**\n * This service controll task request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"TaskService\", TaskService);\n\n    TaskService.$inject = [\"$resource\"];\n    function TaskService($resource) {\n      var data = $resource(\"/api/lists/:list/task/:task\", { list: \"@list\", task: \"@task\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll all user data (like a avatar, name, interests)\n * And also check the logged user placing on your own page\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userData\", userData);\n\n    userData.$inject = ['$window', '$stateParams'];\n    function userData($window, $stateParams) {\n\n      this.getData = function() {\n          return this.userData;\n      }\n\n      this.setData = function(user) {\n        this.userData = user;\n      }\n\n      this.isOwnerPage = function() {\n        if ($window.localStorage.user !== $stateParams.username) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      this.isOwnerList = function(listOwner) {\n        if ($window.localStorage.user !== listOwner) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      this.getCurrentUser = function() {\n        return $window.localStorage.user;\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userLogged\", userLogged);\n\n    userLogged.$inject = [\"$window\", \"$state\", \"$q\"];\n    function userLogged($window, $state, $q) {\n\n      this.logged = function() {\n        var deferred = $q.defer();\n        if ($window.localStorage.token) {\n          deferred.reject(\"isAlreadyLogged\");\n        } else {\n          deferred.resolve();\n        }\n\n        return deferred.promise;\n      }\n    }\n})();\n","/**\n * This service controll user request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('UserService', UserService);\n\n    UserService.$inject = ['$resource', '$window'];\n    function UserService($resource, $window) {\n      var currentUser = $window.localStorage.user;\n\n      var data = $resource('/api/user/:name:type', { name: '@name', type: '@type' }, {\n        update:  {\n          method: 'PUT'\n        },\n        getCurrentUser: {\n          method: 'GET',\n          params: {\n            name: currentUser\n          }\n        },\n        avatar: {\n          method: 'PUT',\n          params: {\n            type: 'avatar'\n          }\n        },\n        setInterests: {\n          method: 'PUT',\n          params: {\n            type: 'interests'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This component controll list data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"list\", {\n      bindings: {\n        data: \"=\",\n        reload: \"&\"\n      },\n      controller: listController,\n      templateUrl: 'scripts/common/components/list/list.tpl.html'\n    });\n\n    listController.$inject = ['$scope', '$rootScope', 'ListsService', 'TaskService', 'listsFilter', 'userData', 'tags'];\n    function listController($scope, $rootScope, ListsService, TaskService, listsFilter, userData, tags) {\n      //variable\n      var allowSavingTask = true;\n      var textBeforeEdit = '';\n      var textTemp = '';\n      var self = this;\n      this.listID = this.data._id;\n\n      // check if user is owner list\n      this.isOwner = userData.isOwnerList(this.data.owner.name);\n\n\n      // count likes\n      this.likes = this.data.likes.length;\n\n      // watcher\n      $scope.$watch(function() {\n        return listsFilter.getIsOwnFilter();\n      }, function() {\n        self.isOwnFilter = listsFilter.getIsOwnFilter();\n      });\n\n      // function\n      this.addLike = addLike;\n      this.addNewTask = addNewTask;\n      this.clearInput = clearInput;\n      this.closePopupAndOverlay = closePopupAndOverlay;\n      this.invitePeople = invitePeople;\n      this.openBackgroundPopup = openBackgroundPopup;\n      this.saveEditedTitle = saveEditedTitle;\n      this.saveTextToTemp = saveTextToTemp;\n      this.removeList = removeList;\n      this.reloadTasks = reloadTasks;\n      $scope.$on('closePopup', closePopup);\n\n      /**\n       * This function add likes to lists\n       * Like - it's a name user, who pressed the button\n       * If is like already in list - remove its\n       **/\n      function addLike() {\n        if (!this.isOwner) {\n          var currentUser = userData.getCurrentUser();\n\n          var index = this.data.likes.indexOf(currentUser);\n\n          if (index > -1) {\n            this.data.likes.splice(index, 1);\n          } else {\n            this.data.likes.push(currentUser);\n          }\n\n          this.likes = this.data.likes.length;\n\n          ListsService.update({ id: this.listID }, { list: this.data });\n        }\n      }\n\n      function addNewTask(validation) {\n\n        if (validation && allowSavingTask) {\n          allowSavingTask = false;\n\n          TaskService.save({ list: this.listID }, { text: this.taskText }, function (response) {\n            self.data.tasks.push(response.task);\n            self.taskText = null;\n            allowSavingTask = true;\n          });\n        }\n      }\n\n      function clearInput() {\n        this.taskText = null;\n      }\n\n      function closePopup() {\n        self.showInviteList = false;\n        self.showBackground = false;\n      }\n\n      function closePopupAndOverlay() {\n        this.showBackground = false;\n        this.showInviteList = false;\n        $rootScope.$emit(\"hideFogOverlay\");\n      }\n\n      function invitePeople() {\n        this.showInviteList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function openBackgroundPopup() {\n        this.showBackground = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      /**\n       * Check is this owner list who want remove\n       * If yes - remove list from DB\n       * Else - remove this user from list members\n       **/\n      function removeList() {\n        if (this.isOwner) {\n          ListsService.delete({ id: this.listID }, function () {\n            self.reload();\n          });\n        } else {\n          var currentUser = userData.getCurrentUser();\n\n          var newMembersArray = this.data.members.filter(function(item) {\n            return item.name !== currentUser;\n          });\n\n          this.data.members = newMembersArray;\n\n          ListsService.update({ id: self.listID }, { list: this.data }, function (response) {\n            self.reload();\n          });\n        }\n      }\n\n      function saveTextToTemp() {\n        if (this.isOwner) {\n          textBeforeEdit = this.data.title;\n          this.data.title = this.data.title.replace(/(<([^>]+)>)/ig, '');\n          textTemp = this.data.title;\n        }\n\n      }\n\n      function saveEditedTitle() {\n        // replacement needed, because when contenteditable element empty,\n        // browser automaticaly add br tag\n        // and I don't know this is bug or feature\n        // var editedText = this.data.title.replace(/<br>/, \"\");\n\n        if (textTemp && textTemp !== this.data.title) {\n          var result = tags.getTagsAndText(this.data.title);\n          this.data.title = result.text;\n          this.data.tags = result.hashTags;\n\n          ListsService.update({ id: this.listID }, { list: this.data });\n        } else {\n          this.data.title = textBeforeEdit;\n        }\n      }\n\n      function reloadTasks(listID) {\n        TaskService.query({ list: listID }, function (response) {\n          self.data.tasks = response.tasks;\n        });\n      }\n    }\n})();\n","/**\n * This directive controll task data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"task\", {\n      bindings: {\n        data: \"=\"\n      },\n      require: {\n        listCtrl: '^list'\n      },\n      controller: taskController,\n      templateUrl: 'scripts/common/components/task/task.tpl.html'\n    });\n\n    taskController.$inject = ['TaskService'];\n    function taskController(TaskService) {\n      var listID;\n      var reloadTasks;\n      var textBeforeEdit;\n      var taskID = this.data._id;\n      var self = this;\n      this.dropdownIsOpen = false;\n\n      //func\n      this.changeColor = changeColor;\n      this.closeEditMode = closeEditMode;\n      this.closeDropdown = closeDropdown;\n      this.editTaskText = editTaskText;\n      this.openDropdown = openDropdown;\n      this.setTaskCompleted = setTaskCompleted;\n      this.saveEditedText = saveEditedText;\n      this.removeTask = removeTask;\n\n      this.$onInit = function() {\n        listID = this.listCtrl.listID;\n        reloadTasks = this.listCtrl.reloadTasks;\n        this.isOwner = this.listCtrl.isOwner;\n      }\n\n\n      function changeColor(event) {\n        var className = event.target.className;\n        var target = angular.element(event.target);\n\n        if (!target.hasClass(\"task__color--active\")) {\n          className = className.replace(\"task__color \", \"\"); // remove unnecessary part of class name\n\n          TaskService.update({ list: listID, task: taskID }, { color: className }, function (response) {\n            self.data.color = className;\n          });\n        }\n      }\n\n      function closeEditMode() {\n        this.data.text = textBeforeEdit;\n        this.editMode = false;\n      }\n\n      function closeDropdown() {\n        this.dropdownIsOpen = false;\n      }\n\n      function editTaskText() {\n        textBeforeEdit = this.data.text;\n        this.editMode = true;\n        this.focusOn = true;\n        this.closeDropdown();\n      }\n\n      function openDropdown(event) {\n        if (event.currentTarget === event.target) {\n          this.dropdownIsOpen = (this.dropdownIsOpen) ? false : true;\n        }\n      }\n\n      function setTaskCompleted(event) {\n        if (this.editMode !== true && this.isOwner) {\n          TaskService.update({ list: listID, task: taskID }, { completed: true }, function (response) {\n            self.data.completed = response.task.completed;\n          });\n        }\n      }\n\n      function saveEditedText() {\n        if (this.data.text) {\n          TaskService.update({ list: listID, task: taskID }, { text: this.data.text }, function (response) {\n            self.editMode = false;\n          });\n        } else {\n          this.closeEditMode();\n        }\n      }\n\n      function removeTask() {\n        TaskService.delete({ list: listID, task: taskID }, function (response) {\n          reloadTasks(listID);\n        });\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickEnter\", clickEnterDirective);\n\n    function clickEnterDirective() {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        element.bind(\"keypress\", function (event) {\n          if(event.which === 13) { // 13 is enter code on keyboard :)\n            scope.$apply(function (){\n              scope.$eval(attrs.clickEnter);\n            });\n          }\n        });\n      }\n    }\n})();\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","/**\n * This directive add custom ng-model directive to non-form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"contenteditable\", contenteditableDirective)\n\n    function contenteditableDirective() {\n      var directive = {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, ngModel) {\n        function read() {\n          ngModel.$setViewValue(element.html());\n        }\n\n        ngModel.$render = function() {\n          element.html(ngModel.$viewValue || \"\");\n        };\n\n        element.bind(\"blur keyup change\", function() {\n          scope.$apply(read);\n        });\n      }\n    }\n\n}());\n","/**\n * This directive setup focus to non form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"customFocus\", customFocusDirective)\n\n    customFocusDirective.$inject = [\"$timeout\"];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: \"A\",\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n          // element[0].focus();\n\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","/**\n * This directive controll fog(black-transparent background)\n * for all popup window\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fog\", fogDirective);\n\n    fogDirective.$inject = [\"$rootScope\"];\n    function fogDirective($rootScope) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        scope: {},\n        template: \"<div id='fog' ng-show='showFogState' ng-click='hideFogOverlay()'></div>\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var listenerShowOverlay = $rootScope.$on(\"showFogOverlay\", showFogOverlay);\n        var listenerHideOverlay = $rootScope.$on(\"hideFogOverlay\", hideFogOverlay);\n        scope.hideFogOverlay = hideFogOverlay;\n\n        /**\n         * remove rootscope listener\n         */\n        scope.$on('$destroy', listenerShowOverlay);\n        scope.$on('$destroy', listenerHideOverlay);\n\n        /**\n         * This function close any popup window\n         * And hide fog (or overlay)\n         */\n        function hideFogOverlay() {\n          scope.showFogState = false;\n          scope.$parent.$broadcast(\"closePopup\");\n        }\n\n        function showFogOverlay() {\n          scope.showFogState = true;\n        }\n      }\n    }\n})();\n","/**\n * This directive controll popup and change background for lists\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listBackground\", listBackgroundDirective);\n\n    listBackgroundDirective.$inject = ['ListsService']\n    function listBackgroundDirective(ListsService) {\n      var directive = {\n        restrict: \"A\",\n        require: '^list',\n        replace: true,\n        scope: {},\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, listCtrl) {\n        if (attrs.class === listCtrl.data.image) {\n          element.addClass('active-background');\n        }\n\n        element.bind('click', clickHandler);\n\n        function clickHandler() {\n          if (!element.hasClass('active-background')) {\n            listCtrl.data.image = attrs.class;\n            element.parent().children().removeClass('active-background'); // baaaaaaaadd code\n\n            ListsService.update({ id: listCtrl.listID }, { list: listCtrl.data }, function (response) {\n              element.addClass('active-background');\n            });\n          }\n        }\n      }\n    }\n})();\n","/**\n * This directive controll invite new people to list\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listInvite\", listInviteDirective);\n\n    listInviteDirective.$inject = ['SearchService', 'ListsService'];\n    function listInviteDirective(SearchService, ListsService) {\n      var directive = {\n        restrict: \"E\",\n        require: '^list',\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-invite/list-invite.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs, listCtrl) {\n        var alreadyAddedUsers = [];\n        scope.owner = listCtrl.data.owner;\n        scope.stash = [];\n        scope.searchPeople = searchPeople;\n        scope.saveToStash = saveToStash;\n        scope.removeFromStash = removeFromStash;\n        scope.saveToMembers = saveToMembers;\n\n        scope.$watch(function() {\n          return listCtrl.showInviteList;\n        }, function(newVal) {\n          if (newVal === true) {\n            loadData();\n          } else {\n            cleanInputs();\n          }\n        });\n\n        function loadData() {\n          listCtrl.data.members.forEach(function(i) {\n            i.interests = i.interests.slice(0, 3);\n            scope.stash.push(i);\n            alreadyAddedUsers.push(i.name);\n          });\n\n          alreadyAddedUsers.push(listCtrl.data.owner.name);\n        }\n\n        function searchPeople() {\n          if (scope.members) {\n            SearchService.users({}, { name: scope.members, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToStash(user) {\n          scope.stash.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.users = null;\n        }\n\n        function removeFromStash(member) {\n          var indexAddedUsers;\n\n          scope.stash.forEach(function(i, index) {\n            if (scope.stash[index].name === member.name) {\n              scope.stash.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function saveToMembers() {\n          var list = listCtrl.data;\n\n          list.members = scope.stash;\n\n          ListsService.update({ id: listCtrl.listID }, { list: list }, function (response) {\n            cleanInputs();\n            listCtrl.showInviteList = true;\n            listCtrl.closePopupAndOverlay();\n          });\n        }\n\n        function cleanInputs() {\n          alreadyAddedUsers = [];\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.stash = [];\n          scope.users = [];\n        }\n      }\n    }\n})();\n","/**\n * This directive controll creating new list and at once add people to this list\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .directive('newList', newListDirective);\n\n    newListDirective.$inject = ['$rootScope', '$window', 'UserService', 'SearchService', 'ListsService', 'userData', 'tags'];\n    function newListDirective($rootScope, $window, UserService, SearchService, ListsService, userData, tags) {\n      var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {\n          lists: '=',\n          show: '='\n        },\n        templateUrl: 'scripts/common/directives/new-list/new-list.tpl.html',\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs) {\n        scope.showSearchResult = false;\n        scope.members = [];\n        scope.saveNewList = saveNewList;\n        scope.searchPeople = searchPeople;\n        scope.saveToMembers = saveToMembers;\n        scope.removeFromMembers = removeFromMembers;\n        var alreadyAddedUsers = [];\n\n        scope.$watch(function() {\n          return scope.show;\n        }, function(newVal) {\n          if (newVal === true) {\n            scope.focus = true;\n            alreadyAddedUsers.push(scope.currentUserData.name);\n          } else {\n            cleanInputs();\n          }\n        });\n\n        loadCurrentUser();\n\n        function loadCurrentUser() {\n          if (!userData.getData()) {\n            UserService.getCurrentUser(function (response) {\n              userData.setData(response.user);\n              scope.currentUserData = response.user;\n            });\n          } else {\n            scope.currentUserData = userData.getData();\n          }\n        }\n\n        function saveNewList(validation) {\n          scope.newListSubmitted = true;\n\n          if (validation) {\n            var result = tags.getTagsAndText(scope.newListTitle);\n\n            var title = result.text;\n            var hashTags = result.hashTags;\n\n            ListsService.save({ title: title, tags: hashTags, members: scope.members }, function (response) {\n              scope.lists.push(response.list);\n              $rootScope.$emit('hideFogOverlay');\n              cleanInputs();\n            });\n          }\n        }\n\n        function searchPeople() {\n          if (scope.searchUser) {\n            SearchService.users({}, { name: scope.searchUser, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToMembers(user) {\n          scope.members.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.searchUser = null;\n          scope.users = [];\n        }\n\n        function removeFromMembers(member) {\n          var indexAddedUsers;\n\n          scope.members.forEach(function(i, index) {\n            if (scope.members[index].name === member.name) {\n              scope.members.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function cleanInputs() {\n          scope.showSearchResult = false;\n          scope.users = [];\n          scope.members = [];\n          scope.searchUser = null;\n          scope.nameMember = null;\n          scope.newListTitle = null;\n          scope.newListForm.$setPristine();\n          scope.newListSubmitted = false;\n          alreadyAddedUsers = [];\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .directive('onFinishRender', onFinishRender);\n\n    onFinishRender.$inject = [\"$timeout\"];\n    function onFinishRender($timeout) {\n      var directive = {\n        restrict: 'A',\n        link: linkFunc,\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        if (scope.$last === true) {\n          $timeout(function() {\n            scope.$eval(attrs.onFinishRender);\n          }, 1000);\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"loginPageCtrl\", LoginPageCtrl);\n\n  LoginPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n  function LoginPageCtrl($window, $state, AuthService) {\n    var loginVm = this;\n    loginVm.submitted;\n    loginVm.submitData = submitData;\n    loginVm.clearMessageError = clearMessageError;\n\n    function submitData(validation) {\n      loginVm.submitted = true;\n\n      if (validation) {\n        var userData = {\n          username: loginVm.username,\n          password: loginVm.password\n        };\n\n        AuthService.login({}, userData, function (response) {\n          $window.localStorage.token = response.token;\n          $window.localStorage.user = loginVm.username;\n          $state.go(\"main.lists\", { username: loginVm.username });\n        }, function (error) {\n          delete $window.localStorage.token;\n          loginVm.message = error.data.message;\n        });\n      }\n    }\n\n    function clearMessageError() {\n      loginVm.message = null;\n    }\n  }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"signupPageCtrl\", SignupPageCtrl);\n\n    SignupPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n    function SignupPageCtrl($window, $state, AuthService) {\n      var signupVm = this;\n\n      signupVm.submitted;\n      signupVm.message;\n      signupVm.submitData = submitData;\n      signupVm.clearMessageError = clearMessageError;\n\n      function submitData(validation) {\n        signupVm.submitted = true;\n\n        if (validation) {\n          var userData = {\n            username: signupVm.userName,\n            email:    signupVm.userEmail,\n            password: signupVm.userPassword\n          }\n\n          AuthService.save({}, userData, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = signupVm.userName;\n            $state.go(\"main.interests\");\n          }, function (error) {\n            delete $window.localStorage.token;\n            signupVm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        signupVm.message = null;\n      }\n    }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"interestsPageCtrl\", InterestsPageCtrl);\n\n    InterestsPageCtrl.$inject = [\"$timeout\", \"$window\", \"$state\", \"UserService\", 'InterestsService'];\n    function InterestsPageCtrl($timeout, $window, $state, UserService, InterestsService) {\n      var vm = this;\n      var i = 0;\n      var colorsArray = [\"red\", \"orange\", \"yellow\", \"green\", \"indigo\", \"violet\"];\n      var promiseTimeout;\n      vm.interests = [];\n      vm.selectedInterest = [];\n      vm.chooseInterest = chooseInterest;\n      vm.removeInterest = removeInterest;\n      vm.saveInterests = saveInterests;\n      vm.username = $window.localStorage.user; // send to ui-router\n      // delay is necessary to run the animation\n      InterestsService.get(function (response) {\n        $timeout(function() {\n          vm.interests = response.interests;\n        }, 100);\n      });\n\n      /**\n       * This function set to target element some class,\n       * add to array of chosen interests - new interest\n       * and remove from array of colors - first color\n       * which is used in the array of chosen interests,\n       */\n      function chooseInterest(event, index) {\n        var target = angular.element(event.target);\n        if (i < 6) {\n          target.addClass(\"chosen-interest\");\n          vm.selectedInterest.push({ text: target.text(), color: colorsArray[0], id: index });\n          colorsArray.shift();\n          i++;\n        }\n      }\n\n      /**\n       * This function get data-id from target element\n       * Removes the necessary item from the array by index\n       * Find the element of interests by data and remove some class\n       * and push to the array of colors - color from target element\n       */\n      function removeInterest(event, index) {\n        var targetId = event.target.dataset.selectedId;\n        vm.selectedInterest.splice(index, 1);\n        angular.element(document.querySelectorAll(\"[data-id='\" + targetId + \"']\")).removeClass(\"chosen-interest\");\n        colorsArray.push(event.target.dataset.color)\n        i--;\n      }\n      // i know this code placing between fuck and shit\n\n      function saveInterests() {\n        var interestsArray = [];\n\n        if (vm.selectedInterest.length > 0) {\n          vm.selectedInterest.forEach(function(item) {\n            interestsArray.push(item.text);\n          });\n\n          UserService.getCurrentUser(function (response) {\n            response.user.interests = interestsArray;\n\n            UserService.update({}, { user: response.user }, function (response) {\n              $state.go(\"main.lists\", { username: vm.username });\n            });\n          })\n\n        } else {\n\n          vm.emptyInterests = (vm.emptyInterests)\n            ? false\n            : true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"listsPageCtrl\", ListsPageCtrl);\n\n    ListsPageCtrl.$inject = [\"$scope\", \"$rootScope\", \"$stateParams\", \"ListsService\", 'UserService', 'userData', 'listsFilter'];\n    function ListsPageCtrl($scope, $rootScope, $stateParams, ListsService, UserService, userData, listsFilter) {\n      var listsVm = this;\n      var username = $stateParams.username;\n      listsVm.showNewList; // check open popup\n      listsVm.newListSubmitted; // check press submit button\n      listsVm.createNewList = createNewList;\n      listsVm.selectSort = selectSort;\n      listsVm.reloadList = reloadList;\n      listsVm.isOwner = userData.isOwnerPage();\n\n      // fog broadcast\n      $scope.$on('closePopup', closePopup);\n\n      activate();\n\n      function activate() {\n        // if we work with page of another user\n        if (listsVm.isOwner !== true) {\n          // load his data\n          UserService.get({ name: username }, function (response) {\n            listsVm.user = response.user;\n          });\n        }\n\n        // get all lists of user\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function masonry() {\n        // var elem = document.querySelector('.lists-wrapper');\n        // var msnry = new Masonry( elem, {\n        //   // options\n        //   itemSelector: '.col-sm-4',\n        //   percentPosition: true\n        // });\n      }\n\n      function createNewList() {\n        listsVm.showNewList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function reloadList() {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function selectSort(type) {\n        listsVm.filter = {\n          owner: {}\n        };\n\n        if (type === 'own') {\n          listsVm.filter.owner.name = 'Eugene';\n          listsFilter.setIsOwnFilter(true);\n        } else if (type === 'inbox') {\n          listsVm.filter.owner.name = '!Eugene';\n          listsFilter.setIsOwnFilter(false);\n        }\n      }\n\n      function closePopup() {\n        listsVm.showNewList = false;\n      }\n    };\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('accountPageCtrl', AccountPageCtrl);\n\n    AccountPageCtrl.$inject = ['$window', '$rootScope', 'UserService'];\n    function AccountPageCtrl($window, $rootScope, UserService) {\n      var vm = this;\n      vm.saveChanges = saveChanges;\n      vm.changeAvatar = changeAvatar;\n      vm.clearMessageError = clearMessageError;\n\n      activate();\n\n      function activate() {\n        UserService.getCurrentUser(function (response) {\n          vm.user = response.user;\n        });\n      }\n\n      function saveChanges(validation) {\n\n        if (validation) {\n          vm.message = null;\n          vm.messageDone = null;\n          UserService.update({}, { user: vm.user }, function (response) {\n            vm.messageDone = response.message;\n            $rootScope.$emit('reloadNavbar');\n          }, function (error) {\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          console.log('error')\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.avatarImage = response.avatar;\n            $rootScope.$emit('reloadNavbar');\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"passwordPageCtrl\", PasswordPageCtrl);\n\n    PasswordPageCtrl.$inject = [\"UserService\"];\n    function PasswordPageCtrl(UserService) {\n      var vm = this;\n\n      vm.savePassword = savePassword;\n\n      function savePassword(validation) {\n        vm.submitted = true;\n        vm.errorConfirmPass = null;\n        vm.message = null;\n        vm.messageDone = null;\n        var body = {};\n        if(validation) {\n          if (vm.newPass === vm.newPassConfirm) {\n            body = {\n              oldPass: vm.oldPass,\n              newPass: vm.newPassConfirm\n            }\n\n            UserService.save({}, body, function (response) {\n              vm.messageDone = response.message;\n            }, function (error) {\n              vm.message = error.data.message;\n            });\n          } else {\n            vm.errorConfirmPass = true;\n          }\n        }\n      }\n    };\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .controller('userNavCtrl', UserNavCtrl);\n\n    UserNavCtrl.$inject = ['$rootScope', '$scope', '$state', '$window', 'UserService', 'userData'];\n    function UserNavCtrl($rootScope, $scope, $state, $window, UserService, userData) {\n      var navVm = this;\n      navVm.user = {};\n      navVm.logout = logout;\n      navVm.openDropdown = openDropdown;\n      navVm.changeAvatar = changeAvatar;\n      navVm.closeDropdown = closeDropdown;\n      navVm.username = $window.localStorage.user;\n      var listener = $rootScope.$on('reloadNavbar', load);\n\n      load();\n\n      function load() {\n        if (!userData.getData()) {\n          UserService.getCurrentUser(function (response) {\n            userData.setData(response.user);\n            navVm.user = response.user;\n          });\n        } else {\n          navVm.user = userData.getData();\n        }\n      }\n\n      function openDropdown(event) {\n        navVm.dropdownIsOpen = (navVm.dropdownIsOpen) ? false : true;\n      }\n\n      function closeDropdown() {\n        navVm.dropdownIsOpen = false;\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare('image/jpeg') !== 0 && image.type.localeCompare('image/png') !== 0) {\n          alert('File format not support');\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            navVm.user.avatar = response.avatar;\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        $state.go('home');\n      }\n\n      $scope.$on('$destroy', listener);\n    };\n\n})();\n"],"sourceRoot":"/source/"}