{"version":3,"sources":["core/app-bootstrap.js","core/app.mdl.js","common/config/interceptors.cfg.js","common/config/router.cfg.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/lists.fctr.js","common/services/search.fctr.js","common/services/state-change-error.srv.js","common/services/state-change-success.srv.js","common/services/tags.srv.js","common/services/task.fctr.js","common/services/user-logged.srv.js","common/services/user.fctr.js","core/auth/auth-login/auth-login.ctrl.js","core/auth/auth-signup/auth-signup.ctrl.js","core/main/main-interests/main-interests.ctrl.js","core/main/main-lists/main-lists.ctrl.js","core/main-profile/profile-account/profile-account.ctrl.js","core/main-profile/profile-password/profile-password.ctrl.js","core/navbar/navbar-user/navbar-user.ctrl.js","common/components/list/list.cmp.js","common/components/task/task.cmp.js","common/directives/click-outside/click-outside.drv.js","common/directives/click-enter/click-enter.drv.js","common/directives/contenteditable/contenteditable.drv.js","common/directives/custom-focus/custom-focus.drv.js","common/directives/file-reader/file-reader.drv.js","common/directives/fog/fog.drv.js","common/directives/list-background/list-background.drv.js","common/directives/list-invite/list-invite.drv.js"],"names":["angular","element","document","ready","bootstrap","configure","$locationProvider","$stateProvider","$urlRouterProvider","$httpProvider","configRouter","configInterceptors","runBlock","stateChangeSuccess","stateChangeError","initialize","module","config","run","$inject","interceptors","push","constant","state","url","views","navbar","templateUrl","content","abstract","resolve","isUserLogged","content@","controller","controllerAs","profile","otherwise","html5Mode","userLogged","logged","authInterceptor","$rootScope","$q","$window","$injector","request","headers","localStorage","token","Authorization","responseError","response","status","get","go","reject","factory","AuthService","$resource","type","save","method","params","login","ListsService","data","id","user","query","isArray","update","SearchService","lists","users","$state","$on","event","toState","toParams","fromState","fromParams","error","username","stateNames","name","split","body","length","tags","this","getTagsAndText","text","hashTags","twitterTags","twttr","txt","extractHashtags","forEach","item","indexOf","replace","service","TaskService","list","task","deferred","defer","promise","UserService","avatar","getInterests","setInterests","LoginPageCtrl","submitData","validation","loginVm","submitted","userData","password","message","clearMessageError","SignupPageCtrl","signupVm","userName","email","userEmail","userPassword","InterestsPageCtrl","$timeout","chooseInterest","index","target","i","addClass","vm","selectedInterest","color","colorsArray","shift","removeInterest","targetId","dataset","selectedId","splice","querySelectorAll","removeClass","saveInterests","arrayToSend","interests","emptyInterests","ListsPageCtrl","$scope","$stateParams","activate","listsVm","createNewList","newListPopup","focus","$emit","reloadList","callback","saveNewList","newListSubmitted","result","newListTitle","title","newListForm","$setPristine","closePopup","AccountPageCtrl","avatarImage","bio","saveChanges","messageDone","changeAvatar","image","reader","localeCompare","console","log","FileReader","onload","readAsDataURL","PasswordPageCtrl","savePassword","errorConfirmPass","newPass","newPassConfirm","oldPass","UserNavCtrl","load","navVm","openDropdown","dropdownIsOpen","closeDropdown","logout","listener","listController","addNewTask","allowSavingTask","listID","taskText","self","tasks","clearInput","showInviteList","showBackground","closePopupAndOverlay","invitePeople","openBackgroundPopup","removeList","reload","saveTextToTemp","textBeforeEdit","textTemp","saveEditedTitle","reloadTasks","_id","component","bindings","taskController","changeColor","className","hasClass","taskID","closeEditMode","editMode","editTaskText","focusOn","currentTarget","setTaskCompleted","completed","saveEditedText","removeTask","$onInit","listCtrl","require","clickOutsideDirective","$document","$parse","linkFunc","scope","attrs","fn","eventHandler","childElement","contains","$apply","on","off","directive","restrict","link","clickEnterDirective","bind","which","$eval","clickEnter","contenteditableDirective","ngModel","read","$setViewValue","html","$render","$viewValue","customFocusDirective","$watch","value","trigger","fileReaderDirective","files","fogDirective","hideFogOverlay","showFogState","$parent","$broadcast","showFogOverlay","listenerShowOverlay","listenerHideOverlay","template","listBackgroundDirective","clickHandler","parent","children","listInviteDirective","elem","loadData","members","slice","stash","alreadyAddedUsers","owner","searchPeople","usedNames","responce","showSearchResult","saveToStash","removeFromStash","member","indexAddedUsers","saveToMembers","newVal"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular.element(document).ready(function() {\n    angular.bootstrap(document, [\"llamaLists\"]);\n  });\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists', ['ui.router', 'ngMessages', 'ngResource', 'ngAnimate'])\n    .config(configure)\n    .run(runBlock);\n\n\n  configure.$inject = [\"$locationProvider\", \"$stateProvider\", \"$urlRouterProvider\", '$httpProvider', 'configRouter', 'configInterceptors'];\n  function configure($locationProvider, $stateProvider, $urlRouterProvider, $httpProvider, configRouter, configInterceptors) {\n    configRouter($locationProvider, $stateProvider, $urlRouterProvider);\n    configInterceptors($httpProvider);\n  }\n  /* set body id for css style */\n  runBlock.$inject = ['stateChangeSuccess', 'stateChangeError'];\n  function runBlock(stateChangeSuccess, stateChangeError) {\n    stateChangeSuccess.initialize();\n    stateChangeError.initialize();\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configInterceptors', configInterceptors);\n\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push(\"AuthInterceptor\");\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .constant('configRouter', configRouter);\n\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider) {\n      $stateProvider\n        .state(\"home\", {\n          url: \"/\",\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-auth/navbar-auth.tpl.html\"\n            },\n            \"content\": {\n              templateUrl: \"home/home.tpl.html\"\n            }\n          }\n        })\n        .state(\"auth\", {\n          url: \"\",\n          abstract: true,\n          resolve: {\n            isUserLogged: isUserLogged\n          }\n        })\n        .state(\"auth.login\", {\n          url: \"/login\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-login/auth-login.tpl.html\",\n              controller:   \"loginPageCtrl\",\n              controllerAs: \"loginVm\"\n            }\n          }\n        })\n        .state(\"auth.signup\", {\n          url: \"/signup\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"auth/auth-signup/auth-signup.tpl.html\",\n              controller:   \"signupPageCtrl\",\n              controllerAs: \"signupVm\"\n            }\n          }\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          views: {\n            \"navbar\": {\n              templateUrl:  \"navbar/navbar-user/navbar-user.tpl.html\",\n              controller:   \"userNavCtrl\",\n              controllerAs: \"navVm\"\n            }\n          }\n        })\n        .state(\"main.lists\", {\n          url: \"/:username\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-lists/main-lists.tpl.html\",\n              controller:   \"listsPageCtrl\",\n              controllerAs: \"listsVm\"\n            }\n          }\n        })\n        .state(\"main.interests\", {\n          url: \"/interests/\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main/main-interests/main-interests.tpl.html\",\n              controller:   \"interestsPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile\", {\n          url: \"/profile\",\n          views: {\n            \"content@\": {\n              templateUrl:  \"main-profile/main-profile.tpl.html\"\n            }\n          }\n        })\n        .state(\"main.profile.account\", {\n          url: \"/account\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-account/profile-account.tpl.html\",\n              controller:   \"accountPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"main.profile.password\", {\n          url: \"/password\",\n          views: {\n            \"profile\": {\n              templateUrl:  \"main-profile/profile-password/profile-password.tpl.html\",\n              controller:   \"passwordPageCtrl\",\n              controllerAs: \"vm\"\n            }\n          }\n        })\n        .state(\"404\", {\n          url: \"/404\",\n          views: {\n            \"content\": {\n              templateUrl: \"404/404.tpl.html\"\n            }\n          }\n        });\n\n      $urlRouterProvider.otherwise(\"/404\");\n      $locationProvider.html5Mode(true);\n    }\n\n    isUserLogged.$inject = ['userLogged'];\n    function isUserLogged(userLogged) {\n      return userLogged.logged();\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .factory('AuthInterceptor', authInterceptor);\n\n    authInterceptor.$inject = [\"$rootScope\", \"$q\", \"$window\", \"$injector\"];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = \"Bearer \" + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go(\"home\"); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go(\"404\");\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"AuthService\", AuthService);\n\n    AuthService.$inject = [\"$resource\"];\n    function AuthService($resource) {\n      return $resource(\"/auth/:type\", {\n        type: \"@type\"\n      },\n      {\n        save: {\n          method: \"POST\",\n          params: {\n            type: \"signup\"\n          }\n        },\n        login: {\n          method: \"POST\",\n          params: {\n            type: \"login\"\n          }\n        }\n      });\n    }\n})();\n","/**\n * This service controll lists request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"ListsService\", ListsService);\n\n    ListsService.$inject = [\"$resource\"];\n    function ListsService($resource) {\n      var data = $resource(\"/api/lists/:id:user\", { id: \"@id\", user: \"@user\"}, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","/**\n * This service controll search request\n */\n\n(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('SearchService', SearchService);\n\n    SearchService.$inject = ['$resource'];\n    function SearchService($resource) {\n      var data = $resource('/api/search/:type', {},\n      {\n        lists: {\n          method: 'GET',\n          params: {\n            type: 'lists'\n          }\n        },\n        users: {\n          method: 'POST',\n          params: {\n            type: 'users'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeError', stateChangeError);\n\n    stateChangeError.$inject = ['$rootScope', '$state', '$window'];\n    function stateChangeError($rootScope, $state, $window) {\n      return {\n        initialize: function() {\n          $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n            if (error === 'isAlreadyLogged') {\n              $state.go('main.lists', { username: $window.localStorage.user });\n            }\n          });\n        }\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('llamaLists')\n    .factory('stateChangeSuccess', stateChangeSuccess);\n\n    stateChangeSuccess.$inject = ['$rootScope'];\n    function stateChangeSuccess($rootScope) {\n        return {\n          initialize: function() {\n            $rootScope.$on('$stateChangeSuccess', function(event, toState){\n              var stateNames = toState.name.split('.');\n              document.body.id = stateNames[stateNames.length - 1] + '-page';\n            });\n          }\n        }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"tags\", tags);\n\n    function tags() {\n\n      this.getTagsAndText = function(text) {\n        var hashTags = [];\n        var twitterTags = twttr.txt.extractHashtags(text);\n\n        twitterTags.forEach(function(item) {\n\n          // twitter extracted tags without hash, therefore add this symbol for them\n          if (hashTags.indexOf(item) === -1) { // additional check on the tags already added\n            hashTags.push(item);\n          }\n\n          if (text.indexOf('<span>#' + item + '</span>') === -1) {\n            text = text.replace('#' + item, '<span>#' + item + '</span>');\n          }\n\n          // text = text.replace(/(^|\\s)#ama(\\s|$)/, '<span>#' + item + '</span>'); // maybe work replace word\n          // text = text.replace('#' + item, '<span>#' + item + '</span>').replace(/\\s\\s+/g, ' '); // replace spaces\n        });\n\n        return {\n          text: text,\n          hashTags: hashTags\n        }\n      }\n    }\n})();\n","/**\n * This service controll task request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"TaskService\", TaskService);\n\n    TaskService.$inject = [\"$resource\"];\n    function TaskService($resource) {\n      var data = $resource(\"/api/lists/:list/task/:task\", { list: \"@list\", task: \"@task\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module(\"llamaLists\")\n    .service(\"userLogged\", userLogged);\n\n    userLogged.$inject = [\"$window\", \"$state\", \"$q\"];\n    function userLogged($window, $state, $q) {\n\n      this.logged = function() {\n        var deferred = $q.defer();\n        if($window.localStorage.token) {\n          deferred.reject(\"isAlreadyLogged\");\n        } else {\n          deferred.resolve();\n        }\n\n        return deferred.promise;\n      }\n    }\n})();\n","/**\n * This service controll user request\n */\n\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .factory(\"UserService\", UserService);\n\n    UserService.$inject = [\"$resource\"];\n    function UserService($resource) {\n      var data = $resource(\"/api/user/:type\", { type: \"@type\" }, {\n        update:  {\n          method: \"PUT\"\n        },\n        avatar: {\n          method: \"PUT\",\n          params: {\n            type: \"avatar\"\n          }\n        },\n        getInterests: {\n          method: \"GET\",\n          params: {\n            type: \"interests\"\n          }\n        },\n        setInterests: {\n          method: \"PUT\",\n          params: {\n            type: \"interests\"\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"loginPageCtrl\", LoginPageCtrl);\n\n  LoginPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n  function LoginPageCtrl($window, $state, AuthService) {\n    var loginVm = this;\n    loginVm.submitted;\n    loginVm.submitData = submitData;\n    loginVm.clearMessageError = clearMessageError;\n\n    function submitData(validation) {\n      loginVm.submitted = true;\n\n      if (validation) {\n        var userData = {\n          username: loginVm.username,\n          password: loginVm.password\n        };\n\n        AuthService.login({}, userData, function (response) {\n          $window.localStorage.token = response.token;\n          $window.localStorage.user = loginVm.username;\n          $state.go(\"main.lists\", { username: loginVm.username });\n        }, function (error) {\n          delete $window.localStorage.token;\n          loginVm.message = error.data.message;\n        });\n      }\n    }\n\n    function clearMessageError() {\n      loginVm.message = null;\n    }\n  }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"signupPageCtrl\", SignupPageCtrl);\n\n    SignupPageCtrl.$inject = [\"$window\", \"$state\", \"AuthService\"];\n    function SignupPageCtrl($window, $state, AuthService) {\n      var signupVm = this;\n\n      signupVm.submitted;\n      signupVm.message;\n      signupVm.submitData = submitData;\n      signupVm.clearMessageError = clearMessageError;\n\n      function submitData(validation) {\n        signupVm.submitted = true;\n\n        if (validation) {\n          var userData = {\n            username: signupVm.userName,\n            email:    signupVm.userEmail,\n            password: signupVm.userPassword\n          }\n\n          AuthService.save({}, userData, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = signupVm.userName;\n            $state.go(\"main.interests\");\n          }, function (error) {\n            delete $window.localStorage.token;\n            signupVm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        signupVm.message = null;\n      }\n    }\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular.module(\"llamaLists\")\n    .controller(\"interestsPageCtrl\", InterestsPageCtrl);\n\n    InterestsPageCtrl.$inject = [\"$timeout\", \"$window\", \"$state\", \"UserService\"];\n    function InterestsPageCtrl($timeout, $window, $state, UserService) {\n      var vm = this;\n      var i = 0;\n      var colorsArray = [\"red\", \"orange\", \"yellow\", \"green\", \"indigo\", \"violet\"];\n      var promiseTimeout;\n      vm.interests = [];\n      vm.selectedInterest = [];\n      vm.chooseInterest = chooseInterest;\n      vm.removeInterest = removeInterest;\n      vm.saveInterests = saveInterests;\n      vm.username = $window.localStorage.user; // send to ui-router\n      // delay is necessary to run the animation\n      UserService.getInterests(function (response) {\n        $timeout(function() {\n          vm.interests = response.interests;\n        }, 100);\n      });\n\n      /**\n       * This function set to target element some class,\n       * add to array of chosen interests - new interest\n       * and remove from array of colors - first color\n       * which is used in the array of chosen interests,\n       */\n      function chooseInterest(event, index) {\n        var target = angular.element(event.target);\n        if (i < 6) {\n          target.addClass(\"chosen-interest\");\n          vm.selectedInterest.push({ text: target.text(), color: colorsArray[0], id: index });\n          colorsArray.shift();\n          i++;\n        }\n      }\n\n      /**\n       * This function get data-id from target element\n       * Removes the necessary item from the array by index\n       * Find the element of interests by data and remove some class\n       * and push to the array of colors - color from target element\n       */\n      function removeInterest(event, index) {\n        var targetId = event.target.dataset.selectedId;\n        vm.selectedInterest.splice(index, 1);\n        angular.element(document.querySelectorAll(\"[data-id='\" + targetId + \"']\")).removeClass(\"chosen-interest\");\n        colorsArray.push(event.target.dataset.color)\n        i--;\n      }\n      // i know this code placing between fuck and shit\n\n      function saveInterests() {\n        var arrayToSend = [];\n\n        if (vm.selectedInterest.length > 0) {\n          vm.selectedInterest.forEach(function(item) {\n            arrayToSend.push(item.text);\n          });\n          UserService.setInterests({}, { interests: arrayToSend }, function (response) {\n            $state.go(\"main.lists\");\n          });\n        } else {\n\n          vm.emptyInterests = (vm.emptyInterests)\n            ? false\n            : true;\n        }\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"listsPageCtrl\", ListsPageCtrl);\n\n    ListsPageCtrl.$inject = [\"$scope\", \"$rootScope\", \"$stateParams\", \"$window\", \"ListsService\", \"tags\"];\n    function ListsPageCtrl($scope, $rootScope, $stateParams, $window, ListsService, tags) {\n      var listsVm = this;\n      var username = $stateParams.username;\n      listsVm.newListPopup; // check open popup\n      listsVm.newListSubmitted; // check press submit button\n      listsVm.createNewList = createNewList;\n      listsVm.saveNewList = saveNewList;\n      listsVm.reloadList = reloadList;\n\n      // fog broadcast\n      $scope.$on('closePopup', closePopup);\n      // list broadcast\n      // $scope.$on('reloadLists', activate);\n\n      activate();\n\n      function activate() {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n        });\n      }\n\n      function createNewList() {\n        listsVm.newListPopup = true;\n        listsVm.focus = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function reloadList(callback) {\n        ListsService.get({ user: username }, function (response) {\n          listsVm.lists = response.lists;\n\n          if (callback) {\n            callback();\n          }\n        });\n      }\n\n      function saveNewList(validation) {\n        listsVm.newListSubmitted = true;\n\n        if (validation) {\n          var result = tags.getTagsAndText(listsVm.newListTitle);\n\n          var title = result.text;\n          var hashTags = result.hashTags;\n\n          ListsService.save({ title: title, tags: hashTags }, function (response) {\n            reloadList(function() {\n              // end work with popup\n              $rootScope.$emit(\"hideFogOverlay\");\n              listsVm.newListTitle = null;\n              listsVm.newListForm.$setPristine();\n              listsVm.newListSubmitted = false;\n            });\n          });\n        }\n      }\n\n      function closePopup() {\n        listsVm.newListPopup = false;\n      }\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"accountPageCtrl\", AccountPageCtrl);\n\n    AccountPageCtrl.$inject = [\"$rootScope\", \"UserService\"];\n    function AccountPageCtrl($rootScope, UserService) {\n      var vm = this;\n      vm.saveChanges = saveChanges;\n      vm.changeAvatar = changeAvatar;\n      vm.clearMessageError = clearMessageError;\n\n      activate();\n\n      function activate() {\n        UserService.get(function (response) {\n          vm.avatarImage = response.user.avatar;\n          vm.name = response.user.name;\n          vm.email = response.user.email;\n          vm.bio = response.user.bio;\n        });\n      }\n\n      function saveChanges(validation) {\n        var body = {};\n\n        if (validation) {\n          body.name = vm.name;\n          body.email = vm.email;\n          body.bio = vm.bio;\n\n          vm.message = null;\n          vm.messageDone = null;\n          UserService.update({}, body, function (response) {\n            vm.messageDone = response.message;\n            $rootScope.$emit(\"reloadNavbar\");\n          }, function (error) {\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare(\"image/jpeg\") !== 0 && image.type.localeCompare(\"image/png\") !== 0) {\n          console.log(\"error\")\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.avatarImage = response.avatar;\n            $rootScope.$emit(\"reloadNavbar\");\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"passwordPageCtrl\", PasswordPageCtrl);\n\n    PasswordPageCtrl.$inject = [\"UserService\"];\n    function PasswordPageCtrl(UserService) {\n      var vm = this;\n\n      vm.savePassword = savePassword;\n\n      function savePassword(validation) {\n        vm.submitted = true;\n        vm.errorConfirmPass = null;\n        vm.message = null;\n        vm.messageDone = null;\n        var body = {};\n        if(validation) {\n          if (vm.newPass === vm.newPassConfirm) {\n            body = {\n              oldPass: vm.oldPass,\n              newPass: vm.newPassConfirm\n            }\n\n            UserService.save({}, body, function (response) {\n              vm.messageDone = response.message;\n            }, function (error) {\n              vm.message = error.data.message;\n            });\n          } else {\n            vm.errorConfirmPass = true;\n          }\n        }\n      }\n    };\n\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .controller(\"userNavCtrl\", UserNavCtrl);\n\n    UserNavCtrl.$inject = [\"$rootScope\", \"$scope\", \"$state\", \"$window\", \"UserService\"];\n    function UserNavCtrl($rootScope, $scope, $state, $window, UserService) {\n      var navVm = this;\n      navVm.logout = logout;\n      navVm.openDropdown = openDropdown;\n      navVm.changeAvatar = changeAvatar;\n      navVm.closeDropdown = closeDropdown;\n      navVm.username = $window.localStorage.user;\n      var listener = $rootScope.$on(\"reloadNavbar\", load);\n\n      load();\n\n      function load() {\n        UserService.get({}, function (response) {\n          navVm.name = response.user.name;\n          navVm.avatarImage = response.user.avatar;\n        });\n      }\n\n      function openDropdown(event) {\n        navVm.dropdownIsOpen = (navVm.dropdownIsOpen) ? false : true;\n      }\n\n      function closeDropdown() {\n        navVm.dropdownIsOpen = false;\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare(\"image/jpeg\") !== 0 && image.type.localeCompare(\"image/png\") !== 0) {\n          console.log(\"error\")\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            navVm.avatarImage = response.avatar;\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        $state.go(\"home\");\n      }\n\n      $scope.$on('$destroy', listener);\n    };\n\n})();\n","/**\n * This component controll list data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"list\", {\n      bindings: {\n        data: \"=\",\n        reload: \"&\"\n      },\n      controller: listController,\n      templateUrl: 'scripts/common/components/list/list.tpl.html'\n    });\n\n    listController.$inject = ['$scope', '$rootScope', '$timeout', 'ListsService', 'TaskService', 'tags'];\n    function listController($scope, $rootScope, $timeout, ListsService, TaskService, tags) {\n      //variable\n      var allowSavingTask = true;\n      var textBeforeEdit = '';\n      var textTemp = '';\n      var self = this;\n      this.listID = this.data._id;\n\n      // function\n      this.addNewTask = addNewTask;\n      this.clearInput = clearInput;\n      this.closePopupAndOverlay = closePopupAndOverlay;\n      this.invitePeople = invitePeople;\n      this.openBackgroundPopup = openBackgroundPopup;\n      this.saveEditedTitle = saveEditedTitle;\n      this.saveTextToTemp = saveTextToTemp;\n      this.removeList = removeList;\n      this.reloadTasks = reloadTasks;\n      $scope.$on('closePopup', closePopup);\n\n      function addNewTask(validation) {\n\n        if (validation && allowSavingTask) {\n          allowSavingTask = false;\n\n          TaskService.save({ list: this.listID }, { text: this.taskText }, function (response) {\n            self.data.tasks = response.tasks;\n            self.taskText = null;\n            allowSavingTask = true;\n          });\n        }\n      }\n\n      function clearInput() {\n        this.taskText = null;\n      }\n\n      function closePopup() {\n        self.showInviteList = false;\n        self.showBackground = false;\n      }\n\n      function closePopupAndOverlay() {\n        this.showBackground = false;\n        this.showInviteList = false;\n        $rootScope.$emit(\"hideFogOverlay\");\n      }\n\n      function invitePeople() {\n        this.showInviteList = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function openBackgroundPopup() {\n        this.showBackground = true;\n        $rootScope.$emit(\"showFogOverlay\");\n      }\n\n      function removeList() {\n        ListsService.delete({ id: this.listID }, function () {\n          self.reload();\n        });\n      }\n\n      function saveTextToTemp() {\n        textBeforeEdit = this.data.title;\n        this.data.title = this.data.title.replace(/(<([^>]+)>)/ig, '');\n        textTemp = this.data.title;\n\n      }\n\n      function saveEditedTitle() {\n        // replacement needed, because when contenteditable element empty,\n        // browser automaticaly add br tag\n        // and I don't know this is bug or feature\n        // var editedText = this.data.title.replace(/<br>/, \"\");\n\n        if (textTemp && textTemp !== this.data.title) {\n          var result = tags.getTagsAndText(this.data.title);\n          this.data.title = result.text;\n          this.data.tags = result.hashTags;\n\n          ListsService.update({ id: this.listID }, { list: this.data });\n        } else {\n          this.data.title = textBeforeEdit;\n        }\n      }\n\n      function reloadTasks(listID) {\n        TaskService.query({ list: listID }, function (response) {\n          self.data.tasks = response.tasks;\n        });\n      }\n    }\n})();\n","/**\n * This directive controll task data\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .component(\"task\", {\n      bindings: {\n        data: \"=\"\n      },\n      require: {\n        listCtrl: '^list'\n      },\n      controller: taskController,\n      templateUrl: 'scripts/common/components/task/task.tpl.html'\n    });\n\n    taskController.$inject = ['TaskService'];\n    function taskController(TaskService) {\n      var listID;\n      var reloadTasks;\n      var textBeforeEdit;\n      var taskID = this.data._id;\n      var self = this;\n      this.dropdownIsOpen = false;\n\n      //func\n      this.changeColor = changeColor;\n      this.closeEditMode = closeEditMode;\n      this.closeDropdown = closeDropdown;\n      this.editTaskText = editTaskText;\n      this.openDropdown = openDropdown;\n      this.setTaskCompleted = setTaskCompleted;\n      this.saveEditedText = saveEditedText;\n      this.removeTask = removeTask;\n\n      this.$onInit = function() {\n        listID = this.listCtrl.listID;\n        reloadTasks = this.listCtrl.reloadTasks;\n      }\n\n\n      function changeColor(event) {\n        var className = event.target.className;\n        var target = angular.element(event.target);\n\n        if (!target.hasClass(\"task__color--active\")) {\n          className = className.replace(\"task__color \", \"\"); // remove unnecessary part of class name\n\n          TaskService.update({ list: listID, task: taskID }, { color: className }, function (response) {\n            self.data.color = className;\n          });\n        }\n      }\n\n      function closeEditMode() {\n        this.data.text = textBeforeEdit;\n        this.editMode = false;\n      }\n\n      function closeDropdown() {\n        this.dropdownIsOpen = false;\n      }\n\n      function editTaskText() {\n        textBeforeEdit = this.data.text;\n        this.editMode = true;\n        this.focusOn = true;\n        this.closeDropdown();\n      }\n\n      function openDropdown(event) {\n        if (event.currentTarget === event.target) {\n          this.dropdownIsOpen = (this.dropdownIsOpen) ? false : true;\n        }\n      }\n\n      function setTaskCompleted(event) {\n        if (this.editMode !== true) {\n          TaskService.update({ list: listID, task: taskID }, { completed: true }, function (response) {\n            self.data.completed = response.task.completed;\n          });\n        }\n      }\n\n      function saveEditedText() {\n        if (this.data.text) {\n          TaskService.update({ list: listID, task: taskID }, { text: this.data.text }, function (response) {\n            self.editMode = false;\n          });\n        } else {\n          this.closeEditMode();\n        }\n      }\n\n      function removeTask() {\n        TaskService.delete({ list: listID, task: taskID }, function (response) {\n          reloadTasks(listID);\n        });\n      }\n    }\n})();\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"clickEnter\", clickEnterDirective);\n\n    function clickEnterDirective() {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        element.bind(\"keypress\", function (event) {\n          if(event.which === 13) { // 13 is enter code on keyboard :)\n            scope.$apply(function (){\n              scope.$eval(attrs.clickEnter);\n            });\n          }\n        });\n      }\n    }\n})();\n","/**\n * This directive add custom ng-model directive to non-form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"contenteditable\", contenteditableDirective)\n\n    function contenteditableDirective() {\n      var directive = {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, ngModel) {\n        function read() {\n          ngModel.$setViewValue(element.html());\n        }\n\n        ngModel.$render = function() {\n          element.html(ngModel.$viewValue || \"\");\n        };\n\n        element.bind(\"blur keyup change\", function() {\n          scope.$apply(read);\n        });\n      }\n    }\n\n}());\n","/**\n * This directive setup focus to non form element\n */\n(function() {\n\n\"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"customFocus\", customFocusDirective)\n\n    customFocusDirective.$inject = [\"$timeout\"];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: \"A\",\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n          // element[0].focus();\n\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","/**\n * This directive controll fog(black-transparent background)\n * for all popup window\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"fog\", fogDirective);\n\n    fogDirective.$inject = [\"$rootScope\"];\n    function fogDirective($rootScope) {\n      var directive = {\n        restrict: \"E\",\n        replace: true,\n        scope: {},\n        template: \"<div id='fog' ng-show='showFogState' ng-click='hideFogOverlay()'></div>\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var listenerShowOverlay = $rootScope.$on(\"showFogOverlay\", showFogOverlay);\n        var listenerHideOverlay = $rootScope.$on(\"hideFogOverlay\", hideFogOverlay);\n        scope.hideFogOverlay = hideFogOverlay;\n\n        /**\n         * remove rootscope listener\n         */\n        scope.$on('$destroy', listenerShowOverlay);\n        scope.$on('$destroy', listenerHideOverlay);\n\n        /**\n         * This function close any popup window\n         * And hide fog (or overlay)\n         */\n        function hideFogOverlay() {\n          scope.showFogState = false;\n          scope.$parent.$broadcast(\"closePopup\");\n        }\n\n        function showFogOverlay() {\n          scope.showFogState = true;\n        }\n      }\n    }\n})();\n","/**\n * This directive controll popup and change background for lists\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listBackground\", listBackgroundDirective);\n\n    listBackgroundDirective.$inject = ['ListsService']\n    function listBackgroundDirective(ListsService) {\n      var directive = {\n        restrict: \"A\",\n        require: '^list',\n        replace: true,\n        scope: {},\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs, listCtrl) {\n        if (attrs.class === listCtrl.data.image) {\n          element.addClass('active-background');\n        }\n\n        element.bind('click', clickHandler);\n\n        function clickHandler() {\n          if (!element.hasClass('active-background')) {\n            listCtrl.data.image = attrs.class;\n            element.parent().children().removeClass('active-background'); // baaaaaaaadd code\n\n            ListsService.update({ id: listCtrl.listID }, { list: listCtrl.data }, function (response) {\n              element.addClass('active-background');\n            });\n          }\n        }\n      }\n    }\n})();\n","/**\n * This directive controll invite new people to list\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"llamaLists\")\n    .directive(\"listInvite\", listInviteDirective);\n\n    listInviteDirective.$inject = ['SearchService', 'ListsService'];\n    function listInviteDirective(SearchService, ListsService) {\n      var directive = {\n        restrict: \"E\",\n        require: '^list',\n        replace: true,\n        templateUrl: \"scripts/common/directives/list-invite/list-invite.tpl.html\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, elem, attrs, listCtrl) {\n        var alreadyAddedUsers = [];\n        scope.owner = listCtrl.data.owner;\n        scope.stash = [];\n        scope.searchPeople = searchPeople;\n        scope.saveToStash = saveToStash;\n        scope.removeFromStash = removeFromStash;\n        scope.saveToMembers = saveToMembers;\n\n        scope.$watch(function() {\n          return listCtrl.showInviteList;\n        }, function(newVal) {\n          if (newVal === true) {\n            loadData();\n          } else {\n            scope.stash = [];\n          }\n        });\n\n        function loadData() {\n          listCtrl.data.members.forEach(function(i) {\n            i.interests = i.interests.slice(0, 3);\n            scope.stash.push(i);\n            alreadyAddedUsers.push(i.name);\n          });\n          console.log(listCtrl.data.members)\n\n          alreadyAddedUsers.push(listCtrl.data.owner.name);\n        }\n\n        function searchPeople() {\n          if (scope.members) {\n            SearchService.users({}, { name: scope.members, usedNames: alreadyAddedUsers }, function(responce) {\n              scope.users = responce.users;\n\n              if (scope.users && scope.users.length > 0) {\n                scope.showSearchResult = true;\n              } else {\n                scope.showSearchResult = false;\n              }\n            });\n          } else {\n            scope.showSearchResult = false;\n          }\n        }\n\n        function saveToStash(user) {\n          scope.stash.push(user);\n          alreadyAddedUsers.push(user.name);\n\n          // clear input\n          scope.showSearchResult = false;\n          scope.members = null;\n          scope.users = null;\n        }\n\n        function removeFromStash(member) {\n          var indexAddedUsers;\n\n          scope.stash.forEach(function(i, index) {\n            if (scope.stash[index].name === member.name) {\n              scope.stash.splice(index, 1);\n            }\n          })\n\n          indexAddedUsers = alreadyAddedUsers.indexOf(member.name);\n\n          if (indexAddedUsers > -1) {\n            alreadyAddedUsers.splice(indexAddedUsers, 1);\n          }\n        }\n\n        function saveToMembers() {\n          var list = listCtrl.data;\n          list.members = scope.stash;\n\n          ListsService.update({ id: listCtrl.listID }, { list: list }, function (response) {\n            listCtrl.showInviteList = true;\n            listCtrl.closePopupAndOverlay();\n          });\n        }\n      }\n    }\n})();\n"],"sourceRoot":"/source/"}